{"docstore/metadata": {"43aee896-1c81-435b-9db9-4fba08d7d6ac": {"doc_hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "44357fd8-118a-4732-b882-3c13d7546c08": {"doc_hash": "02841feaaf7fb8da317c7df57cae161d5a378b6d8540ebfa79e2b2380a2d9cea", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "236a6d6d-20a6-4757-badc-f866a9135339": {"doc_hash": "38c34a64abb0ecf401e490f7584b640d8741af50e5d38c5a5226f60a0ac296e1", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "d64da92a-17a3-4023-853b-7c74dd976d87": {"doc_hash": "095bca059287b5cd8597c439cbe1c7ea5ae8b4c1f2238f1e35dbb7b4fdb8d09b", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "71d46738-467b-4e87-b021-066c8046e7ae": {"doc_hash": "23066c52656869117fc57712550804359f369abfaab2dd99afd5f04b1bfe3aaa", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "f6568271-5f19-4d66-9bd0-c7e777945ef0": {"doc_hash": "bfafcf6d6b9c701ac00fb54324e4804bc68187427b4f0ce802a3f84bb7ba3390", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "124e091c-ccde-4ef2-aaf7-34c04982184c": {"doc_hash": "8e192a1d5e36ed13b49e5c870f3d2b76bcd33d58dee557f37dfdb39baabdcd6f", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "70484b64-d9ca-461f-95f3-f304afa1cde0": {"doc_hash": "118c750b63e194d86dc1348616640c659dc2498e3b5d1ec2ff95d3bac3f9b665", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "13f11265-e1e5-4771-8ca8-86c56c2f8b0f": {"doc_hash": "068877de84a22e0283b77a3d83572bb2557d5f0362c380c30768371c2c24d720", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "9d1519ce-14a4-4c25-a93b-6352bc5ececc": {"doc_hash": "5b9d85485b230da690949ef85e1789fe665612335609dd597067eefe690d6590", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "18aec66b-134d-4d9f-a7c4-15ddf9a1d404": {"doc_hash": "602b736c9aae16a2f2ca1acfed6ca5ea6b2a210125041272d26266598bcd8810", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "4acd66d9-a336-4a21-9b54-4184b6295540": {"doc_hash": "8f6b8d9500b843c5cd02369da8726fce215258fbf79e100cbafcb08243b597b2", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "f138628c-7670-43e4-9d40-2dd90be91f03": {"doc_hash": "85a6c05d39cf8d7b2ea4e9808d1a03701ea7d9ff54cf8aedb50c8d337f6e12f6", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "feaea0b8-0b7a-414e-b1b7-d73df1f05838": {"doc_hash": "4cfebbaabc54ab312a7680023e381fdc0d33a0301184355fcaa91bf8a1b15223", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "707c9630-30bc-4b34-bd5e-9b87ab542ca8": {"doc_hash": "004528ec48e4f27e67cc90121980d210c7b2176871d6f0d843d485c81b46dc51", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "686c5487-6b95-476d-85b0-ea47d55e4bb2": {"doc_hash": "974ac15747125893509df5209c691ae563601433ed33dfaccb99a1955fd84f46", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "ea661513-7849-43d8-bcf3-6ee40fc9e1bf": {"doc_hash": "e999834d09e900f57cb338abff747bcc9311241ee837149c35034235699c86f2", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "f483fd20-d3eb-486a-ac53-2e9c4ce1e41e": {"doc_hash": "e996aa71558f8df96b7fea3a0dcc7a89d705a7a1d42e66c158ae296a557e6f7c", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "05f678d1-f5d4-44e1-b916-b69dda87b27b": {"doc_hash": "c1a1734d714d3691ba323b3b4a4a4b5a8314c6cae2b2802fd90fe7d0dadff60f", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "96f385b3-756b-4c34-aaf7-50c7a6bdd422": {"doc_hash": "49d00b2d2c22f0bfed1f4c2a7fe9d843255d383a0430ad534822365eb6bb9103", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "e3980efa-d55a-4c77-8f4d-2322ddae7ebf": {"doc_hash": "c26fccdb2dfcc3b96d790bafd22ede5cf81839b4a1736d0ca81ad2e89e43bedb", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "9358ff6b-c39a-4bff-8ecb-0f0e126e05b3": {"doc_hash": "4472693b86cb15acfcd57792a02917777262710239f444fd72662ecf79c05c67", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "47c87c01-28be-4559-9618-c0eaaef59904": {"doc_hash": "33c3049071cf153382523aee15079ddad460cc3bb97eb89525cbb15260bbdce4", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "4b84d9fc-ca10-47f9-a376-36854ebb9a15": {"doc_hash": "ae6c8fcb489ebc646f78562c410eba9c93372d42f647b6768979d170d8e7c76d", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "92ef7552-a012-49d8-898d-0a3c9413b0ed": {"doc_hash": "303a93a3f82319af725eddfd76f9e7b8e5c1992329ba9bac52d00eb337c568a2", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "ba1b65a3-cc3a-463c-936a-65820f0c1674": {"doc_hash": "2965c97dd7551777d053d1cabc55e79ce775a78dac7e4c635a3811df61168cef", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "6a2cc766-bf41-4c27-8d68-bcd990772f52": {"doc_hash": "0732a3c1af3e2ee6c6c86dddf09bcf19ca25d352bd60052725b71c9666d3ee97", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "67f0e295-4799-4cb7-a0cc-44be13c385b9": {"doc_hash": "15718b4212bd8c2c2caaa5664bc388e7c668b4b3a4cbfb9d46ef97cfa3f80d7d", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "e016a22b-53ba-4043-8344-2e09f106a57c": {"doc_hash": "8652e9373a4fb89e6ded818e1ff573366111d77fadcc7b4218c33e5bd345dcf0", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "1c0731df-61c6-4a9e-835a-c206da06d1ce": {"doc_hash": "e9dc9d932c24cfeab462bc449bbf1a8c02a5fa0423917ea6e8a448c70c5c08f2", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "2bf3f888-cdb4-4c3d-a948-a7089331bec8": {"doc_hash": "1e25e81af4815e3afc5d1c003ac46a54f129e9c5757b683b4d74fa7a52dd0d65", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "0c94da61-44ad-42f2-b360-3d73700eed51": {"doc_hash": "14ee65f372a90318253c7df48ab9492f3afc356f5522bf13874e5959d536378e", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "913eba35-24c9-45d3-97cb-33c51306b748": {"doc_hash": "ed3c941995d47712342f618d6d3985f83e69787dd0360ede9a2603e2921123f9", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "aaaff49f-31ff-42d6-bfc0-e8b72b4ff4ca": {"doc_hash": "e6cf8cf9ebd7fb94a6cd9f9c1d72a6c62c4d5215f14b98a0528a93d227780fe9", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "0b38387d-fa50-48fd-bbaf-8c6019c00cb5": {"doc_hash": "a36febe01977a591bedfbf5926a89b6d599764cbbc6824ce6ad9ce2fcc7c5293", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "93071aa0-0b5c-49bc-b580-cc5e9b843910": {"doc_hash": "a0917970f94fce0bf548bd2eae47f43d12992c02e452fabd98009e8461f7c78a", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "1c5d9820-84c9-48fa-8b4a-83fcd2eff577": {"doc_hash": "d5c48841aace1a77a56116eebfba3cafbc59080386361306ce2e91a69c0bb9a6", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "16db21fb-da0a-4373-9307-a2773625a4f3": {"doc_hash": "ec32f336411d7811472cc2c8d5c06bf26059c67487f782c2d9ccee0fd48c668e", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "e2e8ffe0-df68-41d4-aaee-af6ae07f27d5": {"doc_hash": "f5144604ca94645f295580023cf847149bd123fe98bd2c2c629670b671f36a68", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "2de59512-9a90-4971-ba97-93f773f7cb10": {"doc_hash": "6ff5573e58800bbfe8da3bae7f2a1cae36fa3747432aa60ecc0a943737fd3299", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "bc0c2469-4e5b-41e5-927b-90587c1c209a": {"doc_hash": "007a0d2c8be81e9f80e7da10706d80c3f653a41507ef91811d684e25130c9f5e", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "ab41f012-46ce-432c-87df-c81767fb3839": {"doc_hash": "2e347c0d7ce986c67df9c9681ffd122cfb7775030ba0bc3f11661e5602593daa", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "66120e66-43af-41f4-ae5c-b08de3244ec3": {"doc_hash": "e0cf77e53303008cb14e5ad6347c3ef2bd23e70edab4d1ca57f8aaffe1ac5fea", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "a91edf2d-4dc3-43e9-a7e4-04509ea2d417": {"doc_hash": "a951c0e5eeb8792408f3eada7c0af11b0081305d8e235bb59e766863fb1cca81", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "3ba692bc-3813-4b18-a302-7a00e6afe95c": {"doc_hash": "aba62d6d4c42b147222443368a6b303ae58371b39aa4b317edf26f1c6228015c", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "fea4d7ff-511f-4641-9d33-461b5730e900": {"doc_hash": "a79d56ce22844a9588456add5ea9f8ef520089e5011337f5ec9e3374e6a3370e", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "3e83b2f7-7daa-40a8-9223-45fa41c10839": {"doc_hash": "729603d17013c2c645562541bf1518b140f525d5ea39710ee0fe9154beaebf8a", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "f4399db6-a47c-4cea-a440-922f033f1af7": {"doc_hash": "07e2133812783521e66132e66a4831e7c791c90f5d3c52ce8158c3898d195a72", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "3ad83a4d-9302-46a9-bb05-2eb8de9cc1f9": {"doc_hash": "ff4420e9e736d4269aa35373fb85996c4c3d0a124074384ccad9162d6e3b1d24", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "b978f671-5bfc-4a6a-9282-a2ddc6182ddc": {"doc_hash": "be15ba65f21b7e9db8ece46c4f2b9a422f7d809e5dfb7f0c66164c4820eab72e", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "3f90e5b7-9787-466d-b0bb-9554681042d7": {"doc_hash": "2206b78fdbaa7239dc3eddabb91c5f7ba86360b31b42e9139b0704d6297beba1", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "59f5ffca-3d64-4a44-a815-06518885e511": {"doc_hash": "22e97c652c740d48e0c822146d7f22048c704a8bdf05c4aeb2892ae3e1944945", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "ba839fba-4a0a-4066-b8cc-3ec3a2978c4c": {"doc_hash": "a14e3a8add156207af81aace70943d11b32bd51fa5cf579b8cc5402176d955d5", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "759ba640-52bb-42c9-9cbd-dbf861429fa2": {"doc_hash": "aad5e6a5ad1b55dba8d1f37a6997f3e47618335d921f6c6ced251362f66c2251", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "b98eb483-8ea9-4b8a-bf9e-0bb749c82c71": {"doc_hash": "ac11925238a0422e01ccd24d60e3a54db8952ae51712d18cbe54fd172acce595", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "e2e58768-c348-4204-aff4-ef32742dabd6": {"doc_hash": "4a5eca463a22cbe3f6e71337c5aeb3084e5544251ce52337eed23fd75eacf507", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "068a78b9-0687-4fc0-9bce-2bd9475fe924": {"doc_hash": "3c803b3a9657784383a4b1f35a13250f461eb4d08101a4428fae9f99cae3841d", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "ecf1bb95-6f1d-409a-895e-135e4289378b": {"doc_hash": "b0e2e6a03046c65dc7e567b72918aa4ec15290d16220b723696b1c3c9afa679c", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "a57cabea-c208-4f58-942d-5248b2a299d3": {"doc_hash": "b8e1dce9c29aa20ba5c5fa7d399eaa5d87d29029fe15bac51e53e40646ea7e3b", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "1494c681-7f4f-477a-ad81-67b098c8d9ed": {"doc_hash": "5a31d612c08857b6638415274220b04cc63a0b5b123a9b8a29cf9ed297ab21cc", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "96616c9b-01d5-4ff9-9ff4-1ae610026c96": {"doc_hash": "0f896b7876b8e72b88a0283ebfef0f3a22b4a9e96dcfc86ded0198f8d89e9772", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "e432d2b6-b21f-4aa9-abaf-d2288d7abc36": {"doc_hash": "dbd79109f98298869827dee6f71279fad1833ba6e905e2ca19ddb41243225361", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "5277bff5-cd91-4332-8010-bac270ecd528": {"doc_hash": "01ba1b606df17b5703028c140291699bb223ee284e179cec42d1e49ea4f3999c", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "ecd35d39-adab-4256-b6f0-cb5e3b94ecc9": {"doc_hash": "049ab626c839305fa8796dc58072587b253a3548a0ed00d7e7661034ff551bfa", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "7bca798f-b60e-40d0-9d65-9e0b8942584e": {"doc_hash": "688cc94dd1ae46ded3239bc4650bc58788c99ad8941f88e56e9a868be96f0966", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "f6251cc8-4e04-469a-8d23-45775b22a0b5": {"doc_hash": "4f6cffdedf378908fa5ba43e071caf30c36f77f92562dcb866a64d47b708882b", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "d21b42da-f289-403a-84a7-3d8e2858991f": {"doc_hash": "4d47eb36cb73bd8f78bc3b1b65e024c102205fdd004a143142ed50d4d9b40a48", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "0fbc1517-7e8a-4363-b0e5-be12b94a2f3f": {"doc_hash": "5ccfe058a4b4e2e9c955057c89da095b7a9ac829550141af2e08387517a76946", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "39726474-c9c5-4236-aaac-2b7f9b99ffd4": {"doc_hash": "fcd713d2ad335a9584427c226653af1cf241c642194cc6c04cacd14c3d599c2d", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "3da81aa2-396d-49e3-a76f-023e8732b3aa": {"doc_hash": "1b5ff0d8efe5e1df815f97659eb4efcec28ae91a34943fa9441b9b08452cd701", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "ba96411f-011b-4f02-b308-a2943a74b682": {"doc_hash": "35c3a5414996f8094e959fc913407d3c364e9b0a4f3146edbd75032276937a7e", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "aad4e1a9-8e51-4349-8a25-d042af138f70": {"doc_hash": "d88fbad890b827bb64c9546f92bc69c7f91ad30e5288aa79bae053939bb176dc", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "c3e005fe-a067-4905-a364-c840ef64cb21": {"doc_hash": "0c87d300354d99b8243a23ee6e09c0fc11dbf823ce947bd5971375656ad69f1d", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "6bdabac3-e735-49e4-950a-6adacc70ae05": {"doc_hash": "29b245a6c3968ed123dd5e8718c8adf397286a110859379c635627317aa7f930", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "d338f7d0-d3dd-4df4-9f00-817a35c1d016": {"doc_hash": "fd35bac926de554ebabf74d7e589ea8a9382aaf930cb898471474ed6c833f276", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "50021089-d5d5-40e1-ba9b-09cde730be6e": {"doc_hash": "412f1f5b5293e1785ed1400a8ea0185e738eb962a34fa3f5c4f85a54fcdea10e", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "48073fb7-a64e-495f-9a59-81c0922ca5cd": {"doc_hash": "ff629dd8999813768d116a62e75e2b907338fab49c66ab71ae4b6e5a63236e5a", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "21f97cf2-dc9e-4a78-89d4-b1a4fbc2b9a7": {"doc_hash": "c7fdbba57d600df3e9e1ee3e0f64b201800a9fd98bacb5695b2492e71d129d24", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "97e006e4-ad29-4a81-81c1-0022e3b1d0b6": {"doc_hash": "a39775f684e478d90f05e56c87fb3a81425c5d2fe531270c504668adb8fae3cd", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "d3d89345-0272-4cfa-a730-6ae213e8bba0": {"doc_hash": "974ac15747125893509df5209c691ae563601433ed33dfaccb99a1955fd84f46", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "f3edff15-3144-4848-a9a8-a212535b00b2": {"doc_hash": "e999834d09e900f57cb338abff747bcc9311241ee837149c35034235699c86f2", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "7913244a-59bb-445b-9b4e-49bb2a510bb0": {"doc_hash": "e996aa71558f8df96b7fea3a0dcc7a89d705a7a1d42e66c158ae296a557e6f7c", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "9500dedb-c509-4ef6-a6c2-ecdb87b90418": {"doc_hash": "c1a1734d714d3691ba323b3b4a4a4b5a8314c6cae2b2802fd90fe7d0dadff60f", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "5b4af56d-fcfa-48a3-a913-9a74ea0f02d4": {"doc_hash": "49d00b2d2c22f0bfed1f4c2a7fe9d843255d383a0430ad534822365eb6bb9103", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "91a41264-127f-4137-8838-c835cc214e8a": {"doc_hash": "c26fccdb2dfcc3b96d790bafd22ede5cf81839b4a1736d0ca81ad2e89e43bedb", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "7d12991b-63ff-43ef-bf87-d576ee5e7338": {"doc_hash": "4472693b86cb15acfcd57792a02917777262710239f444fd72662ecf79c05c67", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "e16ae4c9-d2fd-4386-8e04-76a212ecc03b": {"doc_hash": "3d5fabae0521aa3ecfca302e03f294739b96fdd132e787255900bd9233c1b0a8", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "07db8619-b00d-4145-ae79-4fc681f6c7e6": {"doc_hash": "fb7801c5a84b9cebb669269cef166e7a48de888b3c82a67cd365a696c1eeab15", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "c66bcd6f-fef0-443b-9cb0-4bfc65e06cfe": {"doc_hash": "1ed9a0ae0201127ee5661c6b90da6f7a1f51beafd5dd48a31c0720a323fae75d", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "9c6fabe2-6e91-4689-a8f9-3491fd558f57": {"doc_hash": "0284adbda3c2797751910082c69b45ac93644268a73e81b7256581c15b0d5e63", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "b04779c2-057f-464f-9fee-a6dd8622a463": {"doc_hash": "61552d382532bcb58207cd545e3dc0ece70afe92129a49139d619db095b503aa", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "13c76117-d693-4dd0-9861-4fa052101dbd": {"doc_hash": "f6e8d2c3b7ecc6d67a059335649038e4a409ebcd34c84c3228c7abe1e0be64cb", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "7efe7388-0367-48f3-9dde-80d85c790759": {"doc_hash": "84b3ca338e592635f6a8136a1f006215319bf7b0b68e4498241ca1feca2001ab", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "5187a7d7-5808-4bb0-892e-23dd1c5b8cfb": {"doc_hash": "7a1ae2bc710f37c2eca70f11f1cd2c2c2a234b65fb601927eb69e9e190dbb0f2", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "c4e824e1-6f71-4cc1-87a0-3e036e77578f": {"doc_hash": "b810dad63da24e26c2031a909b3027c1bf23f47b1572af01ada702aa4513a545", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "27c93f14-917f-4377-8b8c-51677e83365e": {"doc_hash": "97afabba6b13fa3c8d3f6e3280b53e9eb26abb8ecf453ce42415bb6c24dd838e", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "a23ed0a8-b42b-48dd-ac76-3c39458bd03c": {"doc_hash": "59feffdbda4976a78983e4dd5a61d132c761522fc2c6a7b365287de41a199b3e", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "7d5b932d-0ca2-46c6-8364-31fe5582761f": {"doc_hash": "ca0929e764a557c81dfa367642b878a033367f08b35a4dd53087e05e5c2c18a7", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "e12c223b-4cdd-4a9f-aaa8-a9008b828a26": {"doc_hash": "69a61ad7cf923579a6e8b6d18b75015a3f962f0c25b2be24d3d872b1ccadef74", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "001975da-2718-42c1-9b0b-8ae17b889054": {"doc_hash": "1c45d14d5f4bea28af317e2b859e2d3f279e4f925c6ff7c8cfbcb5e380a2dfab", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "a3205dfe-7210-4ea0-838d-133328dbe514": {"doc_hash": "da6b873b4791bd2a5dbe2141bf4c2ecb9465de9795875453eac72c2f86064b40", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "10cf48ea-2457-4d77-8cce-9e3b53f11f3c": {"doc_hash": "d227e62bf4ffa3d9080dd133e80ecc7c3b077bb38dcef38a2f38851b6a5254d0", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "044cff0a-7edf-4d92-8a53-8758a0d3a916": {"doc_hash": "fabb22b8d3750a7cec9f1cea60031567bd2f7f12e1481766431ac7d338b7462d", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "bb75b3a8-52ec-45d4-bc62-60dcac50675c": {"doc_hash": "53b9d3d39c3832fa14bfa317f0d2aa3122d0de047e4802891ba99db8a419769f", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "bca3d0e9-d831-4587-afd3-c3f19ef5b45a": {"doc_hash": "9319b4aedd84fb0a97ee8a8dbe46b9d62d7a70309636935ba9d564abdca67c80", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "1dfe92fb-7616-4c64-af12-dec59063b65d": {"doc_hash": "4b6531d5c754639c90ed56c2acbcdffe07cd63514841358fd0e27b0eec3df570", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "3b179406-fe67-46a7-9f9c-4f3f18645459": {"doc_hash": "3e1a36a0b31280bb7f26000f7b012499a32143214525cf01d4ace9d4cd4a77da", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "e3e4d275-1ee5-4eb9-8abd-677c38434ff6": {"doc_hash": "1346de272c6f89a02cbddbf616823b15db75e87fbb23982bf37de3959a7987de", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "ad85ba7a-1a95-4e04-8f20-e8a1e89dc3b5": {"doc_hash": "82c8df618b1d6cdd631627826e7df0195f1693003c84a6960da014f0b9385a84", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "fb605d04-fa58-4265-b257-f963c60a8d1c": {"doc_hash": "b516966689a235ea67ac85a9c80c9a9e4b7c30fab9b01bb317a3ba534660e924", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "bfc076cb-15b4-4b9b-879a-c796d184de57": {"doc_hash": "b1653c524bb6cef660592046fe9ffdbb13ebe9ebc448e19342923a21bc28e223", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "4c6d9c71-3667-4a17-929d-651f27dbcea2": {"doc_hash": "4eba084f2e29ab156dab414f965b82d7ade080f653f5093dcebb38cae18e8796", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "d6232ab8-e940-4d0b-9e7f-fdfbd5220143": {"doc_hash": "bd68b2293d3cb41bf6bafc975632c233ff6d228f7dc5a29fded42281e426453f", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "7d00d865-956d-4262-8f2e-5e1126c9c2c5": {"doc_hash": "59dc44ea2a2218dd69eee0683cddd845f4c3c021561d5f2aaa87222401524ad6", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "eaf7c1c2-d799-40fb-b1ab-a0cad345c879": {"doc_hash": "5e18c6dfc327ac846be86b4fe1db79acdeaf5f3be61c85fc4cc9a3d09577bd45", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "611feeb1-9be4-46f0-a5f9-62d3585f5eac": {"doc_hash": "cfab33bc77f6a3c7cbca75245ce9ddafaf70f9c1a0b20c5bd515a78c8eecc3e6", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "64e16ed0-f4f8-437f-8d3a-01b37dc0c9e4": {"doc_hash": "8a880c87fc55fb269bfae26dc763a7766ecc70473f3e665c1320e181cec9c1f0", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "d27692c3-6ca1-43dd-8a99-9736a73521bc": {"doc_hash": "0796123d1981f666d43f0241b8f5ac2d7adc8460bd95f6a30ca4c3ea7e37f6db", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "bbdc7825-52b7-48a4-a73d-73ea71760fef": {"doc_hash": "c88696ea4cad3e8f2430e988b4c173188008addb3f7efb1128ba2ea1db3046fd", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "5e7c763e-5575-4a0c-812f-5f9a2cbcada8": {"doc_hash": "a615c1424ac86f033559959be293bb73e35444d73ebd67e10d4c52cf6defdbcc", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "7ea37740-e5b1-4974-8537-3a014da89220": {"doc_hash": "02c194ed2297b14e2e66f85e9e5f5c42a65cce2f9dd0e73b4cba4298f3315ea1", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "8e29f86b-31b0-4ddb-8603-3e32c3b88d5f": {"doc_hash": "25ebd3946cad85a47815a0475bc6583ce9538db8fcd792904c80f74c7743811d", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "8d438fb9-79b6-4581-a3a8-bb5801be8c34": {"doc_hash": "efad02d0f21e03d9784fcda7904787ad8f70ecc7ce964a39880b92a1d87100b5", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}, "42cf6597-8ccd-44a4-b2ca-d17b7f4138c2": {"doc_hash": "6c4aace1c761208d9689474f66e3f35b625d26e5c46bd010221506eb4598af8d", "ref_doc_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac"}}, "docstore/data": {"44357fd8-118a-4732-b882-3c13d7546c08": {"__data__": {"id_": "44357fd8-118a-4732-b882-3c13d7546c08", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "3": {"node_id": "236a6d6d-20a6-4757-badc-f866a9135339", "node_type": null, "metadata": {}, "hash": "38c34a64abb0ecf401e490f7584b640d8741af50e5d38c5a5226f60a0ac296e1"}}, "hash": "02841feaaf7fb8da317c7df57cae161d5a378b6d8540ebfa79e2b2380a2d9cea", "text": "\"id\": 1,\n\"page_link\": \"https://docs.plural.sh/adding-new-application/getting-started-with-runbooks\",\n\"title\": \" Getting Started With Runbooks\",\n\"text\": \"# Getting Started With Runbooks\\n\\nWhat are Plural runbooks? How do I use and create them?\\n\\n## Articles in this section:\\n\\nXML Runbooks  YAML Runbooks\\n\\n[XML Runbooks](/adding-new-application/getting-started-with-runbooks/runbook-xml)\\n\\n[YAML Runbooks](/adding-new-application/getting-started-with-runbooks/runbook-yaml)\\n\\nPlural Runbooks are meant to be installed alongside your open source applications and serve as interactive tutorials for how to perform common maintenance tasks.\\n\\nPlural comes with a library of runbooks for each application; you are also free to create your own.\\n\\nYou can create a runbook just for your own use in your Plural installation, or you can choose to publish the runbook and make it available for other Plural users.\\n\\n[here](/adding-new-application/getting-started-with-runbooks/runbook-yaml)\\n\\n[here](/adding-new-application/getting-started-with-runbooks/runbook-xml)\\n\\nYou can access the runbooks through the Plural admin console; i.e. you must first install the Plural admin console in order to use the runbooks.\\n\\n[install the Plural admin console](/getting-started/admin-console)\\n\\n#### \\n\\n[](/adding-new-application/getting-started-with-runbooks#_)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/adding-new-application/getting-started-with-runbooks/index.md)\",\n\"source_links\": []\n\"id\": 2,\n\"page_link\": \"https://docs.plural.sh/adding-new-application/getting-started-with-runbooks/runbook-xml\",\n\"title\": \" XML Runbooks\",\n\"text\": \"# XML Runbooks\\n\\nCreating a Plural runbook from XML.\\n\\n#### XML Tag Definitions\\n\\n[](/adding-new-application/getting-started-with-runbooks/runbook-xml#xml-tag-definitions)\\n\\nPlural runbooks are written in XML. XML doesn\\u2019t have a predefined markup language, like HTML does. Instead, XML allows users to create their own markup symbols to describe content, making an unlimited and self-defining symbol set.\\n\\nWe have defined the following xml attributes in an Elixir file that may be used in the creation of your own runbooks and help standardize their layout.\\n\\n```\\ndefmodule Console.Runbooks.Display do\\n  use Console.Runbooks.Display.Base\\n  alias Console.Runbooks.Display.{Xml}\\n\\n  schema do\\n    component \\\"box\\\" do\\n      attributes ~w(direction width height pad margin align justify gap fill color border borderSide borderSize)\\n      parents ~w(root box)\\n    end\\n\\n    component \\\"text\\\" do\\n      attributes ~w(size weight value color)\\n      parents ~w(box text root link)\\n    end\\n\\n    component \\\"markdown\\\" do\\n      attributes ~w(size weight value)\\n      parents ~w(box text root)\\n    end\\n\\n    component \\\"button\\\" do\\n      attributes ~w(primary label href target action headline)\\n      parents ~w(box)\\n    end\\n\\n    component \\\"input\\\" do\\n      attributes ~w(placeholder name label datatype)\\n      parents ~w(box)\\n    end\\n\\n    component \\\"timeseries\\\" do\\n      attributes", "start_char_idx": 0, "end_char_idx": 3084, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "236a6d6d-20a6-4757-badc-f866a9135339": {"__data__": {"id_": "236a6d6d-20a6-4757-badc-f866a9135339", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "44357fd8-118a-4732-b882-3c13d7546c08", "node_type": null, "metadata": {}, "hash": "02841feaaf7fb8da317c7df57cae161d5a378b6d8540ebfa79e2b2380a2d9cea"}, "3": {"node_id": "d64da92a-17a3-4023-853b-7c74dd976d87", "node_type": null, "metadata": {}, "hash": "095bca059287b5cd8597c439cbe1c7ea5ae8b4c1f2238f1e35dbb7b4fdb8d09b"}}, "hash": "38c34a64abb0ecf401e490f7584b640d8741af50e5d38c5a5226f60a0ac296e1", "text": "   component \\\"timeseries\\\" do\\n      attributes ~w(label datasource)\\n      parents ~w(box)\\n    end\\n\\n    component \\\"valueFrom\\\" do\\n      attributes ~w(datasource path doc)\\n      parents ~w(input text)\\n    end\\n\\n    component \\\"image\\\" do\\n      attributes ~w(width height url)\\n      parents ~w(box link)\\n    end\\n\\n    component \\\"video\\\" do\\n      attributes ~w(width height url autoPlay loop)\\n      parents ~w(box link)\\n    end\\n\\n    component \\\"link\\\" do\\n      attributes ~w(href target value color weight)\\n      parents ~w(text box)\\n    end\\n\\n    component \\\"table\\\" do\\n      attributes ~w(name width height datasource path)\\n      parents ~w(box)\\n    end\\n\\n    component \\\"tableColumn\\\" do\\n      attributes ~w(path header width)\\n      parents ~w(table)\\n    end\\n  end\\n\\n  def parse_doc(xml) do\\n    with {:ok, parsed} <- Xml.from_xml(xml) do\\n      case validate(parsed) do\\n        :pass -> {:ok, parsed}\\n        {:fail, error} -> {:error, error}\\n      end\\n    end\\n  end\\nend\\n```\\n\\nMost of these attributes, like box and input are basically grommet React components. However, we would like to call out a few custom attributes that interact with other data from the runbook. They each refer to a datasource and then maybe also a way to access a value at that datasource.\\n\\ntimeseriesdatasourcevalueFromdatasourcedocpath\\n\\ndatasource\\n\\ndatasourcedocpath\\n\\nHere is an example Runbook XML template composed of these attributes.\\n\\n```\\n<root gap='medium'>\\n  <box pad='small' gap='medium' direction='row' align='center'>\\n    <button label='Scale' action='scale' primary='true' headline='true' />\\n    <box direction='row' align='center' gap='small'>\\n      <box gap='small' align='center'>\\n        <timeseries datasource=\\\"cpu\\\" label=\\\"CPU Usage\\\" />\\n        <text size='small'>You should set a reservation to\\n          roughly correspond to 30% utilization</text>\\n      </box>\\n      <box gap='small' align='center'>\\n        <timeseries datasource=\\\"memory\\\" label=\\\"Memory Usage\\\" />\\n        <text size='small'>You should set a reservation to\\n          roughly correspond to 60% utilization</text>\\n      </box>\\n    </box>\\n    <box gap='small'>\\n      <box gap='xsmall'>\\n        <input placeholder=\\\"250m\\\" label='CPU Request' name='cpu'>\\n          <valueFrom\\n            datasource=\\\"statefulset\\\"\\n            doc=\\\"kubernetes.raw\\\"\\n            path=\\\"spec.template.spec.containers[0].resources.requests.cpu\\\" />\\n        </input>\\n       ", "start_char_idx": 3048, "end_char_idx": 5543, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d64da92a-17a3-4023-853b-7c74dd976d87": {"__data__": {"id_": "d64da92a-17a3-4023-853b-7c74dd976d87", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "236a6d6d-20a6-4757-badc-f866a9135339", "node_type": null, "metadata": {}, "hash": "38c34a64abb0ecf401e490f7584b640d8741af50e5d38c5a5226f60a0ac296e1"}, "3": {"node_id": "71d46738-467b-4e87-b021-066c8046e7ae", "node_type": null, "metadata": {}, "hash": "23066c52656869117fc57712550804359f369abfaab2dd99afd5f04b1bfe3aaa"}}, "hash": "095bca059287b5cd8597c439cbe1c7ea5ae8b4c1f2238f1e35dbb7b4fdb8d09b", "text": "       </input>\\n        <input placeholder=\\\"1Gi\\\" label='Memory Request' name='memory'>\\n          <valueFrom\\n            datasource=\\\"statefulset\\\"\\n            doc=\\\"kubernetes.raw\\\"\\n            path=\\\"spec.template.spec.containers[0].resources.requests.memory\\\" />\\n        </input>\\n      </box>\\n    </box>\\n  </box>\\n  <box pad='small' gap='medium' direction='row' align='center'>\\n    <box direction='row' width='70%' align='center'>\\n      <text size='small'>You can also add more replicas to provide failover in case of outages, or optionally remove them to save cost</text>\\n    </box>\\n    <box direction='row' gap='small' width='30%' align='center'>\\n      <input datatype='int' placeholder=\\\"1\\\" label='Replicas' name='replicas'>\\n        <valueFrom\\n          datasource=\\\"statefulset\\\"\\n          doc=\\\"kubernetes.raw\\\"\\n          path=\\\"spec.replicas\\\" />\\n      </input>\\n    </box>\\n  </box>\\n  <box width='100%' gap='small'>\\n    <text size='small'>Be sure to scale your rabbitmq nodes within your nodes capacities, listed here:</text>\\n    <table width='100%' datasource='nodes' path='nodes'>\\n      <tableColumn path='metadata.name' header='name' width='33%' />\\n      <tableColumn path='status.capacity.cpu' header='cpu' width='33%' />\\n      <tableColumn path='status.capacity.memory' header='memory' width='33%' />\\n    </table>\\n  </box>\\n</root>\\n```\\n\\nThis XML file is referred to in the runbooks.yaml file, where you will also pass along the datasources that will hydrate this template.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/adding-new-application/getting-started-with-runbooks/runbook-xml.md)\",\n\"source_links\": []\n\"id\": 3,\n\"page_link\": \"https://docs.plural.sh/adding-new-application/getting-started-with-runbooks/runbook-yaml\",\n\"title\": \" YAML Runbooks\",\n\"text\": \"# YAML Runbooks\\n\\nCreating a Plural runbook from YAML.\\n\\n```\\napiVersion: platform.plural.sh/v1alpha1\\nkind: Runbook\\nmetadata:\\n  name: scaling-manual\\n  labels:\\n    platform.plural.sh/pinned: 'true'\\n{{ include \\\"ghost.labels\\\" . | indent 4 }}\\nspec:\\n  name: Ghost Scaling\\n  description: overview of how to accurately scale ghost deployment\\n  display: |-\\n{{ .Files.Get \\\"runbooks/scaling.xml\\\" | indent 4 }}\\n  datasources:\\n  - name: cpu\\n    type: prometheus\\n    prometheus:\\n      format: cpu\\n      legend: $pod\\n      query: sum(rate(container_cpu_usage_seconds_total{namespace=\\\"{{ .Release.Namespace }}\\\",pod=~\\\"ghost-[0-9]+\\\"}[5m])) by (pod)\\n  - name: memory\\n    type: prometheus\\n   ", "start_char_idx": 5571, "end_char_idx": 8113, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "71d46738-467b-4e87-b021-066c8046e7ae": {"__data__": {"id_": "71d46738-467b-4e87-b021-066c8046e7ae", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "d64da92a-17a3-4023-853b-7c74dd976d87", "node_type": null, "metadata": {}, "hash": "095bca059287b5cd8597c439cbe1c7ea5ae8b4c1f2238f1e35dbb7b4fdb8d09b"}, "3": {"node_id": "f6568271-5f19-4d66-9bd0-c7e777945ef0", "node_type": null, "metadata": {}, "hash": "bfafcf6d6b9c701ac00fb54324e4804bc68187427b4f0ce802a3f84bb7ba3390"}}, "hash": "23066c52656869117fc57712550804359f369abfaab2dd99afd5f04b1bfe3aaa", "text": " - name: memory\\n    type: prometheus\\n    prometheus:\\n      format: memory\\n      legend: $pod\\n      query: sum(container_memory_working_set_bytes{namespace=\\\"{{ .Release.Namespace }}\\\",pod=~\\\"ghost-[0-9]+\\\"}) by (pod)\\n  - name: statefulset\\n    type: kubernetes\\n    kubernetes:\\n      resource: statefulset\\n      name: ghost\\n  - name: nodes\\n    type: nodes\\n  actions:\\n  - name: scale\\n    action: config\\n    redirectTo: '/'\\n    configuration:\\n      updates:\\n      - path:\\n        - ghost\\n        - resources\\n        - requests\\n        - cpu\\n        valueFrom: cpu\\n      - path:\\n        - ghost\\n        - resources\\n        - requests\\n        - memory\\n        valueFrom: memory\\n```\\n\\nEach datasource has a type. At the moment, the only types Plural supports are prometheus, kubernetes, and nodes. Each type has a spec that's specific to the type.\\n\\nprometheus spec:\\n\\n```\\nprometheus:\\n  format:\\n  legend:\\n  query:\\n```\\n\\nkubernetes spec:\\n\\n```\\nkubernetes:\\n  resource: # the kind of Kubernetes resource, i.e. statefulset\\n  name: # the name of the Kubernetes resource, i.e. ghost\\n```\\n\\nnodes spec:\\n\\n```\\n# No spec needed, this just fetches all the nodes in the Kubernetes cluster.\\n```\\n\\nAdditionally, in runbooks.yaml, you can define a specific action that the runbook can take based off of context from what the user input has given it.\\n\\nFor example, in the file above, we've defined an action that allows the runbook to update the home values file for that installation. It's done by yaml path, which means it will recursively update ghost.resources.request.cpu.\\n\\n[home values file](https://github.com/pluralsh/plural-artifacts/blob/760ad90c55d42a8f3081d6e5082c8a8e508ef1b4/ghost/helm/ghost/values.yaml)\\n\\nThis will update the yaml file, save it back, issue a commit, and create a build in the console to actually apply the change.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/adding-new-application/getting-started-with-runbooks/runbook-yaml.md)\",\n\"source_links\": []\n\"id\": 4,\n\"page_link\": \"https://docs.plural.sh/adding-new-application/guide\",\n\"title\": \" Guide\",\n\"text\": \"# Guide\\n\\nThis guide is for anyone who wants to make an open-source application available on the Plural marketplace.\\n\\nTo add your own application, you'll need the Helm chart for your application and corresponding Terraform.\\n\\n## 1. Create a new directory in plural-artifacts\\n\\n[](/adding-new-application/guide#_1-create-a-new-directory-in-plural-artifacts)\\n\\nClone the plural-artifacts repository\\n\\n[plural-artifacts](https://github.com/pluralsh/plural-artifacts)\\n\\n```\\ngit clone https://github.com/pluralsh/plural-artifacts.git\\n```\\n\\nFor this getting started guide, let's pretend that we are onboarding", "start_char_idx": 8093, "end_char_idx": 10860, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f6568271-5f19-4d66-9bd0-c7e777945ef0": {"__data__": {"id_": "f6568271-5f19-4d66-9bd0-c7e777945ef0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "71d46738-467b-4e87-b021-066c8046e7ae", "node_type": null, "metadata": {}, "hash": "23066c52656869117fc57712550804359f369abfaab2dd99afd5f04b1bfe3aaa"}, "3": {"node_id": "124e091c-ccde-4ef2-aaf7-34c04982184c", "node_type": null, "metadata": {}, "hash": "8e192a1d5e36ed13b49e5c870f3d2b76bcd33d58dee557f37dfdb39baabdcd6f"}}, "hash": "bfafcf6d6b9c701ac00fb54324e4804bc68187427b4f0ce802a3f84bb7ba3390", "text": "this getting started guide, let's pretend that we are onboarding Hasura. We have a useful make target to scaffold some of the necessary stubs for integrating with Plural.\\n\\n```\\nplural create\\n```\\n\\nThe repository structure after running the make command should look something like this:\\n\\n```\\nhasura/\\n    Pluralfile\\n    helm\\n    plural\\n    repository.yaml\\n    terraform\\n```\\n\\nIn the steps below we will go through and fill out the stubs.\\n\\n## 2. Add your Helm chart\\n\\n[](/adding-new-application/guide#_2-add-your-helm-chart)\\n\\nThis section assumes familiarity with helm, the Kubernetes package manager. If you have not worked with helm before, it's strongly recommended that you read through the helm docs to understand core helm concepts, particularly helm templates and helm template values.\\n\\n[helm templates](https://helm.sh/docs/chart_template_guide/getting_started/)\\n\\n### Getting Started with Helm\\n\\n[](/adding-new-application/guide#getting-started-with-helm)\\n\\nFrom the root of your newly created hasura directory, navigate to the helm chart.\\n\\n```\\ncd helm/hasura\\n```\\n\\nA helm chart is organized as a collection of files inside of a directory:\\n\\n```\\nhasura/\\n  Chart.yaml          # A YAML file containing information about the chart\\n  values.yaml         # The default configuration values for this chart\\n  values.schema.json  # OPTIONAL: A JSON Schema for imposing a structure on the values.yaml file\\n  charts/             # A directory containing any charts upon which this chart depends.\\n  templates/          # A directory of templates that, when combined with values,\\n                      # will generate valid Kubernetes manifest files.\\n```\\n\\nThe Chart.yaml file contains a description of the chart. You can access it from within a template.\\n\\nThe templates directory is for template files. When Helm evaluates a chart, it will send all of the files in the templates directory through the template rendering engine. It then collects the results of those templates and sends them on to Kubernetes.\\n\\nThe values.yaml file is also important to templates. This file contains the default values for a chart. These values may be overridden by users during helm install or helm upgrade.\\n\\nYou should also see a deps.yaml file. This is a Plural file used to track dependencies and sequence order of installations and upgrades.\\n\\n### Fill out Chart.yaml\\n\\n[](/adding-new-application/guide#fill-out-chart-yaml)\\n\\nOpen up the Chart.yaml file.\\n\\nChart.yaml is a yaml file containing information about the chart. You can refer to the helm documentation for a comprehensive list of fields in the chart.\\n\\n[a comprehensive list of fields](https://helm.sh/docs/topics/charts/#the-chartyaml-file)\\n\\nThe yaml is largely self-documenting. The field to pay attention to is the field at the end, dependencies. If your open source project has an existing helm chart (for example on ArtifactHub), this is where you'll want to link it.\\n\\n```\\ndependencies:\\n  - name: hasura\\n    version: 1.1.6\\n    repository: https://charts.platy.plus\\n```\\n\\n### Fill out the templates directory\\n\\n[](/adding-new-application/guide#fill-out-the-templates-directory)\\n\\nNext, let's fill out the templates directory. Recall that the", "start_char_idx": 10837, "end_char_idx": 14088, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "124e091c-ccde-4ef2-aaf7-34c04982184c": {"__data__": {"id_": "124e091c-ccde-4ef2-aaf7-34c04982184c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "f6568271-5f19-4d66-9bd0-c7e777945ef0", "node_type": null, "metadata": {}, "hash": "bfafcf6d6b9c701ac00fb54324e4804bc68187427b4f0ce802a3f84bb7ba3390"}, "3": {"node_id": "70484b64-d9ca-461f-95f3-f304afa1cde0", "node_type": null, "metadata": {}, "hash": "118c750b63e194d86dc1348616640c659dc2498e3b5d1ec2ff95d3bac3f9b665"}}, "hash": "8e192a1d5e36ed13b49e5c870f3d2b76bcd33d58dee557f37dfdb39baabdcd6f", "text": "let's fill out the templates directory. Recall that the templates directory is for template files. When Helm evaluates a chart, it will send all of the files in the templates directory through the template rendering engine. It then collects the results of those templates and sends them on to Kubernetes.\\n\\nThe Plural platform includes a number of custom resources that you might find useful to fully productionize your application and can copy and paste over for your own use:\\n\\ndashboard.yaml -- creates dashboards in the console that reference Prometheus metricsrunbook.yaml -- creates interactive tutorials in the console that show how to perform common maintenance tasks. For more documentation on runbooks refer here.proxies.yaml -- wrappers around kubectl port-forward and kubectl proxy which allow you to get shells into running pods, databases or access private web uisconfigurationOverlay.yaml -- creates form fields to modify helm configuration within the console\\n\\n[dashboard.yaml](/adding-new-application/plural-custom-resources#dashboards.yaml)\\n\\n[runbook.yaml](/adding-new-application/getting-started-with-runbooks/runbook-yaml)\\n\\n[here](/adding-new-application/getting-started-with-runbooks)\\n\\n[proxies.yaml](/adding-new-application/plural-custom-resources#proxies-yaml)\\n\\n[configurationOverlay.yaml](/adding-new-application/plural-custom-resources#configurationoverlay-yaml)\\n\\n![Image](/assets/image%20(2).png)\\n\\nlogfilter.yaml\\n\\n### Fill out deps.yaml\\n\\n[](/adding-new-application/guide#fill-out-deps-yaml)\\n\\nThe deps.yaml file is a Plural file that is used for determining the sequence of installations and updates. It should look something like this:\\n\\n```\\napiVersion: plural.sh/v1alpha1\\nkind: Dependencies\\nmetadata:\\n  application: true\\n  description: Deploys hasura crafted for the target cloud\\nspec:\\n  dependencies:\\n    - type: helm\\n      name: bootstrap\\n      repo: bootstrap\\n      version: '>= 0.5.1'\\n    - type: helm\\n      name: ingress-nginx\\n      repo: ingress-nginx\\n      version: '>= 0.1.2'\\n    - type: helm\\n      name: postgres\\n      repo: postgres\\n      version: '>= 0.1.6'\\n    - type: terraform\\n      name: aws\\n      repo: hasura\\n      version: '>= 0.1.0'\\n      optional: true\\n    - type: terraform\\n      name: azure\\n      repo: hasura\\n      version: '>= 0.1.0'\\n      optional: true\\n    - type: terraform\\n      name: gcp\\n      repo: hasura\\n      version: '>= 0.1.0'\\n      optional: true\\n```\\n\\n## 3. Add your cloud config\\n\\n[](/adding-new-application/guide#_3-add-your-cloud-config)\\n\\nFrom the root of the hasura/ directory (not the one on helm/ directory but its parent directory), navigate to the terraform/ directory. Terraform is a tool for creating, updating, and destroying cloud infrastructure via configuration rather than a graphical user interface. If you are not familiar with it, we suggest reading through the Terraform docs. The files that are located inside this directory are responsible for creating various cloud objects --", "start_char_idx": 14097, "end_char_idx": 17120, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "70484b64-d9ca-461f-95f3-f304afa1cde0": {"__data__": {"id_": "70484b64-d9ca-461f-95f3-f304afa1cde0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "124e091c-ccde-4ef2-aaf7-34c04982184c", "node_type": null, "metadata": {}, "hash": "8e192a1d5e36ed13b49e5c870f3d2b76bcd33d58dee557f37dfdb39baabdcd6f"}, "3": {"node_id": "13f11265-e1e5-4771-8ca8-86c56c2f8b0f", "node_type": null, "metadata": {}, "hash": "068877de84a22e0283b77a3d83572bb2557d5f0362c380c30768371c2c24d720"}}, "hash": "118c750b63e194d86dc1348616640c659dc2498e3b5d1ec2ff95d3bac3f9b665", "text": "The files that are located inside this directory are responsible for creating various cloud objects -- i.e. Kubernetes namespaces, AWS IAM roles, and service accounts.\\n\\n[Terraform docs](https://www.terraform.io/language)\\n\\n```\\ncd terraform\\n```\\n\\nYou should see three folders:\\n\\n```\\nterraform\\n  aws\\n  azure\\n  gcp\\n```\\n\\nThey each have the same structure:\\n\\n```\\nterraform/aws\\n  deps.yaml\\n  main.tf\\n  terraform.tfvars\\n  variables.tf\\n```\\n\\nmain.tf will contain the main set of configuration for your Terraform module. You can also create other configuration files and organize them however it makes sense for your project. It will look something like this:\\n\\n[main.tf](https://learn.hashicorp.com/tutorials/terraform/module-create?in=terraform/modules#main-tf)\\n\\n```\\nresource \\\"kubernetes_namespace\\\" \\\"hasura\\\" {\\n  metadata {\\n    name = var.namespace\\n    labels = {\\n      \\\"app.kubernetes.io/managed-by\\\" = \\\"plural\\\"\\n      \\\"app.plural.sh/name\\\" = \\\"hasura\\\"\\n    }\\n  }\\n}\\n\\ndata \\\"aws_iam_role\\\" \\\"postgres\\\" {\\n  name = \\\"${var.cluster_name}-postgres\\\"\\n}\\n\\nresource \\\"kubernetes_service_account\\\" \\\"postgres\\\" {\\n  metadata {\\n    name      = \\\"postgres-pod\\\"\\n    namespace = var.namespace\\n\\n    annotations = {\\n      \\\"eks.amazonaws.com/role-arn\\\" = data.aws_iam_role.postgres.arn\\n    }\\n  }\\n\\n  depends_on = [\\n    kubernetes_namespace.superset\\n  ]\\n}\\n```\\n\\nvariables.tf will contain the variable definitions for your terraform module (the variables are used in main.tf\\n\\n[variables.tf](https://learn.hashicorp.com/tutorials/terraform/module-create?in=terraform/modules#variables-tf)\\n\\n## 4. Add your Plural config\\n\\n[](/adding-new-application/guide#_4-add-your-plural-config)\\n\\nFinally, let's look at how to set up the config that will go to Plural.\\n\\nFrom the root of hasura/, navigate to plural/recipes.\\n\\n```\\nplural/recipes\\n  hasura-aws.yaml\\n  hasura-azure.yaml\\n  hasura-gcp.yaml\\n```\\n\\nHere, you will specify the other Plural packages that must be installed alongside this package, as well as configuration and documentation for parameters that you will be asking users to input.\\n\\n```\\nname: hasura-aws\\ndescription: Installs hasura on an EKS cluster\\nprovider: AWS\\ndependencies: # Other Plural packages that must be installed alongside this bundle\\n  - repo: bootstrap\\n    name: aws-k8s\\n  - repo: ingress-nginx\\n    name: ingress-nginx-aws\\n  - repo: postgres\\n    name: aws-postgres\\nsections:\\n  - name: hasura\\n    items:\\n      - type: TERRAFORM\\n        name: aws\\n      - type: HELM\\n        name: hasura\\n    configuration: # Users will be asked to input values for these parameters\\n      - name: hostname\\n ", "start_char_idx": 17081, "end_char_idx": 19761, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "13f11265-e1e5-4771-8ca8-86c56c2f8b0f": {"__data__": {"id_": "13f11265-e1e5-4771-8ca8-86c56c2f8b0f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "70484b64-d9ca-461f-95f3-f304afa1cde0", "node_type": null, "metadata": {}, "hash": "118c750b63e194d86dc1348616640c659dc2498e3b5d1ec2ff95d3bac3f9b665"}, "3": {"node_id": "9d1519ce-14a4-4c25-a93b-6352bc5ececc", "node_type": null, "metadata": {}, "hash": "5b9d85485b230da690949ef85e1789fe665612335609dd597067eefe690d6590"}}, "hash": "068877de84a22e0283b77a3d83572bb2557d5f0362c380c30768371c2c24d720", "text": "values for these parameters\\n      - name: hostname\\n        documentation: Fully Qualified Domain Name to use for your hasura installation, eg hasura.topleveldomain.com if topleveldomain.com is the domain you inputed for dns_domain above.\\n        type: DOMAIN\\n```\\n\\n## 5. Testing Locally\\n\\n[](/adding-new-application/guide#_5-testing-locally)\\n\\nYou can validate your changes locally using the plural link command. You'll need to have your packages pushed to plural first, then installed in an installation repo. Once done, you can link your local version of a helm or terraform package using:\\n\\n```\\nplural link helm <app-name> --path ../path/to/helm --name <chart-name>\\n```\\n\\n## 6. Push your local changes and open a PR\\n\\n[](/adding-new-application/guide#_6-push-your-local-changes-and-open-a-pr)\\n\\nAssuming that you have been working on a branch add-hasura you should now commit your changes and open up a PR on Github against the pluralsh/plural-artifacts repository.\\n\\n[pluralsh/plural-artifacts](https://github.com/pluralsh/plural-artifacts/)\\n\\n```\\ngit add .\\ngit commit -m \\\"Integrate hasura changes\\\"\\ngit push\\n```\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/adding-new-application/guide.md)\",\n\"source_links\": []\n\"id\": 5,\n\"page_link\": \"https://docs.plural.sh/adding-new-application\",\n\"title\": \" Add an Application\",\n\"text\": \"# Add an Application\\n\\nIs something missing from the Plural marketplace? Are you a vendor who wants to add your solution? We'd love for you to onboard your application! This guide outlines the process.\\n\\n## Articles in this section:\\n\\nGuidePlural Custom ResourcesModule Library\\n\\n[Guide](/adding-new-application/guide)\\n\\n[Plural Custom Resources](/adding-new-application/plural-custom-resources)\\n\\n[Module Library](/adding-new-application/module-library)\\n\\nThe two main functionalities that make Plural work are dependency tracking between DevOps tools (Helm and Terraform) and templating.\\n\\nWhen a user sets up a new Plural workspace in a git repository a workspace.yaml file is created that stores global values for that cluster such as the cloud account and region, the cluster and VPC name and what subdomain all the applications will be hosted under. Next, the user can install an application using the plural bundle <app_name> <bundle> CLI command. The CLI will then prompt the user for for inputs needed to setup that application, along with any dependencies of the application. These inputs are saved in the context.yaml file.\\n\\nNext, the user runs plural build which will create a wrapper Helm chart and Terraform module. The wrapper Helm chart and Terraform module depend on the application Helm chart(s) and Terraform module(s) it gets from the Plural API, which the CLI downloads. The CLI will then generate the values.yaml for the wrapper helm chart and main.tf for the wrapper Terraform module using the values saved in the context.yaml using its templating engine.\\n\\n## Plural application artifacts\\n\\n[](/adding-new-application#plural-application-artifacts)\\n\\nAs mentioned above, the Plural CLI creates a wrapper Helm chart and Terraform module for each installed application and inputs the user defined values for that installation. Some extra files are necessary in Helm charts and Terraform modules for Plural to be able to understand their dependencies and run them through its templating engine. Namely, a deps.yaml file which lists the dependencies of the Helm chart or Terraform module, and the values.yaml.tpl and", "start_char_idx": 19807, "end_char_idx": 23336, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9d1519ce-14a4-4c25-a93b-6352bc5ececc": {"__data__": {"id_": "9d1519ce-14a4-4c25-a93b-6352bc5ececc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "13f11265-e1e5-4771-8ca8-86c56c2f8b0f", "node_type": null, "metadata": {}, "hash": "068877de84a22e0283b77a3d83572bb2557d5f0362c380c30768371c2c24d720"}, "3": {"node_id": "18aec66b-134d-4d9f-a7c4-15ddf9a1d404", "node_type": null, "metadata": {}, "hash": "602b736c9aae16a2f2ca1acfed6ca5ea6b2a210125041272d26266598bcd8810"}}, "hash": "5b9d85485b230da690949ef85e1789fe665612335609dd597067eefe690d6590", "text": "the Helm chart or Terraform module, and the values.yaml.tpl and terraform.tfvars file for Helm and Terraform respectively.\\n\\nThe values.yaml.tpl and terraform.tfvars files are run through the Plural templating engine, which is similar to that of Helm, and are used to generate the values.yaml for the wrapper helm chart and main.tf for the wrapper Terraform module.\\n\\nThe next example is a snippet of the values.yaml.tpl file for Grafana:\\n\\n```\\ngrafana:\\n  admin:\\n    password:\\n      { { dedupe . \\\"grafana.grafana.admin.password\\\" (randAlphaNum 14) } }\\n    user: admin\\n  ingress:\\n    tls:\\n      - hosts:\\n          - { { .Values.hostname } }\\n        secretName: grafana-tls\\n    hosts:\\n      - { { .Values.hostname } }\\n```\\n\\nIn the above example, the hostname a for Grafana that is saved in the context.yaml will be set in the ingress for Grafana by {{ .Values.hostname }}. It also showcases dedupe, which is one of the templating functions available in the Plural CLI.\\n\\nWe are using the dedupe function so that a new random password for the Grafana admin is not generated if it has already been set. The reason grafana.grafana.admin.password is specified for the path, is because the CLI will create a wrapper Helm chart named grafana in a user's installation workspace. Please see this section of the Helm docs for an explanation on how to pass values to a subchart.\\n\\n[this section](https://helm.sh/docs/chart_template_guide/subcharts_and_globals/#overriding-values-from-a-parent-chart)\\n\\nThe next snippet shows a part of the terraform.tfvars for the AWS bootstrap terraform module:\\n\\n```\\nvpc_name = {{ .Values.vpc_name | quote }}\\ncluster_name = {{ .Cluster | quote }}\\n```\\n\\nExcept for the user's application inputs from the context.yaml and the aforementioned dedupe function, Plural includes a lot of other values and functions that make it possible to simplify otherwise complex application configurations.\\n\\n### Templating reference\\n\\n[](/adding-new-application#templating-reference)\\n\\nAlong with the standard functions available in the Go templating language, the following Plural specific functions can be used.\\n\\n##### Functions:\\n\\n[](/adding-new-application#functions)\\n\\n##### Template values:\\n\\n[](/adding-new-application#template-values)\\n\\n##### .Config values:\\n\\n[](/adding-new-application#config-values)\\n\\n##### .OIDC values:\\n\\n[](/adding-new-application#oidc-values)\\n\\n##### .OIDC.Bindings values:\\n\\n[](/adding-new-application#oidc-bindings-values)\\n\\n##### .SMTP values:\\n\\n[](/adding-new-application#smtp-values)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/adding-new-application/index.md)\",\n\"source_links\": []\n\"id\": 6,\n\"page_link\": \"https://docs.plural.sh/adding-new-application/module-library\",\n\"title\": \" Module Library\",\n\"text\": \"# Module Library\\n\\nWe have a number of helper Terraform modules and Helm charts to encapsulate some of the common tasks in applications available at pluralsh/module-library. Some of the more common use cases here", "start_char_idx": 23325, "end_char_idx": 26361, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "18aec66b-134d-4d9f-a7c4-15ddf9a1d404": {"__data__": {"id_": "18aec66b-134d-4d9f-a7c4-15ddf9a1d404", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "9d1519ce-14a4-4c25-a93b-6352bc5ececc", "node_type": null, "metadata": {}, "hash": "5b9d85485b230da690949ef85e1789fe665612335609dd597067eefe690d6590"}, "3": {"node_id": "4acd66d9-a336-4a21-9b54-4184b6295540", "node_type": null, "metadata": {}, "hash": "8f6b8d9500b843c5cd02369da8726fce215258fbf79e100cbafcb08243b597b2"}}, "hash": "602b736c9aae16a2f2ca1acfed6ca5ea6b2a210125041272d26266598bcd8810", "text": "available at pluralsh/module-library. Some of the more common use cases here are:\\n\\n[pluralsh/module-library](https://github.com/pluralsh/module-library)\\n\\nCreating object storage buckets and generating credentials for them. This covers S3, GCS, and Minio for cases where applications don't support Azure Blob Store. Creating a Postgres database with all the supporting Plural artifactsRunbook for scalingDashboardsPrometheus rules\\n\\nRunbook for scalingDashboardsPrometheus rules\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/adding-new-application/module-library.md)\",\n\"source_links\": []\n\"id\": 7,\n\"page_link\": \"https://docs.plural.sh/adding-new-application/plural-custom-resources\",\n\"title\": \" Plural Custom Resources\",\n\"text\": \"# Plural Custom Resources\\n\\n## dashboards.yaml\\n\\n[](/adding-new-application/plural-custom-resources#dashboards-yaml)\\n\\nDashboards are the source of truth for the Dashboards section in plural. They're very similar in structure to grafana dashboards, and you can actually scaffold them from existing grafana dashboards using the plural from-grafana command.\\n\\n```\\napiVersion: platform.plural.sh/v1alpha1\\nkind: Dashboard\\nmetadata:\\n  name: dashboard-name\\nspec:\\n  name: postgres # name of the dashboard in the console UI\\n  description: Monitoring for hasura's postgres db # short description\\n  timeslices: [30m, 1h, 2h, 1d] # durations options to allow display for\\n  defaultTime: 30m\\n  labels: # global values to slice the dashboard further\\n  - name: instance\\n    query:\\n      query: pg_stat_database_tup_fetched{namespace=\\\"{{ .Release.Namespace }}\\\"}\\n      label: instance\\n  graphs:\\n  - queries: # list of grouped prometheus queries per graph\\n    - query: SUM(pg_stat_database_tup_fetched{instance=~\\\"$instance\\\"})\\n      legend: tuples fetched\\n    - query: SUM(pg_stat_database_tup_inserted{instance=~\\\"$instance\\\"})\\n      legend: tuples inserted\\n    - query: SUM(pg_stat_database_tup_updated{instance=~\\\"$instance\\\"})\\n      legend: tuples updated\\n    name: Storage Performance\\n  - queries:\\n    - query: pg_settings_max_connections{instance=\\\"$instance\\\"}\\n      legend: connections\\n    name: Max Connections\\n  - queries:\\n    - query: avg(rate(process_cpu_seconds_total{instance=\\\"$instance\\\"}[5m]) * 1000)\\n      legend: seconds\\n    name: CPU time\\n  - queries:\\n    - query: avg(rate(process_resident_memory_bytes{instance=\\\"$instance\\\"}[5m]))\\n      legend: resident mem\\n    - query: avg(rate(process_virtual_memory_bytes{instance=\\\"$instance\\\"}[5m]))\\n      legend: process mem\\n    format: bytes\\n    name: Memory utilization\\n  - queries:\\n    - query: process_open_fds{instance=\\\"$instance\\\"}\\n      legend: fds\\n    name: Open file descriptors\\n  - queries:\\n    - query: pg_settings_max_wal_size_bytes{instance=\\\"$instance\\\"}\\n      legend: WAL size\\n    name: Max WAL size\\n  - queries:\\n    - query:", "start_char_idx": 26350, "end_char_idx": 29256, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4acd66d9-a336-4a21-9b54-4184b6295540": {"__data__": {"id_": "4acd66d9-a336-4a21-9b54-4184b6295540", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "18aec66b-134d-4d9f-a7c4-15ddf9a1d404", "node_type": null, "metadata": {}, "hash": "602b736c9aae16a2f2ca1acfed6ca5ea6b2a210125041272d26266598bcd8810"}, "3": {"node_id": "f138628c-7670-43e4-9d40-2dd90be91f03", "node_type": null, "metadata": {}, "hash": "85a6c05d39cf8d7b2ea4e9808d1a03701ea7d9ff54cf8aedb50c8d337f6e12f6"}}, "hash": "8f6b8d9500b843c5cd02369da8726fce215258fbf79e100cbafcb08243b597b2", "text": "name: Max WAL size\\n  - queries:\\n    - query: irate(pg_stat_database_xact_commit{instance=\\\"$instance\\\"}[5m])\\n      legend: commits\\n    - query: irate(pg_stat_database_xact_rollback{instance=\\\"$instance\\\"}[5m])\\n      legend: rollbacks\\n    name: Transactions\\n  - queries:\\n    - query: pg_stat_database_blks_hit{instance=\\\"$instance\\\"} / (pg_stat_database_blks_read{instance=\\\"$instance\\\"} + pg_stat_database_blks_hit{instance=\\\"$instance\\\"})\\n      legend: hit rate\\n    name: Cache hit rate\\n```\\n\\n## runbook.yaml\\n\\n[](/adding-new-application/plural-custom-resources#runbook-yaml)\\n\\nRunbooks are dynamically generated web interfaces to provide guided experiences for operational interactions within Plural. A common one that's needed is managing the database for an application, shown here, but they're meant to be adaptable to a wide array of operational use-cases. The api is also naturally extensible if other datasources are needed.\\n\\n```\\napiVersion: platform.plural.sh/v1alpha1\\nkind: Runbook\\nmetadata:\\n  name: db-scaling\\n  labels:\\n    platform.plural.sh/pinned: 'true' # whether this runbook should be on the homepage\\nspec:\\n  name: Postgres Scaling\\n  description: overview of how to accurately scale hasura's postgres instance\\n  alerts: # Alertmanager alerts to bind to this runbook\\n  - name: HasuraPostgresCPU\\n  - name: HasuraPostgresMEM\\n  display: |- # xml template for the layout of the runbook\\n{{ .Files.Get \\\"runbooks/db-scaling.xml\\\" | indent 4 }}\\n  datasources: # list of datasources to hydrate the runbook\\n  - name: cpu\\n    type: prometheus # prometheus query datasource\\n    prometheus:\\n      format: cpu\\n      legend: $pod\\n      query: sum(rate(container_cpu_usage_seconds_total{namespace=\\\"{{ .Release.Namespace }}\\\",pod=~\\\"plural-hasura-[0-9]+\\\"}[5m])) by (pod)\\n  - name: memory\\n    type: prometheus\\n    prometheus:\\n      format: memory\\n      legend: $pod\\n      query: sum(container_memory_working_set_bytes{namespace=\\\"{{ .Release.Namespace }}\\\",pod=~\\\"plural-hasura-[0-9]+\\\"}) by (pod)\\n  - name: statefulset\\n    type: kubernetes # kubernetes api call\\n    kubernetes:\\n      resource: statefulset\\n      name: plural-hasura\\n  - name: volume\\n    type: prometheus\\n    prometheus:\\n      format: none\\n      legend: $persistentvolumeclaim\\n      query: (kubelet_volume_stats_capacity_bytes{namespace=\\\"{{ .Release.Namespace }}\\\", persistentvolumeclaim=~\\\"pgdata-plural-hasura-.*\\\"} - kubelet_volume_stats_available_bytes{namespace=\\\"{{ .Release.Namespace }}\\\", persistentvolumeclaim=~\\\"pgdata-plural-hasura-.*\\\"}) / kubelet_volume_stats_capacity_bytes{namespace=\\\"{{ .Release.Namespace }}\\\", persistentvolumeclaim=~\\\"pgdata-plural-hasura-.*\\\"}\\n  - name: nodes\\n    type: nodes # nodes api call\\n  actions: # actions to perform on form submits\\n  - name: scale\\n  ", "start_char_idx": 29288, "end_char_idx": 32110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f138628c-7670-43e4-9d40-2dd90be91f03": {"__data__": {"id_": "f138628c-7670-43e4-9d40-2dd90be91f03", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "4acd66d9-a336-4a21-9b54-4184b6295540", "node_type": null, "metadata": {}, "hash": "8f6b8d9500b843c5cd02369da8726fce215258fbf79e100cbafcb08243b597b2"}, "3": {"node_id": "feaea0b8-0b7a-414e-b1b7-d73df1f05838", "node_type": null, "metadata": {}, "hash": "4cfebbaabc54ab312a7680023e381fdc0d33a0301184355fcaa91bf8a1b15223"}}, "hash": "85a6c05d39cf8d7b2ea4e9808d1a03701ea7d9ff54cf8aedb50c8d337f6e12f6", "text": "# actions to perform on form submits\\n  - name: scale\\n    action: config\\n    redirectTo: '/'\\n    configuration:\\n      updates: # path update into helm values\\n      - path:\\n        - hasura\\n        - postgres\\n        - resources\\n        - requests\\n        - cpu\\n        valueFrom: cpu\\n      - path:\\n        - hasura\\n        - postgres\\n        - resources\\n        - requests\\n        - memory\\n        valueFrom: memory\\n      - path:\\n        - hasura\\n        - postgres\\n        - replicas\\n        valueFrom: replicas\\n      - path:\\n        - hasura\\n        - postgres\\n        - storage\\n        - size\\n        valueFrom: volume\\n```\\n\\n## proxies.yaml\\n\\n[](/adding-new-application/plural-custom-resources#proxies-yaml)\\n\\nThese drive the plural proxy connect command, and can be used to establish local connections to databases or private web interfaces running in your cluster.\\n\\n```\\napiVersion: platform.plural.sh/v1alpha1\\nkind: Proxy\\nmetadata:\\n  name: db\\nspec:\\n  type: db # establishes a db shell\\n  target: service/hasura-master\\n  credentials:\\n    secret: hasura.plural-hasura.credentials.postgresql.acid.zalan.do\\n    key: password\\n    user: hasura\\n  dbConfig:\\n    name: hasura\\n    engine: postgres\\n    port: 5432\\n```\\n\\n## configurationOverlay.yaml\\n\\n[](/adding-new-application/plural-custom-resources#configurationoverlay-yaml)\\n\\nThese drive form fields which can customize applications in the console's Configuration section. At the moment they resolve to a helm values update according to a yaml path.\\n\\n```\\n{{- define \\\"nocodb.config-overlay\\\" -}}\\napiVersion: platform.plural.sh/v1alpha1\\nkind: ConfigurationOverlay\\nmetadata:\\n  name: my-overlay\\nspec:\\n  name: Airflow Registry\\n  documentation: docker repository to use for airflow (default is dkr.plural.sh/airflow/apache/airflow)\\n  updates: # a helm path update fo\\n  - path: ['airflow', 'airflow', 'airflow', 'image', 'repository']\\n```\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/adding-new-application/plural-custom-resources.md)\",\n\"source_links\": []\n\"id\": 8,\n\"page_link\": \"https://docs.plural.sh/applications\",\n\"title\": \" Catalog Overview\",\n\"text\": \"# Catalog Overview\\n\\nApplications you can install with Plural.\\n\\nHere is where all the documentation for configuring the installation of your Plural apps live.\\n\\n## Application Updates\\n\\n[](/applications#application-updates)\\n\\nWe use a tool called Renovate to automate creation of PRs to update Application version images to newer versions. Here is an example of one of these", "start_char_idx": 32101, "end_char_idx": 34679, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "feaea0b8-0b7a-414e-b1b7-d73df1f05838": {"__data__": {"id_": "feaea0b8-0b7a-414e-b1b7-d73df1f05838", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "f138628c-7670-43e4-9d40-2dd90be91f03", "node_type": null, "metadata": {}, "hash": "85a6c05d39cf8d7b2ea4e9808d1a03701ea7d9ff54cf8aedb50c8d337f6e12f6"}, "3": {"node_id": "707c9630-30bc-4b34-bd5e-9b87ab542ca8", "node_type": null, "metadata": {}, "hash": "004528ec48e4f27e67cc90121980d210c7b2176871d6f0d843d485c81b46dc51"}}, "hash": "4cfebbaabc54ab312a7680023e381fdc0d33a0301184355fcaa91bf8a1b15223", "text": "PRs to update Application version images to newer versions. Here is an example of one of these PRs.\\n\\n[Renovate](https://github.com/renovatebot/renovate)\\n\\n[Here](https://github.com/pluralsh/plural-artifacts/pull/288)\\n\\nOnce we have tried out the changes and have confirmed that the new version works, we will merge the PR and the change will be available for all Plural installations to pull down when they wish to.\\n\\n## Our Catalog\\n\\n[Airbyte](/applications/airbyte)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d79a69b7-dfcd-480a-a51d-518865fd6e7c/airbyte.png?v=63850444005)\\n\\nAirbyte\\n\\n[Airflow](/applications/airflow)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/eb88ca01-21d6-464f-8fd5-f481b385c166/airflow.png?v=63850349004)\\n\\nAirflow\\n\\n[Argo CD](/applications/argo-cd)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/df3ab918-4b1f-4ecd-b0c6-670dc18dc967/argo-stacked-color-square.png?v=63827245273)\\n\\nArgo CD\\n\\n[Argo Workflows](/applications/argo-workflows)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/92c5ed56-445e-44dd-bb9a-6cd8cfadbf36/argo-stacked-color-square.png?v=63827245274)\\n\\nArgo Workflows\\n\\n[Chatwoot](/applications/chatwoot)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/1fa864cc-98b2-457d-afb8-ed0659a6caf4/chatwoot.png?v=63827245281)\\n\\nChatwoot\\n\\n[Clickhouse](/applications/clickhouse)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/6ee23d50-55e4-475a-bd1a-919803e1658a/clickhouse.png?v=63846289251)\\n\\nClickhouse\\n\\n[Plural Console](/applications/console)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/4d9e07ec-fd50-4bc2-80c5-55a8e29c8997/console-white.png?v=63827552028)\\n\\nPlural Console\\n\\n[Crossplane](/applications/crossplane)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/568528e6-371b-4c20-8893-bcfe107aa120/crossplane.png?v=63827245276)\\n\\nCrossplane\\n\\n[Dagster](/applications/dagster)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/809ae45c-8ccf-44e2-8240-3df890557ad8/dagster-primary-mark.png?v=63849322727)\\n\\nDagster\\n\\n[Dagster", "start_char_idx": 34647, "end_char_idx": 36888, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "707c9630-30bc-4b34-bd5e-9b87ab542ca8": {"__data__": {"id_": "707c9630-30bc-4b34-bd5e-9b87ab542ca8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "feaea0b8-0b7a-414e-b1b7-d73df1f05838", "node_type": null, "metadata": {}, "hash": "4cfebbaabc54ab312a7680023e381fdc0d33a0301184355fcaa91bf8a1b15223"}, "3": {"node_id": "686c5487-6b95-476d-85b0-ea47d55e4bb2", "node_type": null, "metadata": {}, "hash": "974ac15747125893509df5209c691ae563601433ed33dfaccb99a1955fd84f46"}}, "hash": "004528ec48e4f27e67cc90121980d210c7b2176871d6f0d843d485c81b46dc51", "text": "Agent](/applications/dagster-agent)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/a1df0efd-aec3-491b-aef2-6d3375f11d91/dagster-primary-mark.png?v=63848192807)\\n\\nDagster Agent\\n\\n[Datadog](/applications/datadog)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/282199df-941b-4b79-98fb-7db1fa4421e1/datadog.png?v=63827870813)\\n\\nDatadog\\n\\n[Datahub](/applications/datahub)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/027332f3-edd2-4380-ac93-58fa6cd6b23d/datahub.png?v=63828661293)\\n\\nDatahub\\n\\n[Directus](/applications/directus)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/1f62dc7f-d418-43a7-9b62-4df6cf028dee/directus-logo-stacked.png?v=63848804642)\\n\\nDirectus\\n\\n[Elasticsearch](/applications/elasticsearch)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/cc1bb214-2841-405e-a4db-27e4855c7858/elastic.png?v=63848383152)\\n\\nElasticsearch\\n\\n[Etcd](/applications/etcd)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/9eb21fe4-f891-4170-a535-a0eb8ac28352/etcd-logo.png?v=63827245277)\\n\\nEtcd\\n\\n[External Secrets](/applications/external-secrets)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/9cd47e49-4ab8-4981-848c-821a533f1d26/external-secrets.png?v=63835057578)\\n\\nExternal", "start_char_idx": 36967, "end_char_idx": 38343, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "686c5487-6b95-476d-85b0-ea47d55e4bb2": {"__data__": {"id_": "686c5487-6b95-476d-85b0-ea47d55e4bb2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "707c9630-30bc-4b34-bd5e-9b87ab542ca8", "node_type": null, "metadata": {}, "hash": "004528ec48e4f27e67cc90121980d210c7b2176871d6f0d843d485c81b46dc51"}, "3": {"node_id": "ea661513-7849-43d8-bcf3-6ee40fc9e1bf", "node_type": null, "metadata": {}, "hash": "e999834d09e900f57cb338abff747bcc9311241ee837149c35034235699c86f2"}}, "hash": "974ac15747125893509df5209c691ae563601433ed33dfaccb99a1955fd84f46", "text": "Secrets\\n\\n[Filecoin](/applications/filecoin)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d2838155-f78d-44bd-9671-d8ca8a0fce36/filecoin.png?v=63827245280)\\n\\nFilecoin\\n\\n[Ghost](/applications/ghost)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/e125482a-caba-4d97-8767-2e90c671dcc1/ghost.png?v=63827245280)\\n\\nGhost\\n\\n[Gitlab](/applications/gitlab)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/0b78e1b6-ed5a-4e39-90a9-4beae4eb27c3/gitlab.png?v=63845588812)\\n\\nGitlab\\n\\n[Goldilocks](/applications/goldilocks)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d40c11ac-a12f-47c4-af3b-0ce57471764e/goldilocks.png?v=63830906375)\\n\\nGoldilocks\\n\\n[Grafana](/applications/grafana)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/2783a06b-8317-4998-8c5d-18bcdc2a3c6c/grafana.png?v=63849313526)\\n\\nGrafana\\n\\n[Grafana Agent](/applications/grafana-agent)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/ca723774-20ff-45c2-8b0c-13e6fef8d760/grafana-agent.png?v=63847918699)\\n\\nGrafana Agent\\n\\n[Grafana Tempo](/applications/grafana-tempo)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/aa94309f-00de-4b1b-becb-9dd93ff0853d/tempo.png?v=63830906376)\\n\\nGrafana", "start_char_idx": 38344, "end_char_idx": 39691, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ea661513-7849-43d8-bcf3-6ee40fc9e1bf": {"__data__": {"id_": "ea661513-7849-43d8-bcf3-6ee40fc9e1bf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "686c5487-6b95-476d-85b0-ea47d55e4bb2", "node_type": null, "metadata": {}, "hash": "974ac15747125893509df5209c691ae563601433ed33dfaccb99a1955fd84f46"}, "3": {"node_id": "f483fd20-d3eb-486a-ac53-2e9c4ce1e41e", "node_type": null, "metadata": {}, "hash": "e996aa71558f8df96b7fea3a0dcc7a89d705a7a1d42e66c158ae296a557e6f7c"}}, "hash": "e999834d09e900f57cb338abff747bcc9311241ee837149c35034235699c86f2", "text": "Tempo\\n\\n[Growthbook](/applications/growthbook)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/e43918d9-52c8-4717-92e1-2152552ccbf1/growthbook.png?v=63828133374)\\n\\nGrowthbook\\n\\n[Harbor](/applications/harbor)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/df23d563-066a-46e2-a961-7094ac516830/harbor.png?v=63851479413)\\n\\nHarbor\\n\\n[Hasura](/applications/hasura)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d714bcb7-82d2-496d-b70d-9f8ca73bb698/hasura.png?v=63830906377)\\n\\nHasura\\n\\n[Hydra](/applications/hydra)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/8dbdcf86-4ab8-4034-b7e2-3905c4890258/hydra.png?v=63830906378)\\n\\nHydra\\n\\n[Influx](/applications/influx)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/041cc6aa-262a-422d-8d6d-7358ee90b49f/influx.png?v=63830906378)\\n\\nInflux\\n\\n[Ingress Nginx](/applications/ingress-nginx)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/b00f924d-a832-4a73-84ba-40fd9f5f2cf8/nginx.png?v=63830906379)\\n\\nIngress", "start_char_idx": 39692, "end_char_idx": 40815, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f483fd20-d3eb-486a-ac53-2e9c4ce1e41e": {"__data__": {"id_": "f483fd20-d3eb-486a-ac53-2e9c4ce1e41e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "ea661513-7849-43d8-bcf3-6ee40fc9e1bf", "node_type": null, "metadata": {}, "hash": "e999834d09e900f57cb338abff747bcc9311241ee837149c35034235699c86f2"}, "3": {"node_id": "05f678d1-f5d4-44e1-b916-b69dda87b27b", "node_type": null, "metadata": {}, "hash": "c1a1734d714d3691ba323b3b4a4a4b5a8314c6cae2b2802fd90fe7d0dadff60f"}}, "hash": "e996aa71558f8df96b7fea3a0dcc7a89d705a7a1d42e66c158ae296a557e6f7c", "text": "Nginx\\n\\n[Istio](/applications/istio)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/fa9a3b19-539d-4307-b57d-3979a3f2b8ec/istio.png?v=63830907771)\\n\\nIstio\\n\\n[Jitsu](/applications/jitsu)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/26bfa7eb-3602-43c1-af79-4a5e2077d674/jitsu.png?v=63830907999)\\n\\nJitsu\\n\\n[Jupyterhub](/applications/jupyterhub)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/6664af69-9133-4d0c-b0db-adf0c8fce072/jupyterhub.png?v=63848545606)\\n\\nJupyterhub\\n\\n[Kafka](/applications/kafka)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/79728698-e8c7-4705-ba36-8a46d6ec9b2e/kafka-darkmode.png?v=63792628117)\\n\\nKafka\\n\\n[Knative](/applications/knative)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/405d5d69-0ed7-4995-9685-b2063fba845a/knative.png?v=63830908095)\\n\\nKnative\\n\\n[Kserve](/applications/kserve)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/2089f227-24a3-442d-a53b-941d12dd6d91/kserve.png?v=63830908096)\\n\\nKserve\\n\\n[Kubecost](/applications/kubecost)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/67592c4b-5ed5-4d5b-be12-c65318b2597c/kubecost.png?v=63830908097)\\n\\nKubecost\\n\\n[Kubeflow](/applications/kubeflow)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/98bcf7e8-e05b-4653-988f-f40752a5067a/kubeflow.png?v=63829243852)\\n\\nKubeflow\\n\\n[Kubescape](/applications/kubescape)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/265120f7-9afe-42f8-a70c-bda122800d05/kubescape.png?v=63830908098)\\n\\nKubescape\\n\\n[Kubricks](/applications/kubricks)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/1fa91315-35a7-4d18-9e64-db5c95214195/kubricks.png?v=63824240381)\\n\\nKubricks\\n\\n[Kyverno](/applications/kyverno)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazon", "start_char_idx": 40816, "end_char_idx": 42784, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "05f678d1-f5d4-44e1-b916-b69dda87b27b": {"__data__": {"id_": "05f678d1-f5d4-44e1-b916-b69dda87b27b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "f483fd20-d3eb-486a-ac53-2e9c4ce1e41e", "node_type": null, "metadata": {}, "hash": "e996aa71558f8df96b7fea3a0dcc7a89d705a7a1d42e66c158ae296a557e6f7c"}, "3": {"node_id": "96f385b3-756b-4c34-aaf7-50c7a6bdd422", "node_type": null, "metadata": {}, "hash": "49d00b2d2c22f0bfed1f4c2a7fe9d843255d383a0430ad534822365eb6bb9103"}}, "hash": "c1a1734d714d3691ba323b3b4a4a4b5a8314c6cae2b2802fd90fe7d0dadff60f", "text": "aws.com/uploads/repos/cba9e42e-62d2-4715-bb15-de9e7d8c43cc/kyverno.png?v=63830908099)\\n\\nKyverno\\n\\n[Lightdash](/applications/lightdash)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/432b8cac-a2f5-4440-8b29-d0610962ae06/lightdash.png?v=63841729505)\\n\\nLightdash\\n\\n[Loki](/applications/loki)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/a13d8533-7e35-434b-b981-be377f973175/loki.png?v=63849227349)\\n\\nLoki\\n\\n[Metabase](/applications/metabase)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/029f6b32-8b3b-40e0-9f44-4d154cb32aa3/metabase.png?v=63828669690)\\n\\nMetabase\\n\\n[Mimir](/applications/mimir)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/9efb373f-c381-4201-bd30-ce04fa015519/mimir.png?v=63849313524)\\n\\nMimir\\n\\n[Minecraft](/applications/minecraft)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/c3f5d3b2-ed75-489c-aac9-9319c9bfea02/minecraft.png?v=63831674374)\\n\\nMinecraft\\n\\n[Minio](/applications/minio)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/20067709-663b-4100-9f18-e213cdf4f165/minio.png?v=63830908101)\\n\\nMinio\\n\\n[MLflow](/applications/mlflow)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/bb99f957-fdef-4b9a-8c33-e974bb392c0e/mlflow.png?v=63830908102)\\n\\nMLflow\\n\\n[MongoDB](/applications/mongodb)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/bfe51870-8f8b-4b4d-bd68-18645f61ee8e/mongodb.png?v=63827333062)\\n\\nMongoDB\\n\\n[Monitoring](/applications/monitoring)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/1ed5c2be-9d60-43db-b757-ee289e6524f6/monitoring.png?v=63830290708)\\n\\nMonitoring\\n\\n[MySQL](/applications/mysql)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/e3a59d39-0917-4072-9c95-6cbcaab2381a/mysql.png?v=63830908103)\\n\\nMySQL\\n\\n[n8n](/applications/n8n)\\n\\n![Image](https://plural-assets.s3.us-east-2", "start_char_idx": 42785, "end_char_idx": 44808, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "96f385b3-756b-4c34-aaf7-50c7a6bdd422": {"__data__": {"id_": "96f385b3-756b-4c34-aaf7-50c7a6bdd422", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "05f678d1-f5d4-44e1-b916-b69dda87b27b", "node_type": null, "metadata": {}, "hash": "c1a1734d714d3691ba323b3b4a4a4b5a8314c6cae2b2802fd90fe7d0dadff60f"}, "3": {"node_id": "e3980efa-d55a-4c77-8f4d-2322ddae7ebf", "node_type": null, "metadata": {}, "hash": "c26fccdb2dfcc3b96d790bafd22ede5cf81839b4a1736d0ca81ad2e89e43bedb"}}, "hash": "49d00b2d2c22f0bfed1f4c2a7fe9d843255d383a0430ad534822365eb6bb9103", "text": ".amazonaws.com/uploads/repos/236a48a3-4e40-458a-a9ee-ff464ba84234/n8n.png?v=63830908103)\\n\\nn8n\\n\\n[Nextcloud](/applications/nextcloud)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/9dbccf2b-771a-4bfb-87b9-63646a253d1c/nextcloud.png?v=63830908104)\\n\\nNextcloud\\n\\n[NocoDB](/applications/nocodb)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/a052b432-212f-486e-90bb-6c0bc0f987e8/nocodb.png?v=63830908105)\\n\\nNocoDB\\n\\n[NVIDIA Operator](/applications/nvidia-operator)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/841eb2e5-f792-4157-9ff0-7c8df1322a77/nvidia.png?v=63830908105)\\n\\nNVIDIA Operator\\n\\n[OAuth2 Proxy](/applications/oauth2-proxy)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/099fa484-b9d1-458a-aeb9-f8009516ad8b/oauth2-proxy.png?v=63830908106)\\n\\nOAuth2 Proxy\\n\\n[Plural](/applications/plural)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/3fbf2a2b-6416-4245-ad28-3c2fb74aac86/plural-white.png?v=63827274061)\\n\\nPlural\\n\\n[PostgreSQL](/applications/postgres)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/964f6549-30f1-46c3-ad03-a31166120a5c/postgres.png?v=63842071705)\\n\\nPostgreSQL\\n\\n[Posthog](/applications/posthog)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/4f7ba528-88c0-4bc8-b8f9-eabd40b57927/posthog.png?v=63843098284)\\n\\nPosthog\\n\\n[Prefect](/applications/prefect)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/c1132fad-5829-4a5a-baeb-6621b392f91b/prefect.png?v=63852931356)\\n\\nPrefect\\n\\n[Prefect Agent](/applications/prefect-agent)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/40fee2a9-ed30-481b-bf25-60279b35e252/prefect.png?v=63852931358)\\n\\nPrefect Agent\\n\\n[Prefect Worker](/applications/prefect-worker)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/724c0bb0-cdf7-4cfe-b9ea-cd2697088ded/prefect.png?v=63853292861)\\n\\nPrefect", "start_char_idx": 44809, "end_char_idx": 46853, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e3980efa-d55a-4c77-8f4d-2322ddae7ebf": {"__data__": {"id_": "e3980efa-d55a-4c77-8f4d-2322ddae7ebf", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "96f385b3-756b-4c34-aaf7-50c7a6bdd422", "node_type": null, "metadata": {}, "hash": "49d00b2d2c22f0bfed1f4c2a7fe9d843255d383a0430ad534822365eb6bb9103"}, "3": {"node_id": "9358ff6b-c39a-4bff-8ecb-0f0e126e05b3", "node_type": null, "metadata": {}, "hash": "4472693b86cb15acfcd57792a02917777262710239f444fd72662ecf79c05c67"}}, "hash": "c26fccdb2dfcc3b96d790bafd22ede5cf81839b4a1736d0ca81ad2e89e43bedb", "text": "Worker\\n\\n[RabbitMQ](/applications/rabbitmq)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/6394470f-b74e-4dc5-8084-aba94fd8dc05/rabbitmq.png?v=63830908333)\\n\\nRabbitMQ\\n\\n[Ray](/applications/ray)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/32861411-b531-4d25-a9e4-1685d6ae7dc0/ray.png?v=63832368843)\\n\\nRay\\n\\n[Redis](/applications/redis)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/afe7e33a-9b9a-40ef-b0c4-898d48a1cc41/redis.png?v=63847520946)\\n\\nRedis\\n\\n[Redpanda](/applications/redpanda)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/8bb75682-c0b6-4e1b-ac89-d0a83556e5da/redpanda.png?v=63847520561)\\n\\nRedpanda\\n\\n[Reloader](/applications/reloader)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/90932299-2920-4148-aba1-401b7bdd82b9/reloader.png?v=63830908335)\\n\\nReloader\\n\\n[Renovate on Prem](/applications/renovate-on-prem)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/5bef1d85-2a3f-434e-a91a-46b36d47b1e1/renovate.png?v=63835211789)\\n\\nRenovate on", "start_char_idx": 46854, "end_char_idx": 47987, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9358ff6b-c39a-4bff-8ecb-0f0e126e05b3": {"__data__": {"id_": "9358ff6b-c39a-4bff-8ecb-0f0e126e05b3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "e3980efa-d55a-4c77-8f4d-2322ddae7ebf", "node_type": null, "metadata": {}, "hash": "c26fccdb2dfcc3b96d790bafd22ede5cf81839b4a1736d0ca81ad2e89e43bedb"}, "3": {"node_id": "47c87c01-28be-4559-9618-c0eaaef59904", "node_type": null, "metadata": {}, "hash": "33c3049071cf153382523aee15079ddad460cc3bb97eb89525cbb15260bbdce4"}}, "hash": "4472693b86cb15acfcd57792a02917777262710239f444fd72662ecf79c05c67", "text": "on Prem\\n\\n[Retool](/applications/retool)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/a5b2b8d0-95d1-4ac2-9466-eafc2af27567/retool-dark.jpeg?v=63843893988)\\n\\nRetool\\n\\n[Rook](/applications/rook)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d4a2c822-0481-4b30-880a-dfd6423a925a/rook.png?v=63830908335)\\n\\nRook\\n\\n[Sentry](/applications/sentry)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/01089244-ac87-41e4-b464-2cbef89756cd/sentry.png?v=63828767648)\\n\\nSentry\\n\\n[Sftpgo](/applications/sftpgo)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/8fa091ea-9574-47fe-ac61-8cb379230018/sftpgo.png?v=63848193195)\\n\\nSftpgo\\n\\n[Spark](/applications/spark)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/c29e7964-1c53-477f-b071-2b397cf63815/spark.png?v=63830908337)\\n\\nSpark\\n\\n[Superset](/applications/superset)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/9420c529-ad19-4067-81cd-fd8e08e89d27/superset.png?v=63844820270)\\n\\nSuperset\\n\\n[Terraria](/applications/terraria)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/40e1a25c-9a68-4d7e-a579-a02803a8526d/terraria.png?v=63829848381)\\n\\nTerraria\\n\\n[Tier](/applications/tier)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/7bd4ec71-4a8d-494b-85b5-bbd7c9fbc435/tier.png?v=63847493413)\\n\\nTier\\n\\n[Touca](/applications/touca)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/04282582-e36a-4196-9f8b-84c29235540e/touca.png?v=63837576222)\\n\\nTouca\\n\\n[Trace Shield](/applications/trace-shield)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/77a0972b-1683-47e3-8c8d-59f56db060b0/trace-shield.png?v=63847916475)\\n\\nTrace", "start_char_idx": 47986, "end_char_idx": 49828, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "47c87c01-28be-4559-9618-c0eaaef59904": {"__data__": {"id_": "47c87c01-28be-4559-9618-c0eaaef59904", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "9358ff6b-c39a-4bff-8ecb-0f0e126e05b3", "node_type": null, "metadata": {}, "hash": "4472693b86cb15acfcd57792a02917777262710239f444fd72662ecf79c05c67"}, "3": {"node_id": "4b84d9fc-ca10-47f9-a376-36854ebb9a15", "node_type": null, "metadata": {}, "hash": "ae6c8fcb489ebc646f78562c410eba9c93372d42f647b6768979d170d8e7c76d"}}, "hash": "33c3049071cf153382523aee15079ddad460cc3bb97eb89525cbb15260bbdce4", "text": "Shield\\n\\n[Trino](/applications/trino)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/635d9ef5-5455-4657-9edd-190ea7ebd035/trino.png?v=63843608393)\\n\\nTrino\\n\\n[Trivy](/applications/trivy)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d977000f-89e4-41ff-a389-6e4a4201811b/trivy.png?v=63837144025)\\n\\nTrivy\\n\\n[Typesense](/applications/typesense)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d600735f-b112-4d62-ba9a-53c3432145a6/typesense.png?v=63853862916)\\n\\nTypesense\\n\\n[Valheim](/applications/valheim)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/0ddec8ed-d37e-4a0d-af14-5fc7dcc6b2a1/valheim.png?v=63840335330)\\n\\nValheim\\n\\n[Vault](/applications/vault)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/3020f975-31c4-4e78-9a0e-4ff732d1b4ad/vault-white.png?v=63830908340)\\n\\nVault\\n\\n[Vaultwarden](/applications/vaultwarden)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/52ea8e1e-4b0f-4e41-af41-aae42a9c20fe/vaultwarden.png?v=63830908340)\\n\\nVaultwarden\\n\\n[Wireguard](/applications/wireguard)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/4c0f055b-9011-4c5e-a8b0-db029080151f/wireguard.png?v=63835127357)\\n\\nWireguard\\n\\n[Yatai](/applications/yatai)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d7dce8f1-e3cf-4315-b333-863361025358/yatai.png?v=63852322856)\\n\\nYatai\\n\\n[Yugabyte](/applications/yugabyte)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/4036bea8-d1bd-4720-b0e6-3e9d91706aad/yugabyte.png?v=63831419625)\\n\\nYugabyte\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/applications/index.md)\",\n\"source_links\": []\n\"id\": 9,\n\"page_link\": \"https://docs.plural.sh/archive/architecture\",\n\"title\": \" Architecture\",\n\"text\": \"# Architecture\\n\\nThe Plural architecture has three main components:\\n\\nPlural API and Catalog site (available at https://app.plural.sh)Plural CLI and Git SCM to maintain the state of a user's applicationsPlural console for management of all plural applications on", "start_char_idx": 49831, "end_char_idx": 52012, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4b84d9fc-ca10-47f9-a376-36854ebb9a15": {"__data__": {"id_": "4b84d9fc-ca10-47f9-a376-36854ebb9a15", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "47c87c01-28be-4559-9618-c0eaaef59904", "node_type": null, "metadata": {}, "hash": "33c3049071cf153382523aee15079ddad460cc3bb97eb89525cbb15260bbdce4"}, "3": {"node_id": "92ef7552-a012-49d8-898d-0a3c9413b0ed", "node_type": null, "metadata": {}, "hash": "303a93a3f82319af725eddfd76f9e7b8e5c1992329ba9bac52d00eb337c568a2"}}, "hash": "ae6c8fcb489ebc646f78562c410eba9c93372d42f647b6768979d170d8e7c76d", "text": "of a user's applicationsPlural console for management of all plural applications on your infrastructure\\n\\n[https://app.plural.sh](https://app.plural.sh)\\n\\nAt a high level, the interactions between all three components look something like this:\\n\\n![Image](/assets/reference/architecture.png)\\n\\n## Plural API\\n\\n[](/archive/architecture#plural-api)\\n\\nThe primary responsibility of the Plural API is to store the packages needed for application installation - terraform, helm - and ingesting high-level dependency information about them. This allows us to properly sequence installations. It also serves as a publish-subscribe layer to communicate updates to clusters that have installed those applications, and can leverage the dependency information ingested to delay updates until a cluster has caught up with all the necessary dependencies.\\n\\nIt also can serve as an identity provider for any Plural application, delegating authentication via OIDC and also maintaining user group info and communicating it down to applications.\\n\\nFinally it handles billing and licensing, supporting all the common constructs seen in modern SaaS billing\\n\\n## Plural CLI\\n\\n[](/archive/architecture#plural-cli)\\n\\nThe Plural CLI effectively uses the Plural API as a package manager, and works as a higher level build tool on top of the DevOps packages it supports. It will handle things like running installations in dependency order, detecting changes between runs, and templating out a workspace from scratch.\\n\\nIt also is responsible for managing secret encryption of all application state in plural installation repos and provides a few useful tools for troubleshooting an application our admin console might not be well-suited to solve.\\n\\nFinally it also provides the toolchain for publishing applications to the plural API.\\n\\n## Plural Console\\n\\n[](/archive/architecture#plural-console)\\n\\nThe Plural Console is the operational hub for all applications managed by Plural. It is deployed in-cluster alongside applications and provides a few key features:\\n\\nAutomated upgrades - by subscribing to the API's upgrade websocketObservability - leveraging the dashboard and logging Kubernetes CRDs deployed alongside Plural applicationsSupport - in-person support can be handled in our chat interface available directly in the admin console, with a lot of nice features like direct zoom integration\\n\\nIt's deployed as a highly available, scalable web service, with postgres as its datastore. It also directly integrates with Plural's OIDC for login and user management.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/archive/architecture.md)\",\n\"source_links\": []\n\"id\": 10,\n\"page_link\": \"https://docs.plural.sh/archive/basics/AdminConsole\",\n\"title\": \" Plural Admin Console\",\n\"text\": \"# Plural Admin Console\\n\\nThe plural admin console serves a number of different roles\\n\\nmanaging automated upgrades delivered from the kubernetes apiserving as a thin grafana to visualize application metrics and logsserving as a built-in k8s dashboard for all plural apps in the cluster, along with providing app-level health checkingbeing the touchpoint at which incidents can be filed with the owner of an application\\n\\n# Installation\\n\\n[](/archive/basics/AdminConsole#installation)\\n\\nThe plural console is installable like any other plural app, to find the available bundles, just run:\\n\\n```\\nplural bundle list console\\n```\\n\\nThen once you've found an eligible bundle to install, do (for the aws bundle as an example):\\n\\n```\\nplural bundle install console console-aws\\nplural build --only console\\nplural deploy\\n```\\n\\n#", "start_char_idx": 51941, "end_char_idx": 55583, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "92ef7552-a012-49d8-898d-0a3c9413b0ed": {"__data__": {"id_": "92ef7552-a012-49d8-898d-0a3c9413b0ed", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "4b84d9fc-ca10-47f9-a376-36854ebb9a15", "node_type": null, "metadata": {}, "hash": "ae6c8fcb489ebc646f78562c410eba9c93372d42f647b6768979d170d8e7c76d"}, "3": {"node_id": "ba1b65a3-cc3a-463c-936a-65820f0c1674", "node_type": null, "metadata": {}, "hash": "2965c97dd7551777d053d1cabc55e79ce775a78dac7e4c635a3811df61168cef"}}, "hash": "303a93a3f82319af725eddfd76f9e7b8e5c1992329ba9bac52d00eb337c568a2", "text": "build --only console\\nplural deploy\\n```\\n\\n# Dependencies\\n\\n[](/archive/basics/AdminConsole#dependencies)\\n\\nThe console takes over the gitops flow for managing plural apps for you, but that also means it needs your git repo set up appropriately. Currently we require these details (although we'll support other git operating modes in the future):\\n\\nthe remote url should be ssh not httpsyou have a passphraseless ssh key with access to that repo you can offer to the consolethe ssh key should have write perms to the repo\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/archive/basics/AdminConsole.md)\",\n\"source_links\": []\n\"id\": 12,\n\"page_link\": \"https://docs.plural.sh/archive/basics/GettingStarted\",\n\"title\": \" Getting Started using Plural\",\n\"text\": \"# Getting Started using Plural\\n\\nBefore getting started with plural, you'll need to install a few dependencies:\\n\\nhelmterraformcloud provider cli (awscli, gcloud, az)\\n\\nIn addition, we require a few helm plugins to add additional features (like authenticated chartmuseum and diffing):\\n\\n```\\nhelm plugin install https://github.com/chartmuseum/helm-push\\nhelm plugin install https://github.com/databus23/helm-diff\\n```\\n\\nFinally, you'll want to install the plural cli. This can actually be found using plural's artifact registry here:\\n\\n```\\ncurl -L https://app.plural.sh/artifacts/plural/plural?platform=${plat}&arch=${arch} > /on/your/path/plural\\nchmod +x /on/your/path/plural\\n```\\n\\nCurrent values of (plat, arch) are:\\n\\nYou can see them listed here: https://app.plural.sh/repositories/b4ea03b9-d51f-4934-b030-ff864b720df6/artifacts along with download links\\n\\n## DNS\\n\\n[](/archive/basics/GettingStarted#dns)\\n\\nPlural uses externaldns for dns management in k8s. Programmatic registration of domains is not a solved problem at the moment, so we assume you've already set one up and have it available. It is best practice to consolidate your plural resources into a single subdomain to ensure we don't trample existing entries, but it should be safe if you don't as well.\\n\\n[externaldns](https://github.com/kubernetes-sigs/external-dns)\\n\\nThe dns providers we currently support are:\\n\\nRoute53Google Cloud DNSAzure DNS\\n\\nIn all cases externaldns is configured to use pod assigned, temporary credentials.\\n\\n## Git setup\\n\\n[](/archive/basics/GettingStarted#git-setup)\\n\\nThe state of your installation is stored in a fresh git repo. Currently we're limited to a one cluster to one repo mapping, but eventually that will be relaxed. Additionally, the best supported method of authenticating to git using plural is via passphraseless ssh keys. Both GitLab and GitHub support this mode of operation, and you can always choose to use https://gitlab.plural.sh if your organization has no existing git-based SCM.\\n\\nOnce your repo has been cloned, run:\\n\\n```\\nplural init\\n```\\n\\nto log into plural, set the git attributes to configure encryption, and configure your cloud provider for this installation.\\n\\n## Installation\\n\\n[](/archive/basics/GettingStarted#installation)\\n\\nTo install applications on plural, the preferred method is to use our installation bundles, which provide a wizard-like installation process across an apps entire dependency tree. You can view the available bundles by navigating to the app on", "start_char_idx": 55614, "end_char_idx": 58931, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ba1b65a3-cc3a-463c-936a-65820f0c1674": {"__data__": {"id_": "ba1b65a3-cc3a-463c-936a-65820f0c1674", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "92ef7552-a012-49d8-898d-0a3c9413b0ed", "node_type": null, "metadata": {}, "hash": "303a93a3f82319af725eddfd76f9e7b8e5c1992329ba9bac52d00eb337c568a2"}, "3": {"node_id": "6a2cc766-bf41-4c27-8d68-bcd990772f52", "node_type": null, "metadata": {}, "hash": "0732a3c1af3e2ee6c6c86dddf09bcf19ca25d352bd60052725b71c9666d3ee97"}}, "hash": "2965c97dd7551777d053d1cabc55e79ce775a78dac7e4c635a3811df61168cef", "text": "dependency tree. You can view the available bundles by navigating to the app on https://app.plural.sh or listing them via the cli using:\\n\\n```\\nplural bundle list <app-name>\\n```\\n\\nIf the app is paid, you should click on the bundle in the interface to ensure you set up all the subscriptions needed to install the application properly.\\n\\nOnce you've found the bundle you want and are ready to go, run this in the root of your repo:\\n\\n```\\nplural bundle install <app-name> <bundle-name>\\n```\\n\\nYou should be asked a lot of questions about how your app will be configured, which will ultimately spool your configuration to a file called context.yaml at the root of your repo.\\n\\n## Deployment\\n\\n[](/archive/basics/GettingStarted#deployment)\\n\\nWith all bundles installed, simply run:\\n\\n```\\nplural build\\nplural deploy\\n```\\n\\nThis will generate all deployment artifacts in the repo, then deploy them in dependency order.\\n\\nOnce you're finished, commit your changes and push them upstream. This will be needed in case you use our admin console, which also uses git for state management:\\n\\n```\\ngit add . && git commit -m \\\"Initial plural setup\\\"\\ngit push\\n```\\n\\n## Log In\\n\\n[](/archive/basics/GettingStarted#log-in)\\n\\nOnce plural deploy has completed, you should be ready to log in. The login credentials are usually available in the values.yaml for the applciation's helm chart. The key name should be pretty self-descriptive, for instance the initial admin password for the plural console is in a key named: secrets.adminPassword.\\n\\n## Upgrading and deploying new apps to an existing cluster\\n\\n[](/archive/basics/GettingStarted#upgrading-and-deploying-new-apps-to-an-existing-cluster)\\n\\nThe full plural build && plural deploy commands are only necessary if you have a queue of multiple apps to be deployed that you need assistance with sequencing the installations. If there's just a single targeted application to deploy, simply do:\\n\\n```\\nplural build --only ${app}\\nplural deploy\\ngit add . && git commit -m \\\"updated ${app}\\\" # don't forget to commit and push your changes!\\ngit push\\n```\\n\\nFor the most part, plural console will do all of this for you if you chose to install it.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/archive/basics/GettingStarted.md)\",\n\"source_links\": []\n\"id\": 13,\n\"page_link\": \"https://docs.plural.sh/archive/basics/SecretManagement\",\n\"title\": \" Secret Management\",\n\"text\": \"# Secret Management\\n\\nPlural reimplements git-crypt in its management of secret data within git. This provides transparent file access to users with the repo's AES key, along with full support for tooling like diffing locally, but obfuscation of secret data when pushed to remote, or if the repo is checked out by a user without proper access.\\n\\n[git-crypt](https://github.com/AGWA/git-crypt)\\n\\nThe encryption key is automatically generated by plural and stored in plural's config directory ~/.plural. We provide commands for importing/exporting the key, in addition we have a mechanism for sharing the repo with multiple users using the successor to PGP, age.\\n\\n[age](https://github.com/FiloSottile/age)\\n\\n## Sharing a repo\\n\\n[](/archive/basics/SecretManagement#sharing-a-repo)\\n\\nTo share an encrypted plural repo, there are two steps:\\n\\nRegister an age public key with pluralShare the repo with a list of emails for plural users with", "start_char_idx": 58908, "end_char_idx": 62308, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6a2cc766-bf41-4c27-8d68-bcd990772f52": {"__data__": {"id_": "6a2cc766-bf41-4c27-8d68-bcd990772f52", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "ba1b65a3-cc3a-463c-936a-65820f0c1674", "node_type": null, "metadata": {}, "hash": "2965c97dd7551777d053d1cabc55e79ce775a78dac7e4c635a3811df61168cef"}, "3": {"node_id": "67f0e295-4799-4cb7-a0cc-44be13c385b9", "node_type": null, "metadata": {}, "hash": "15718b4212bd8c2c2caaa5664bc388e7c668b4b3a4cbfb9d46ef97cfa3f80d7d"}}, "hash": "0732a3c1af3e2ee6c6c86dddf09bcf19ca25d352bd60052725b71c9666d3ee97", "text": "public key with pluralShare the repo with a list of emails for plural users with registered keys\\n\\n### Registering a public key\\n\\n[](/archive/basics/SecretManagement#registering-a-public-key)\\n\\nTo register a key for your current machine, run:\\n\\n```\\nplural crypto setup-keys\\n```\\n\\nThis will generate a new age keypair, and automatically register the public key with the plural api. You should be able to see it listed here: https://app.plural.sh/me/edit/keys and the keypair will be stored in ~/.plural/identity\\n\\n### Share a repo\\n\\n[](/archive/basics/SecretManagement#share-a-repo)\\n\\nTo share a repo, simply run:\\n\\n```\\nplural crypto share --email <email1> --email <email2>\\n```\\n\\nThis will do a few things:\\n\\ncreate a base age identity to encrypt the repo's current aes key and store it in a gitignored place under ${REPO_ROOT}/.plural-crypt.register all the users who have access in a yaml file under ${REPO_ROOT}/.plural-cryptage encrypt the file using all this information and store it under ${REPO_ROOT}/.plural-crypt\\n\\nIf you have the plural console deployed, it's also recommended you run:\\n\\n```\\nplural build --only console\\nplural deploy\\ngit add . && git commit -m \\\"set up age\\\"\\ngit push\\n```\\n\\nto ensure it now uses age to manage its encryption key.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/archive/basics/SecretManagement.md)\",\n\"source_links\": []\n\"id\": 14,\n\"page_link\": \"https://docs.plural.sh/archive/basics/WorkspaceLayout\",\n\"title\": \" Plural Workspace Layout\",\n\"text\": \"# Plural Workspace Layout\\n\\nPlural ensures the state of all installed applications are stored in a git repository, under a common format. Broadly, a working workspace should look like\\n\\n```\\napp-one/\\n-> helm/app-one # helm chart for k8s manifests\\n-> terraform/* # terraform modules\\n-> terraform/main.tf # main terraform entrypoint\\n-> build.hcl # configuration for build commands for that application\\n-> deploy.hcl # configuration for deployments\\n-> output.yaml # outputs from various tools (terraform, helm, etc) that can be imported into inputs for others\\n-> manifest.yaml # metadata about the plural app itself\\n\\napp-two/\\n-> helm/app-two\\n-> terraform/*\\n-> build.hcl\\n-> deploy.hcl\\n-> output.yaml\\n-> manifest.yaml\\n\\ncontext.yaml\\nworkspace.yaml\\n```\\n\\n## {build | deploy}.hcl\\n\\n[](/archive/basics/WorkspaceLayout#build-deploy-hcl)\\n\\nThe build/deploy files manage two things:\\n\\nthe steps needed to build or apply a specific repository in pluralchange detection between runs\\n\\nWe'll automatically sha whatever subtree is needed to run any stage in the file, and if there's no detectable change, ignore the command. This is especially useful for avoiding slow, unneeded terraform commands\\n\\n## context.yaml\\n\\n[](/archive/basics/WorkspaceLayout#context-yaml)\\n\\nThis is where the results to all bundle installs are stored. It can also be manually extended if there's some customization that a user wants to apply beyond what the bundle provided.\\n\\n## workspace.yaml\\n\\n[](/archive/basics/WorkspaceLayout#workspace-yaml)\\n\\nStores base cloud provider setup for this", "start_char_idx": 62309, "end_char_idx": 65434, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "67f0e295-4799-4cb7-a0cc-44be13c385b9": {"__data__": {"id_": "67f0e295-4799-4cb7-a0cc-44be13c385b9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "6a2cc766-bf41-4c27-8d68-bcd990772f52", "node_type": null, "metadata": {}, "hash": "0732a3c1af3e2ee6c6c86dddf09bcf19ca25d352bd60052725b71c9666d3ee97"}, "3": {"node_id": "e016a22b-53ba-4043-8344-2e09f106a57c", "node_type": null, "metadata": {}, "hash": "8652e9373a4fb89e6ded818e1ff573366111d77fadcc7b4218c33e5bd345dcf0"}}, "hash": "15718b4212bd8c2c2caaa5664bc388e7c668b4b3a4cbfb9d46ef97cfa3f80d7d", "text": "base cloud provider setup for this repository. It uses a general format modelled after GCP, but the mapping to the resources in other clouds is pretty straightforward.\\n\\nOn each app installation, you have the option of inheriting this setup, or reconfiguring for the specific app.\\n\\n## .gitattributes\\n\\n[](/archive/basics/WorkspaceLayout#gitattributes)\\n\\nThe git attributes file specifies the filters that drive secret encryption. This file should not be tampered with, unless the user is confident they know what they're doing.\\n\\nWe'll also add additional .gitattributes as different modules add or create secrets that might be stored in the repo (eg ssh keys).\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/archive/basics/WorkspaceLayout.md)\",\n\"source_links\": []\n\"id\": 15,\n\"page_link\": \"https://docs.plural.sh/archive/cloud-shell\",\n\"title\": \" Cloud Shell\",\n\"text\": \"# Cloud Shell\\n\\nThis page gives an overview of what the Cloud Shell is.\\n\\n## Quickstart\\n\\n[](/archive/cloud-shell#quickstart)\\n\\nFor a guide on how to get up and running with the Cloud Shell, click here.\\n\\n[here](/getting-started/cloud-shell-quickstart)\\n\\n## Overview\\n\\n[](/archive/cloud-shell#overview)\\n\\nWe provide a fully managed cloud shell environment with plural cli and all dependencies installed for you to get started on. To create a shell, navigate to https://app.plural.sh/shell and fill out the setup wizard. Note that this will ask for cloud credentials which will be stored in our database to facilitate provisioning, but you can purge your shell at any time to remove access. Once done, this will create a GitHub repository, deploy keys for pushing to it, and create a shell environment with all configuration set up for you to get running quickly. Your fully working shell should look something like this:\\n\\n[https://app.plural.sh/shell](https://app.plural.sh/shell)\\n\\n###### Warning:\\n\\nNote that you must to manually push any uncommitted changes as your shell might not be persisted through restarts\\n\\n![Image](/assets/Screen%20Shot%202022-02-18%20at%201.01.22%20PM.png)\\n\\nIf you'd like to sync your shell locally once you've gotten up and running, all you'll need to do is follow the instructions to install the plural cli and run these commands:\\n\\n```\\nplural shell sync\\nplural shell purge # if you want to remove the shell from our servers\\n```\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/archive/cloud-shell.md)\",\n\"source_links\": []\n\"id\": 16,\n\"page_link\": \"https://docs.plural.sh/archive/introduction\",\n\"title\": \" Introduction\",\n\"text\": \"# Introduction\\n\\nPlural comes pre-built with a lot of the core concepts needed for IAM at any organizational scale. These include:\\n\\nUsers and Groups - maintain a full directory to manage identity within PluralRoles - which can be bound to any set of users or groups of users to allocate permissionsService Accounts - dedicated identities with a fixed policy as far as what other entities can impersonate them and act on their behalf.\\n\\n### Account Basics\\n\\n[](/archive/introduction#account-basics)\\n\\nWhen you sign up to plural, you'll immediately be allocated an account. You can then invite users by using the form at https://app.plural.sh/accounts/edit/users. Users who sign up organically will get their own accounts, and will have to be linked afterwards, so we recommend onboarding additional users via", "start_char_idx": 65472, "end_char_idx": 68897, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e016a22b-53ba-4043-8344-2e09f106a57c": {"__data__": {"id_": "e016a22b-53ba-4043-8344-2e09f106a57c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "67f0e295-4799-4cb7-a0cc-44be13c385b9", "node_type": null, "metadata": {}, "hash": "15718b4212bd8c2c2caaa5664bc388e7c668b4b3a4cbfb9d46ef97cfa3f80d7d"}, "3": {"node_id": "1c0731df-61c6-4a9e-835a-c206da06d1ce", "node_type": null, "metadata": {}, "hash": "e9dc9d932c24cfeab462bc449bbf1a8c02a5fa0423917ea6e8a448c70c5c08f2"}}, "hash": "8652e9373a4fb89e6ded818e1ff573366111d77fadcc7b4218c33e5bd345dcf0", "text": "and will have to be linked afterwards, so we recommend onboarding additional users via invite.\\n\\n[https://app.plural.sh/accounts/edit/users](https://app.plural.sh/accounts/edit/users)\\n\\n###### Info:\\n\\nThe only users eligible for sharing repo encryption keys are also those users in your account .\\n\\n### RBAC Basics\\n\\n[](/archive/introduction#rbac-basics)\\n\\nEach Plural role is configurable using the role creation form at https://app.plural.sh/accounts/edit/roles:\\n\\n[https://app.plural.sh/accounts/edit/roles](https://app.plural.sh/accounts/edit/roles)\\n\\n![Image](/assets/advanced-topics/rbac-basics.png)\\n\\nThe permissions are fairly self explanatory, but you do have the ability to map a role to whatever identity grouping you'd want to use, and filter the roles application to a list of repositories (or a regex on repository name). The latter mode is helpful if you'd like a certain role to only be able to install, say, airflow and sentry.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/archive/introduction.md)\",\n\"source_links\": []\n\"id\": 17,\n\"page_link\": \"https://docs.plural.sh/archive/secret-management\",\n\"title\": \" Secret Management\",\n\"text\": \"# Secret Management\\n\\nPlural reimplements git-crypt in its management of secret data within git. This provides transparent file access to users with the repo's AES key, along with full support for tooling like diffs locally, while still providing full obfuscation of secret data when pushed to remote.\\n\\n[git-crypt](https://github.com/AGWA/git-crypt)\\n\\nThe encryption key is automatically generated by plural and stored in plural's config directory ~/.plural. We provide commands for importing/exporting the key, in addition we have a mechanism for sharing the repo with multiple users using the successor to PGP, age.\\n\\n[age](https://github.com/FiloSottile/age)\\n\\n## Sharing a repo\\n\\n[](/archive/secret-management#sharing-a-repo)\\n\\nTo share an encrypted plural repo, there are two steps:\\n\\nRegister an age public key with pluralShare the repo with a list of emails for plural users with registered keys\\n\\n### Registering a public key\\n\\n[](/archive/secret-management#registering-a-public-key)\\n\\nTo register a key for your current machine, run:\\n\\n```\\nplural crypto setup-keys --name <name-for-key-pair>\\n```\\n\\nThis will generate a new age keypair, and automatically register the public key with the plural api. You should be able to see it listed here and the keypair will be stored in ~/.plural/identity\\n\\n[here](https://app.plural.sh/me/edit/keys)\\n\\n### Share a repo\\n\\n[](/archive/secret-management#share-a-repo)\\n\\nTo share a repo, use the following command:\\n\\n```\\nplural crypto share --email <email1> --email <email2>\\n```\\n\\nNote: --email refers to a user's email associated with their Plural account\\n\\nThis will do a few things:\\n\\ncreate a base age identity to encrypt the repo's current aes key and store it in a gitignored place under ${REPO_ROOT}/.plural-crypt.register all the users who have access in a yaml file under ${REPO_ROOT}/.plural-cryptage encrypt the file using all this information and store it under ${REPO_ROOT}/.plural-crypt\\n\\nIf you have the plural console deployed, it's also recommended you run:\\n\\n```\\nplural", "start_char_idx": 68854, "end_char_idx": 72106, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1c0731df-61c6-4a9e-835a-c206da06d1ce": {"__data__": {"id_": "1c0731df-61c6-4a9e-835a-c206da06d1ce", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "e016a22b-53ba-4043-8344-2e09f106a57c", "node_type": null, "metadata": {}, "hash": "8652e9373a4fb89e6ded818e1ff573366111d77fadcc7b4218c33e5bd345dcf0"}, "3": {"node_id": "2bf3f888-cdb4-4c3d-a948-a7089331bec8", "node_type": null, "metadata": {}, "hash": "1e25e81af4815e3afc5d1c003ac46a54f129e9c5757b683b4d74fa7a52dd0d65"}}, "hash": "e9dc9d932c24cfeab462bc449bbf1a8c02a5fa0423917ea6e8a448c70c5c08f2", "text": "it's also recommended you run:\\n\\n```\\nplural build --only console\\nplural deploy\\ngit add . && git commit -m \\\"set up age\\\"\\ngit push\\n```\\n\\nto ensure it now uses age to manage its encryption key.\\n\\n### Cloning a shared repo\\n\\n[](/archive/secret-management#cloning-a-shared-repo)\\n\\nIf you're cloning a repo that's just been shared, you'll need to initialize plural cryptography locally. Fortunately, this is all done via:\\n\\n```\\nplural crypto init\\nplural crypto unlock\\n```\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/archive/secret-management.md)\",\n\"source_links\": []\n\"id\": 18,\n\"page_link\": \"https://docs.plural.sh/archive/sharing-existing-repos\",\n\"title\": \" Sharing Existing Plural Installation Repos\",\n\"text\": \"# Sharing Existing Plural Installation Repos\\n\\nLet's say that you have an existing Plural installation repo and you would like to share it with other users. A common scenario might be an individual developer playing around with Plural who would then like to expand Plural adoption across their team or company. Below, we show how to do this.\\n\\nLet's say that Alice is the original user and already has a few applications installed in their own Plural installation repo. Alice would now like to share the repo with Bob and Cory, their teammates on the machine learning infrastructure team.\\n\\n### 1. Bob and Cory Create Plural Accounts at plural.sh\\n\\n[plural.sh](https://app.plural.sh)\\n\\n[](/archive/sharing-existing-repos#_1-bob-and-cory-create-plural-accounts-at-plural-sh)\\n\\n### 2. Bob and Cory Install Plural CLI\\n\\n[](/archive/sharing-existing-repos#_2-bob-and-cory-install-plural-cli)\\n\\nThe Plural CLI and dependencies are available using a package manager for your system. For Mac, we recommend using Homebrew, although our Docker image should be usable on virtually any platform.\\n\\n```\\nbrew install pluralsh/plural/plural\\n```\\n\\nThe brew tap will install plural, alongside terraform, helm and kubectl for you. If you've already installed any of those dependencies, you can add --without-helm, --without-terraform, or --without-kubectl\\n\\nYou can also download any of our vendored binaries via curl:\\n\\n```\\ncurl -L -o plural.o 'https://app.plural.sh/artifacts/plural/plural?platform={{plat}}&arch={{arch}}'\\nchmod +x plural.o\\nmv plural.o /usr/local/bin/plural\\n```\\n\\nreplace plat and arch with any of:\\n\\nAll binaries can also be viewed in the artifacts tab of the plural repo on app.plural.sh. You can also find sha256 checksums for each there to guarantee file integrity\\n\\n[artifacts tab](https://app.plural.sh/repositories/b4ea03b9-d51f-4934-b030-ff864b720df6/artifacts)\\n\\nYou will still need to ensure helm, terraform and kubectl are properly installed, you can find installers for each", "start_char_idx": 72139, "end_char_idx": 74904, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2bf3f888-cdb4-4c3d-a948-a7089331bec8": {"__data__": {"id_": "2bf3f888-cdb4-4c3d-a948-a7089331bec8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "1c0731df-61c6-4a9e-835a-c206da06d1ce", "node_type": null, "metadata": {}, "hash": "e9dc9d932c24cfeab462bc449bbf1a8c02a5fa0423917ea6e8a448c70c5c08f2"}, "3": {"node_id": "0c94da61-44ad-42f2-b360-3d73700eed51", "node_type": null, "metadata": {}, "hash": "14ee65f372a90318253c7df48ab9492f3afc356f5522bf13874e5959d536378e"}}, "hash": "1e25e81af4815e3afc5d1c003ac46a54f129e9c5757b683b4d74fa7a52dd0d65", "text": "and kubectl are properly installed, you can find installers for each here.\\n\\n[https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)\\n\\n[https://learn.hashicorp.com/tutorials/terraform/install-cli](https://learn.hashicorp.com/tutorials/terraform/install-cli)\\n\\n[https://kubernetes.io/docs/tasks/tools/#kubectl](https://kubernetes.io/docs/tasks/tools/#kubectl)\\n\\nOnce these are installed, you'll also need to add the helm push plugin like so:\\n\\n```\\nhelm plugin install https://github.com/pluralsh/helm-push\\n```\\n\\nWe offer a docker image with the plural cli installed along with all cli dependencies: Terraform, Helm, kubectl, and all the major cloud CLIs: gcr.io/pluralsh/plural-cli:0.1.1-cloud. We also provide a decent configuration of zsh in it, so you can drive the entire plural workflow in an interactive session. The best strategy is probably to mount the config dir of the cloud provider you're using, like \\\\~/.aws, in the docker run command:\\n\\n```\\ndocker run -it --volume $HOME/.aws:/root/aws \\\\\\n               --volume $HOME/.plural:/root/.plural \\\\\\n               --volume $HOME/.ssh:/root/.ssh \\\\\\n    gcr.io/pluralsh/plural-cli:0.1.1-cloud zsh\\n```\\n\\nWe have EC2 AMI's with Plural CLI installed, along with all cloud provider CLIs, Terraform, Helm and kubectl for those interested in creating a remote environment. A registry of the AMIs can be viewed here:\\n\\n[here](https://github.com/pluralsh/plural-cli/blob/master/packer/manifest.json)\\n\\nIf there's interest in images for GCP and Azure, please to give us a shout in our discord or feel free to open a GitHub issue.\\n\\nThis doc gives more details on launching AMIs if you are unfamiliar. You'll want to select \\\"Public images\\\" within the AMI search bar and you can use the AMI id embedded in the artifact_id in our manifests, eg ami-0249247d5fc865089. Be sure to choose the one for the appropriate region.\\n\\n[This doc](https://aws.amazon.com/premiumsupport/knowledge-center/launch-instance-custom-ami/)\\n\\nThe brew tap will install Plural, alongside Terraform, Helm and kubectl for you. If you've already installed any of those dependencies, you can add --without-helm, --without-terraform, or --without-kubectl\\n\\n### 3. Alice creates a Plural service account\\n\\n[Plural service account](/operations/auth-access-control/identity-and-installations/service-accounts)\\n\\n[](/archive/sharing-existing-repos#_3-alice-creates-a-plural-service-account)\\n\\nAlice follows the instructions here to create a Plural service account under the ml-infra@plural.sh email.\\n\\n[here](/operations/auth-access-control/identity-and-installations/service-accounts)\\n\\n### 4. Alice copies down which bundles they have installed for later reference\\n\\n[](/archive/sharing-existing-repos#_4-alice-copies-down-which-bundles-they-have-installed-for-later-reference)\\n\\nAlice can find which bundles they have installed at", "start_char_idx": 74888, "end_char_idx": 77783, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0c94da61-44ad-42f2-b360-3d73700eed51": {"__data__": {"id_": "0c94da61-44ad-42f2-b360-3d73700eed51", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "2bf3f888-cdb4-4c3d-a948-a7089331bec8", "node_type": null, "metadata": {}, "hash": "1e25e81af4815e3afc5d1c003ac46a54f129e9c5757b683b4d74fa7a52dd0d65"}, "3": {"node_id": "913eba35-24c9-45d3-97cb-33c51306b748", "node_type": null, "metadata": {}, "hash": "ed3c941995d47712342f618d6d3985f83e69787dd0360ede9a2603e2921123f9"}}, "hash": "14ee65f372a90318253c7df48ab9492f3afc356f5522bf13874e5959d536378e", "text": "can find which bundles they have installed at https://app.plural.sh/explore/installed\\n\\n[https://app.plural.sh/explore/installed](https://app.plural.sh/explore/installed)\\n\\n![Image](/assets/advanced-topics/installed-bundles.png)\\n\\n### 5. Alice changes the owner of the Plural installation repo\\n\\n[](/archive/sharing-existing-repos#_5-alice-changes-the-owner-of-the-plural-installation-repo)\\n\\nAlice goes to workspace.yaml in the root of their installation repo, and changes the owner to ml-infra@plural.sh. In the example below, owner is set to nick@plural.sh on line 12.\\n\\n![Image](/assets/advanced-topics/code-block.png)\\n\\n### 6. Alice initializes Plural as service account\\n\\n[](/archive/sharing-existing-repos#_6-alice-initializes-plural-as-service-account)\\n\\nAlice runs the following command from inside their Plural installation repo:\\n\\n```\\nplural init --service-account ml-infra@plural.sh\\n```\\n\\nThis switches to the ml-infra service account user.\\n\\n### 7. Alice registers all the bundles as the service account user\\n\\n[](/archive/sharing-existing-repos#_7-alice-registers-all-the-bundles-as-the-service-account-user)\\n\\nNow that Alice is using a different user, they need to re-register each installed application with the Plural API under the service account user. For each application, Alice should run:\\n\\n```\\nplural bundle install <repo> <bundle>\\n```\\n\\nTo recall which applications they have installed, Alice should refer to the information they copied in step 4.\\n\\n###### Info:\\n\\nService accounts need to be explicitly granted install permissions in your account before you can successfully run the bundle install command. Be sure to create a role here with install permissions and add the service account to it to grant them access.\\n\\n[here](https://app.plural.sh/account/roles)\\n\\n### 8. Alice builds and deploys the Plural installation repo under the new user\\n\\n[](/archive/sharing-existing-repos#_8-alice-builds-and-deploys-the-plural-installation-repo-under-the-new-user)\\n\\nAlice should run:\\n\\n```\\nplural build\\nplural deploy\\n```\\n\\nFinally, Alice can push up these changes up to the installation repo on Github\\n\\n```\\ngit commit -m \\\"Change owner of repo\\\"\\ngit push\\n```\\n\\n###### Info:\\n\\nIf a user has oidc configured for an app, occasionally you'll need to manually delete the pods associated with their webservers as our oidc proxy does not respect config changes. This is just a matter of finding the relevant pods in the console and clicking the trash icon. For airbyte as an example, you'd want to delete all the pods in deployment/airbyte-webapp.\\n\\nIf you'd like help with this process feel free to reach out to us on discord as well!\\n\\n### 9. Alice, Bob, and Cory set up cryptographic keys for sharing\\n\\n[](/archive/sharing-existing-repos#_9-alice-bob-and-cory-set-up-cryptographic-keys-for-sharing)\\n\\nThe next step is sharing the repository's cryptography layer with any users you expect to need to use the repo locally. If you want to learn more about how Plural encrypts your repository's state, we'd definitely recommend you read our docs here\\n\\n[here](/operations/security/secret-management)\\n\\nAlice, Bob, and Cory should each run:\\n\\n```\\nplural crypto setup-keys --name", "start_char_idx": 77804, "end_char_idx": 81040, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "913eba35-24c9-45d3-97cb-33c51306b748": {"__data__": {"id_": "913eba35-24c9-45d3-97cb-33c51306b748", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "0c94da61-44ad-42f2-b360-3d73700eed51", "node_type": null, "metadata": {}, "hash": "14ee65f372a90318253c7df48ab9492f3afc356f5522bf13874e5959d536378e"}, "3": {"node_id": "aaaff49f-31ff-42d6-bfc0-e8b72b4ff4ca", "node_type": null, "metadata": {}, "hash": "e6cf8cf9ebd7fb94a6cd9f9c1d72a6c62c4d5215f14b98a0528a93d227780fe9"}}, "hash": "ed3c941995d47712342f618d6d3985f83e69787dd0360ede9a2603e2921123f9", "text": "should each run:\\n\\n```\\nplural crypto setup-keys --name <key-name>\\n```\\n\\nThis causes each user to register a public key with Plural for sharing.\\n\\n### 10. Alice encrypts encryption key for every user's keypair\\n\\n[](/archive/sharing-existing-repos#_10-alice-encrypts-encryption-key-for-every-user-s-keypair)\\n\\nAlice should now run:\\n\\n```\\nplural crypto share --email bob@plural.sh cory@plural.sh\\n```\\n\\nThis will share the encryption key Alice has with Bob and Cory.\\n\\n### 11. Bob and Cory download Plural installation repo from Github\\n\\n[](/archive/sharing-existing-repos#_11-bob-and-cory-download-plural-installation-repo-from-github)\\n\\nBob and Cory should now go to Github and download the Plural installation repos.\\n\\n```\\ngit clone <plural-installation-repo>\\n```\\n\\n### 12. Bob and Cory initialize Plural in their own workspaces as service account\\n\\n[](/archive/sharing-existing-repos#_12-bob-and-cory-initialize-plural-in-their-own-workspaces-as-service-account)\\n\\nBob and Cory should initialize Plural as the service account\\n\\n```\\nplural init --service-account ml-infra@plural.sh\\n```\\n\\n### 13. Profit!\\n\\n[](/archive/sharing-existing-repos#_13-profit)\\n\\nFrom this point on, any of Alice, Bob, or Cory can install, build, and deploy new applications and have it be reflected under the ml-infra@plural.sh service account. They should always remember to push up their changes in Git, and to pull down any new changes that their teammates may have made prior to making new installations.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/archive/sharing-existing-repos.md)\",\n\"source_links\": []\n\"id\": 20,\n\"page_link\": \"https://docs.plural.sh/debugging/application-issues\",\n\"title\": \" Application Issues\",\n\"text\": \"# Application Issues\\n\\nFiguring out what is going wrong with your deployed applications.\\n\\nIssues with applications are often due to issues with the underlying Pods. You can use kubectl commands to get, find logs for, and delete pods as necessary. Note that Plural automatically configures kubectl for use with your Plural cluster.\\n\\n## With Plural CLI\\n\\n[](/debugging/application-issues#with-plural-cli)\\n\\nTo find Pods related to an application with the CLI, you can run:\\n\\n```\\nkubectl get pods -n <application-name>\\n```\\n\\nIf you see failed Pods, you can get the logs for the Pods by running:\\n\\n```\\nkubectl logs -n <application-name> <name-of-pod>\\n```\\n\\nWe also curate a list of helpful logging shortcuts for each application, which you can use the plural logs subcommand for, eg with\\n\\n```\\nplural logs list <application> # shows all log tails available\\nplural logs tail <application> <name> # tails that specific log\\n```\\n\\nTo delete problematic Pods, run:\\n\\n```\\nkubectl delete pod <pod-name>\\n```\\n\\nIn most cases, kubernetes will restart the pod for you. You can always also run plural bounce to regenerate your deleted Pods.\\n\\n## With Plural Console\\n\\n[](/debugging/application-issues#with-plural-console)\\n\\nIf you have the Plural Console installed, you", "start_char_idx": 81028, "end_char_idx": 84071, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "aaaff49f-31ff-42d6-bfc0-e8b72b4ff4ca": {"__data__": {"id_": "aaaff49f-31ff-42d6-bfc0-e8b72b4ff4ca", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "913eba35-24c9-45d3-97cb-33c51306b748", "node_type": null, "metadata": {}, "hash": "ed3c941995d47712342f618d6d3985f83e69787dd0360ede9a2603e2921123f9"}, "3": {"node_id": "0b38387d-fa50-48fd-bbaf-8c6019c00cb5", "node_type": null, "metadata": {}, "hash": "a36febe01977a591bedfbf5926a89b6d599764cbbc6824ce6ad9ce2fcc7c5293"}}, "hash": "e6cf8cf9ebd7fb94a6cd9f9c1d72a6c62c4d5215f14b98a0528a93d227780fe9", "text": "you have the Plural Console installed, you can debug your Kubernetes Pods with the following steps:\\n\\nNavigate to the Application Overview tab, select the relevant application and click on the Components option in the menu on the left. Click on the failing component.\\n\\nThe Pods section at the top of the screen should have the failing pod; hit the red trash can button located on the right of the screen to delete it.\\n\\nHead back to the Builds tab in the sidebar and create a Bounce build to redeploy your deleted Pods.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/debugging/application-issues.md)\",\n\"source_links\": []\n\"id\": 21,\n\"page_link\": \"https://docs.plural.sh/debugging/health-checks\",\n\"title\": \" Health Checks\",\n\"text\": \"# Health Checks\\n\\nEvery application has a general application-level health check, which aggregates the statuses of all core kubernetes components and generates a digestable summary for human consumption. These are viewable in the application switcher in the admin console, or by running:\\n\\n```\\nplural watch <app-name>\\n```\\n\\nThis will generate output like:\\n\\n```\\nApplication: console (0.5.35)  READY\\nplural admin console\\n\\nComponents Ready: 15/15\\n\\nReady Components:\\n- service/console :: Ready\\n- service/console-headless :: Ready\\n- service/console-master :: Ready\\n- service/console-replica :: Ready\\n- service/plural-console :: Ready\\n- service/plural-console-repl :: Ready\\n...\\n```\\n\\nIf a component is not ready, it will also generate hints to kubectl commands which might help debug further.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/debugging/health-checks.md)\",\n\"source_links\": []\n\"id\": 22,\n\"page_link\": \"https://docs.plural.sh/debugging\",\n\"title\": \" Debugging\",\n\"text\": \"# Debugging\\n\\nSome tips to help debug your Plural installation.\\n\\n## Articles in this section:\\n\\nHealth ChecksProxiesLogs\\n\\n[Health Checks](/debugging/health-checks)\\n\\n[Proxies](/debugging/proxies)\\n\\n[Logs](/debugging/logs)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/debugging/index.md)\",\n\"source_links\": []\n\"id\": 23,\n\"page_link\": \"https://docs.plural.sh/debugging/logs\",\n\"title\": \" Logs\",\n\"text\": \"# Logs\\n\\nApplication aware log tails can be baked into any Plural application to prevent a user from having to dig through the Kubernetes API to find the specific Pod they should tail. They can be discovered and watched using:\\n\\n```\\nplural logs list <app>\\nplural logs tail <app> <name>\\n```\\n\\nNow the relevant logs will be streamed to stdout.\\n\\nThe specification for these is baked into the LogTail crd, for example:\\n\\n```\\napiVersion: platform.plural.sh/v1alpha1\\nkind: LogTail\\nmetadata:\\n  name: aws-load-balancer\\n  labels:\\nspec:\\n  limit: 50\\n  target: deployment/bootstrap-aws-load-balancer-controller\\n  follow: true\\n```\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/debugging/logs.md)\",\n\"source_links\": []\n\"id\": 24,\n\"page_link\": \"https://docs.plural.sh/debugging/proxies\",\n\"title\": \" Proxies\",\n\"text\": \"#", "start_char_idx": 84087, "end_char_idx": 87172, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0b38387d-fa50-48fd-bbaf-8c6019c00cb5": {"__data__": {"id_": "0b38387d-fa50-48fd-bbaf-8c6019c00cb5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "aaaff49f-31ff-42d6-bfc0-e8b72b4ff4ca", "node_type": null, "metadata": {}, "hash": "e6cf8cf9ebd7fb94a6cd9f9c1d72a6c62c4d5215f14b98a0528a93d227780fe9"}, "3": {"node_id": "93071aa0-0b5c-49bc-b580-cc5e9b843910", "node_type": null, "metadata": {}, "hash": "a0917970f94fce0bf548bd2eae47f43d12992c02e452fabd98009e8461f7c78a"}}, "hash": "a36febe01977a591bedfbf5926a89b6d599764cbbc6824ce6ad9ce2fcc7c5293", "text": "\" Proxies\",\n\"text\": \"# Proxies\\n\\nPlural also helps with discovering useful proxy commands for inspecting core resources. This is done via the Proxy crd. A decent example is the proxy to the admin consoles underlying Postgres database:\\n\\n```\\napiVersion: platform.plural.sh/v1alpha1\\nkind: Proxy\\nmetadata:\\n  name: db\\n  labels:\\nspec:\\n  type: db\\n  target: statefulset/console-postgresql\\n  credentials:\\n    secret: console-postgresql\\n    key: postgresql-password\\n    user: console\\n  dbConfig:\\n    name: console\\n    engine: postgres\\n    port: 5432\\n```\\n\\nThe interface is quite powerful, and supports things like fetching db credentials and initiating a sql shell, or spawning a web ui via kubectl port-forward and printing the credentials to stdout to allow a user easily log in.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/debugging/proxies.md)\",\n\"source_links\": []\n\"id\": 25,\n\"page_link\": \"https://docs.plural.sh/faq/certifications\",\n\"title\": \" Certifications\",\n\"text\": \"# Certifications\\n\\nWhat certifications does Plural have?\\n\\nPlural is currently a part of the Cloud Native Computing Foundation and Cloud Native Landscape, and is certified to be GDPR-compliant.\\n\\nWe are currently working toward SOC 2 compliance.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/faq/certifications.md)\",\n\"source_links\": []\n\"id\": 26,\n\"page_link\": \"https://docs.plural.sh/faq/local-development\",\n\"title\": \" Local Development\",\n\"text\": \"# Local Development\\n\\nDeveloping locally with Plural\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/faq/local-development.md)\",\n\"source_links\": []\n\"id\": 27,\n\"page_link\": \"https://docs.plural.sh/faq/plural-paid-tiers\",\n\"title\": \" Plural Paid Tiers\",\n\"text\": \"# Plural Paid Tiers\\n\\nWhat is included with Plural's paid offerings?\\n\\nIn addition to Plural's open-source offering, there are two paid tiers that provide additional features and support over our baseline.\\n\\nSee below for a comparison of different tiers, and you can find more information on our pricing page.\\n\\n[on our pricing page](https://www.plural.sh/pricing)\\n\\n## Plural Open-source\\n\\n[](/faq/plural-paid-tiers#plural-open-source)\\n\\nFreeUnlimited applicationsUp to 5 usersOAuth integrationCommunity support (Discord)\\n\\n## Plural Professional\\n\\n[](/faq/plural-paid-tiers#plural-professional)\\n\\n$399/Cluster/Month + $49/User/MonthEverything in open-source, plus:24 hour SLAsAdvanced user management (use of Roles, Groups, and Service Accounts)Multi-cluster managementAudit logsVPN interfacePrioritized emergency hotfixes\\n\\n## Plural Custom\\n\\n[](/faq/plural-paid-tiers#plural-custom)\\n\\nTailored pricingEverything in Plural Professional, plus:4 hour SLAsDedicated SRE supportSSO integrationCommercial licensing options\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/faq/plural-paid-tiers.md)\",\n\"source_links\": []\n\"id\": 28,\n\"page_link\":", "start_char_idx": 87189, "end_char_idx": 90161, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "93071aa0-0b5c-49bc-b580-cc5e9b843910": {"__data__": {"id_": "93071aa0-0b5c-49bc-b580-cc5e9b843910", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "0b38387d-fa50-48fd-bbaf-8c6019c00cb5", "node_type": null, "metadata": {}, "hash": "a36febe01977a591bedfbf5926a89b6d599764cbbc6824ce6ad9ce2fcc7c5293"}, "3": {"node_id": "1c5d9820-84c9-48fa-8b4a-83fcd2eff577", "node_type": null, "metadata": {}, "hash": "d5c48841aace1a77a56116eebfba3cafbc59080386361306ce2e91a69c0bb9a6"}}, "hash": "a0917970f94fce0bf548bd2eae47f43d12992c02e452fabd98009e8461f7c78a", "text": "[]\n\"id\": 28,\n\"page_link\": \"https://docs.plural.sh/first-party/manage-your-microservices\",\n\"title\": \" Manage your own microservices with Plural\",\n\"text\": \"# Manage your own microservices with Plural\\n\\nHow to manage your organization's internal applications with Plural\\n\\nThe Plural team is currently exploring a solution to allow our customers to deploy their in-house services using Plural.\\n\\nWe believe that combining the ability to quickly spin up new clusters, author simple Kubernetes manifests, and control the deployment of code changes from development to production would the process of developing on Kubernetes significantly easier.\\n\\nIf you're interested, you can find more information on our website at https://www.plural.sh/plural-deployments-early-access.\\n\\n[https://www.plural.sh/plural-deployments-early-access](https://www.plural.sh/plural-deployments-early-access)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/first-party/manage-your-microservices.md)\",\n\"source_links\": []\n\"id\": 29,\n\"page_link\": \"https://docs.plural.sh/getting-started/admin-console\",\n\"title\": \" Installing Plural Console\",\n\"text\": \"# Installing Plural Console\\n\\nSupercharge your day two operations.\\n\\n## Introduction\\n\\n[](/getting-started/admin-console#introduction)\\n\\nThe Plural Admin Console is a web application that serves as a control panel for all your Plural applications. It:\\n\\nmanages automated upgrades delivered from the Kubernetes apiserves as a thin Grafana to visualize application metrics and logsserves as a built-in K8s dashboard for all plural apps in the cluster, along with providing app-level health checkingis the touchpoint at which incidents can be filed with the owner of an application\\n\\nPlural Console is installed by default in the Cloud Shell, and we also highly recommend installing it if using the Plural CLI. It can be deployed and managed like any other application on Plural.\\n\\n###### Info:\\n\\nThe admin console is separate from app.plural.sh which is primarily a package registry.\\n\\n[app.plural.sh](https://app.plural.sh)\\n\\n## Installation\\n\\n[](/getting-started/admin-console#installation)\\n\\n#### 1. Check your Git authentication method.\\n\\n[](/getting-started/admin-console#_1-check-your-git-authentication-method)\\n\\n```\\n# show repo remote with details\\ngit remote -v\\n```\\n\\nIf the remote urls start with git@github.com then you're using SSH.\\n\\nIf the remote urls start with https then you're using HTTPS.\\n\\n#### 2. Setup for Git authentication\\n\\n[](/getting-started/admin-console#_2-setup-for-git-authentication)\\n\\nFollow the instructions here to generate a revokable personal access token (PAT). The access token needs to have write permissions. Keep track of this access token, you will need it later in the console install process. The PAT should have both push and pull permissions to the repository.\\n\\n[here](https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token)\\n\\nIf you need to update your PAT you can go to the context.yaml file at the root of your repo and modify the access_token variable within the console block.\\n\\nFollow the instructions here if you are using GitHub to generate an SSH key and add it to your ssh-agent and GitHub account. The bundle install command below will then ask you to provide an SSH key and a valid path to the key you", "start_char_idx": 90158, "end_char_idx": 93571, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1c5d9820-84c9-48fa-8b4a-83fcd2eff577": {"__data__": {"id_": "1c5d9820-84c9-48fa-8b4a-83fcd2eff577", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "93071aa0-0b5c-49bc-b580-cc5e9b843910", "node_type": null, "metadata": {}, "hash": "a0917970f94fce0bf548bd2eae47f43d12992c02e452fabd98009e8461f7c78a"}, "3": {"node_id": "16db21fb-da0a-4373-9307-a2773625a4f3", "node_type": null, "metadata": {}, "hash": "ec32f336411d7811472cc2c8d5c06bf26059c67487f782c2d9ccee0fd48c668e"}}, "hash": "d5c48841aace1a77a56116eebfba3cafbc59080386361306ce2e91a69c0bb9a6", "text": "below will then ask you to provide an SSH key and a valid path to the key you created.\\n\\n[here](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent)\\n\\nIf you need to update your SSH key for any reason (e.g. creating a new scoped deploy key) then update the private_key key in the console block of the context.yaml file at the root of your repo.\\n\\nIf you modified context.yaml to reconfigure your git auth, be sure to run:\\n\\n```\\nplural build --only console ## wires the creds into the console helm chart from context.yaml\\nplural deploy\\n```\\n\\n#### 3. Install and build the Console\\n\\n[](/getting-started/admin-console#_3-install-and-build-the-console)\\n\\nThe plural console is installable like any other plural app. To find the available bundles, just run:\\n\\n```\\nplural bundle list console\\n```\\n\\nThen once you've found an eligible bundle to install, do:\\n\\n```\\nplural bundle install console <bundle-name>\\n```\\n\\nYou will now be guided through a configuration wizard. If you have any questions about a specific parameter, refer to this document.\\n\\n[this document](/applications/console)\\n\\nOnce the bundle has installed, run:\\n\\n```\\nplural build\\n```\\n\\nThe console takes over the gitops flow of managing plural apps for you. You will be asked for the git authentication credentials you created at Step 1.\\n\\n#### 4. Deploy Console\\n\\n[](/getting-started/admin-console#_4-deploy-console)\\n\\nOnce the build has completed, run:\\n\\n```\\nplural deploy --commit \\\"installed console\\\"\\n```\\n\\n#### 5. Login to Console\\n\\n[](/getting-started/admin-console#_5-login-to-console)\\n\\nOnce the deploy finishes, it will output the url that the console has been deployed to. Navigate to that url and it will show a login screen that looks like this:\\n\\n![Image](/assets/Screen%20Shot%202021-08-19%20at%203.54.54%20PM.png)\\n\\nIf you selected (y) to OIDC, one-login has already been configured, and you'll be able to sign in with the same credentials you use for app.plural.sh.\\n\\nIf you didn't select (y) to OIDC, your login credentials for this console are different from your login credentials for app.plural.sh. You can find them inconsole/helm/console/values.yaml under the console.secrets.admin_username and console.secrets.admin_password keys.\\n\\n## Console Highlights\\n\\n[](/getting-started/admin-console#console-highlights)\\n\\nThe Console is the command center for your Plural applications, and it comes with built-in goodies. Some highlights include:\\n\\n#### Application Overview\\n\\n[](/getting-started/admin-console#application-overview)\\n\\nThe first place you'll land in the Plural Console is the Application Overview. Here you can see all installed applications, along with their version and status. Clicking into an application shows all available dashboards, runbooks, an overview of components related to that application, cost analysis, user management, and configuration options.\\n\\nThe features in this section can be used to manage applications. As an example, select applications have interactive runbooks that serve as guided tutorials for advanced operations on Plural applications.\\n\\n![Image](/assets/basic-setup-and-deployment/application-runbook.png)\\n\\n#### Builds Overview\\n\\n[](/getting-started/admin-console#builds-overview)\\n\\nThe Builds Overview", "start_char_idx": 93536, "end_char_idx": 96904, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "16db21fb-da0a-4373-9307-a2773625a4f3": {"__data__": {"id_": "16db21fb-da0a-4373-9307-a2773625a4f3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "1c5d9820-84c9-48fa-8b4a-83fcd2eff577", "node_type": null, "metadata": {}, "hash": "d5c48841aace1a77a56116eebfba3cafbc59080386361306ce2e91a69c0bb9a6"}, "3": {"node_id": "e2e8ffe0-df68-41d4-aaee-af6ae07f27d5", "node_type": null, "metadata": {}, "hash": "f5144604ca94645f295580023cf847149bd123fe98bd2c2c629670b671f36a68"}}, "hash": "ec32f336411d7811472cc2c8d5c06bf26059c67487f782c2d9ccee0fd48c668e", "text": "Builds Overview shows all scheduled, running, and completed builds. Completed builds will display the status of that build, and clicking into an individual build shows the build output and available actions to take.\\n\\n#### Nodes Overview\\n\\n[](/getting-started/admin-console#nodes-overview)\\n\\nThe Nodes Overview gives you an overview of your Kubernetes cluster, including total memory and CPU reservation, as well as the detail on each individual node.\\n\\nClicking on a node shows the pods assigned to that node, along with metadata and events associated with that node.\\n\\n#### Pods Overview\\n\\n[](/getting-started/admin-console#pods-overview)\\n\\nThe Pods Overview gives a filterable list of pods, their status, and running containers. Pod details give more information on containers, conditions, available metadata, and access to logs.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/getting-started/admin-console.md)\",\n\"source_links\": []\n\"id\": 30,\n\"page_link\": \"https://docs.plural.sh/getting-started/cloud-shell-quickstart\",\n\"title\": \" In-Browser Quickstart\",\n\"text\": \"# In-Browser Quickstart\\n\\nSetting up your first cluster in your browser using the Plural Cloud Shell.\\n\\n## Overview\\n\\n[](/getting-started/cloud-shell-quickstart#overview)\\n\\nThis guide goes over how to get started with Plural using our in-browser Cloud Shell. At the end of this tutorial, you will have:\\n\\nProvisioned a virtual shell loaded with the dependencies to run Plural.Created a Plural GitHub repository to store your configuration in.Provisioned a fully-configured Kubernetes cluster.Installed an application and all its dependencies on your Kubernetes cluster.\\n\\nin under 30 minutes, all within your browser. You can see the process in the video here or follow the instructions step-by-step, esp for unique cloud providers:\\n\\n## Login and Create the Plural Repository\\n\\n[](/getting-started/cloud-shell-quickstart#login-and-create-the-plural-repository)\\n\\nOnce you're logged in, you'll land on the Clusters Overview page. You can click on the \\\"Start onboarding\\\" button to kick off your onboarding process in your shell app.plural.sh/shell.\\n\\n[app.plural.sh/shell](https://app.plural.sh/shell)\\n\\n### Set up a Cloud Provider\\n\\n[](/getting-started/cloud-shell-quickstart#set-up-a-cloud-provider)\\n\\nChoose either the option to set up Plural using your own cloud credentials, or try our free 6-hour GCP sandbox demo. If you use your own cloud credentials, choose our Cloud Shell setup option. If you'd prefer to use the CLI, choose \\\"Local terminal\\\" and switch to the CLI quickstart.\\n\\n![Image](/assets/cloud-shell-quickstart/setup-options.png)\\n\\nYou'll then be prompted to OAuth with either GitHub or GitLab. We're just getting your permission to create a repository for Plural configuration on your behalf. Give your repository a name, being sure to select the right organization or individual account in the first box. Your repository name must be unique within your account, which will be checked before you can advance to the next step.\\n\\n![Image](/assets/cloud-shell-quickstart/github-config.png)\\n\\nPlural can be set up on AWS, GCP, or Azure. You can provide your credentials in the following screen:\\n\\n![Image](/assets/cloud-shell-quickstart/cloud-provider-info.png)\\n\\nEach cloud provider requires a slightly different set of credentials. Follow the steps below to generate the credentials for your provider.\\n\\nFor AWS, you'll need to create or use a user with AdministratorAccess and create an access key for Plural to", "start_char_idx": 96951, "end_char_idx": 100508, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e2e8ffe0-df68-41d4-aaee-af6ae07f27d5": {"__data__": {"id_": "e2e8ffe0-df68-41d4-aaee-af6ae07f27d5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "16db21fb-da0a-4373-9307-a2773625a4f3", "node_type": null, "metadata": {}, "hash": "ec32f336411d7811472cc2c8d5c06bf26059c67487f782c2d9ccee0fd48c668e"}, "3": {"node_id": "2de59512-9a90-4971-ba97-93f773f7cb10", "node_type": null, "metadata": {}, "hash": "6ff5573e58800bbfe8da3bae7f2a1cae36fa3747432aa60ecc0a943737fd3299"}}, "hash": "f5144604ca94645f295580023cf847149bd123fe98bd2c2c629670b671f36a68", "text": "need to create or use a user with AdministratorAccess and create an access key for Plural to use.\\n\\nTo create a new user, navigate to the IAM section of your AWS Console.\\n\\n![Image](/assets/cloud-shell-quickstart/iam-aws.png)\\n\\nSelect the Users tab and click Add users. You should see the following screen:\\n\\n![Image](/assets/cloud-shell-quickstart/create-user.png)\\n\\nFill in the details for your user. On the \\\"Set permissions\\\" screen, you can either choose to add your user to a group with AdministratorAccess, or attach the AdministratorAccess policy directly.\\n\\n![Image](/assets/cloud-shell-quickstart/administrator-access-aws.png)\\n\\nReview your user and hit the \\\"Create user\\\" button. Navigate to your newly created user and click the \\\"Security credentials\\\" tab. Find the section for Access keys and click \\\"Create access key\\\". You should see the following:\\n\\n![Image](/assets/cloud-shell-quickstart/access-keys-aws.png)\\n\\nChoose \\\"Command Line Interface\\\", optionally add a tag, and create your access key. Make sure to download and save your new credentials; you can then enter the Access Key ID and Secret Access Key in your Plural onboarding.\\n\\n![Image](/assets/cloud-shell-quickstart/aws-plural-config.png)\\n\\nFor GCP, you'll want to create a service account with the Owner role and generate an access key for Plural to use.\\n\\nTo create a new service account, navigate to the \\\"Service Accounts\\\" section of your GCP Console.\\n\\n![Image](/assets/cloud-shell-quickstart/service-accounts-gcp.png)\\n\\nSelect the \\\"Create Service Account\\\" from the top banner. You should see the following input fields:\\n\\n![Image](/assets/cloud-shell-quickstart/gcp-service-account-fields.png)\\n\\nFill in the details for your user. On the second step, add the Owner role for your service account.\\n\\n![Image](/assets/cloud-shell-quickstart/gcp-owner-service-account.png)\\n\\nFinish creating your service account, and you should see your new service account in the Service Accounts home page. Click the three dots at the end of the row and select \\\"Manage keys\\\" like in the screenshot below:\\n\\n![Image](/assets/cloud-shell-quickstart/create-keys-gcp.png)\\n\\nSelect \\\"Add Key\\\" and save the generated file. This will be used to configure your GCP credentials in your Plural onboarding.\\n\\n![Image](/assets/cloud-shell-quickstart/gcp-plural-config.png)\\n\\nYou can either follow along with the text instructions here or use the following video to set up your Azure installation on Plural.\\n\\nFor Azure, you'll need various fields including your Client ID, Client Secret, Subscription ID, Tenant ID, Resource Group, and Storage Account.\\n\\nTo find your Subscription ID, navigate to the home page of your Azure console and search for \\\"Subscriptions\\\". You should see a page like the following:\\n\\n![Image](/assets/cloud-shell-quickstart/subscriptions-azure.png)\\n\\nYour Subscription ID should be visible next to the Subscription name.\\n\\nNext, navigate to the Azure Active Directory section. Your Tenant ID should be displayed under \\\"Basic information\\\".\\n\\nFinally, navigate to the App registrations tab within your Directory. You should see an option to add a new registration:\\n\\n![Image](/assets/cloud-shell-quickstart/app-registrations-azure.png)\\n\\nClick to add a new registration. Fill in the details for your registration as indicated below and click the \\\"Register\\\" button.\\n\\n![Image](/assets/cloud-shell-quickstart/registration-details-azure.png)\\n\\nYour new App Registration should then be displayed. The displayed \\\"Application (client) ID\\\" will be the Client ID in your Plural configuration. Click on the option \\\"Add a", "start_char_idx": 100447, "end_char_idx": 104086, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2de59512-9a90-4971-ba97-93f773f7cb10": {"__data__": {"id_": "2de59512-9a90-4971-ba97-93f773f7cb10", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "e2e8ffe0-df68-41d4-aaee-af6ae07f27d5", "node_type": null, "metadata": {}, "hash": "f5144604ca94645f295580023cf847149bd123fe98bd2c2c629670b671f36a68"}, "3": {"node_id": "bc0c2469-4e5b-41e5-927b-90587c1c209a", "node_type": null, "metadata": {}, "hash": "007a0d2c8be81e9f80e7da10706d80c3f653a41507ef91811d684e25130c9f5e"}}, "hash": "6ff5573e58800bbfe8da3bae7f2a1cae36fa3747432aa60ecc0a943737fd3299", "text": "will be the Client ID in your Plural configuration. Click on the option \\\"Add a certificate or secret\\\" of Client credentials. Select \\\"New client secret\\\" from the screen:\\n\\n![Image](/assets/cloud-shell-quickstart/new-client-secret-azure.png)\\n\\nSet your preferred timeframe and generate your new secret. The \\\"Value\\\" field will be the Client Secret in your Plural configuration.\\n\\nYou can optionally navigate to the Resource groups section of your Azure console to retrieve a Resource Group and Storage Account, or you can enter new values in the Plural configuration which can create them for you.\\n\\nFrom here, you have two options. You either need to give your app a role on either your overall Subscription or scoped to a Resource Group. As an example, navigate to the Access Control (IAM) tab of your Subscription. Click the \\\"Role Assignments\\\" tab and Select \\\"Add\\\" at the top.\\n\\n![Image](/assets/cloud-shell-quickstart/ra-azure.png)\\n\\nSelect the Owner role, and click on \\\"Select members\\\" to search for your app name. Select the app and continue until your new Role assignment is complete. You should now see your app listed as an owner for the Subscription. The process is the same if choosing to scope to a Resource Group.\\n\\n![Image](/assets/cloud-shell-quickstart/completed-role-assignments-azure.png)\\n\\nReturn to your Plural onboarding. Enter the values noted above into your Cloud Credential configuration, and proceed to the next step.\\n\\n![Image](/assets/cloud-shell-quickstart/azure-plural-config.png)\\n\\n### Set up a Workspace\\n\\n[](/getting-started/cloud-shell-quickstart#set-up-a-workspace)\\n\\nWe'll now start setting up your Kubernetes cluster configuration. Here's a guide to the config:\\n\\ncluster: The name of your Kubernetes cluster. Name this based on what you're planning to run.\\n\\nbucket prefix: We provision S3 buckets for storing logs and state. Enter any string to help us uniquely name your buckets.\\n\\nsubdomain: We'll provision a subdomain for you to host your cluster and applications under. For example, if you choose nintendo as your subdomain and spin up an instance of Airflow, it will be available at airflow.nintendo.onplural.sh.\\n\\nYou should hit the following verification screen afterward. Hit Create once you're ready to go!\\n\\n![Image](/assets/cloud-shell-quickstart/cloud-shell-config.png)\\n\\nWhile your Cloud Shell is provisioning, double check that your repository was initialized by checking your GitHub repos. There should be a repository with an initial commit with the name that you configured.\\n\\n## Install Wizard and Cloud Shell\\n\\n[](/getting-started/cloud-shell-quickstart#install-wizard-and-cloud-shell)\\n\\nYou'll be redirected into your Cloud Shell environment after confirmation. Your Cloud Shell is where you can install applications, inspect your workspace, and run terminal commands.\\n\\nThe left-hand side of the screen is the Install Wizard, where you can configure applications for installation. Applications can be configured and installed in a fully point-and-click manner by following the available prompts. When Plural is installing your applications, you can follow progress on the right-hand side of the screen in the terminal window.\\n\\nThe terminal window is an interactive shell where you can follow along with installation progress and optionally run any additional commands you need to set up your Plural instance.\\n\\n![Image](/assets/cloud-shell-quickstart/cloud-shell-applications.png)\\n\\n### Select Applications\\n\\n[](/getting-started/cloud-shell-quickstart#select-applications)\\n\\nOnce you have successfully booted into your Cloud Shell, you can configure and install applications.\\n\\nIn the Install Wizard on the left-hand side of the screen, choose the applications you want", "start_char_idx": 104098, "end_char_idx": 107866, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bc0c2469-4e5b-41e5-927b-90587c1c209a": {"__data__": {"id_": "bc0c2469-4e5b-41e5-927b-90587c1c209a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "2de59512-9a90-4971-ba97-93f773f7cb10", "node_type": null, "metadata": {}, "hash": "6ff5573e58800bbfe8da3bae7f2a1cae36fa3747432aa60ecc0a943737fd3299"}, "3": {"node_id": "ab41f012-46ce-432c-87df-c81767fb3839", "node_type": null, "metadata": {}, "hash": "2e347c0d7ce986c67df9c9681ffd122cfb7775030ba0bc3f11661e5602593daa"}}, "hash": "007a0d2c8be81e9f80e7da10706d80c3f653a41507ef91811d684e25130c9f5e", "text": "Wizard on the left-hand side of the screen, choose the applications you want to install on your cluster. This will add these applications and their dependencies to the configuration flow, shown at the top of the Install Wizard.\\n\\n![Image](/assets/cloud-shell-quickstart/cloud-shell-applications.png)\\n\\nYou'll now be guided through a setup wizard for the applications you chose. For help with Plural Console configuration, refer to this guide for explanations on each step. For help with configuring Airflow, refer to this guide. Required fields are indicated with a star and will appear in red until they've been populated. Many fields have default values populated; you can use those defaults or provide your own inputs. Any steps without required configuration will be auto-skipped.\\n\\n[this guide](/applications/console)\\n\\n[this guide](/applications/airflow)\\n\\n![Image](/assets/cloud-shell-quickstart/airbyte-configuration.png)\\n\\nAfter configuration, you'll be provided with an overview screen of exactly which applications will be installed. When you're happy with the configuration, click Install to proceed.\\n\\n![Image](/assets/cloud-shell-quickstart/applications-install-confirm.png)\\n\\n## Provision the Kubernetes Cluster and Install Applications\\n\\n[](/getting-started/cloud-shell-quickstart#provision-the-kubernetes-cluster-and-install-applications)\\n\\nNow it's time for Plural to write all the Helm and Terraform required to bring up your Kubernetes cluster based on the config that you've entered. When you click install, Plural will be running the commands to build and deploy your cluster. Your terminal window will display the output from these ongoing operations.\\n\\n![Image](/assets/cloud-shell-quickstart/terminal-output.png)\\n\\nNow grab a coffee or your favorite hot beverage while we wait for your cloud provider to provision your infrastructure.\\n\\nWhen your applications are finished installing, you'll be able to see the domains for each application in the terminal window, and you can launch them once all components are ready.\\n\\n![Image](/assets/cloud-shell-quickstart/application-domains.png)\\n\\n### Troubleshooting\\n\\n[](/getting-started/cloud-shell-quickstart#troubleshooting)\\n\\nOccasionally errors can crop up during the build and deploy process. If your build or deploy fails, you can try re-running the commands to see if it resolves an intermittent issue. To do this, click into the terminal window and either tap the up arrow key to see the last command or type in plural build && plural deploy --commit \\\"deploying a few apps with plural\\\" to relaunch the process from where it left off and commit your changes when finished.\\n\\nIf errors persist, check out our Troubleshooting documentation or reach out to us on our community Discord for help.\\n\\n[Troubleshooting documentation](/debugging/common-errors)\\n\\n[reach out to us on our community Discord](https://discord.gg/pluralsh)\\n\\n## Check out your Deployments\\n\\n[](/getting-started/cloud-shell-quickstart#check-out-your-deployments)\\n\\n### Plural Console\\n\\n[](/getting-started/cloud-shell-quickstart#plural-console)\\n\\nOnce your cluster has completed deployment, click the Launch Console button to head over to console.YOUR_WORKSPACE.onplural.sh (or the hostname you picked) and view the console that you have provisioned. If you enabled Plural OIDC, you'll be able to quickly login using your Plural account.\\n\\nHere, you'll be able to check node health, Pod health, logs, pre-built dashboards tailored for Airflow, and more.\\n\\n![Image](/assets/cloud-shell-quickstart/console-example.png)\\n\\n### Airflow / Other", "start_char_idx": 107868, "end_char_idx": 111479, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ab41f012-46ce-432c-87df-c81767fb3839": {"__data__": {"id_": "ab41f012-46ce-432c-87df-c81767fb3839", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "bc0c2469-4e5b-41e5-927b-90587c1c209a", "node_type": null, "metadata": {}, "hash": "007a0d2c8be81e9f80e7da10706d80c3f653a41507ef91811d684e25130c9f5e"}, "3": {"node_id": "66120e66-43af-41f4-ae5c-b08de3244ec3", "node_type": null, "metadata": {}, "hash": "e0cf77e53303008cb14e5ad6347c3ef2bd23e70edab4d1ca57f8aaffe1ac5fea"}}, "hash": "2e347c0d7ce986c67df9c9681ffd122cfb7775030ba0bc3f11661e5602593daa", "text": "Airflow / Other Applications\\n\\n[](/getting-started/cloud-shell-quickstart#airflow-other-applications)\\n\\nTo access your Airflow installation, access it similarly to the console at airflow.YOUR_WORKSPACE.onplural.sh\\n\\n![Image](/assets/cloud-shell-quickstart/image-7.png)\\n\\nYou can now access your DAGs from the GitHub repo that you set up earlier. Just add any DAGs you want to use the repo and a sync will run every 5 minutes or so to pull them in.\\n\\nAccessing other applications deployed on Plural will work exactly the same way.\\n\\n## Wrapping Up\\n\\n[](/getting-started/cloud-shell-quickstart#wrapping-up)\\n\\nNow that we've set up a running cluster with Plural, we can add and remove applications to our existing cluster as we so choose.\\n\\n### Uninstalling Applications\\n\\n[](/getting-started/cloud-shell-quickstart#uninstalling-applications)\\n\\nTo uninstall an application from your cluster, run the following in your Cloud Shell:\\n\\n```\\nplural destroy <app-name>\\n```\\n\\n### Deleting your Cluster and Resetting the Cloud Shell\\n\\n[](/getting-started/cloud-shell-quickstart#deleting-your-cluster-and-resetting-the-cloud-shell)\\n\\nTo fully delete your Plural Cluster, run the following in your Cloud Shell:\\n\\n```\\nplural destroy\\n```\\n\\nThis will tear down your Plural Cluster and all attached installations.\\n\\nTo also delete the Cloud Shell itself (e.g., to change Cloud Providers or restart onboarding), click the three dots on the upper-right side of the Cloud Shell and select Delete cloud shell. This will bring up a confirmation prompt; enter \\\"delete\\\" to wipe your shell and restart onboarding from the beginning.\\n\\n### Leaving the Shell Experience\\n\\n[](/getting-started/cloud-shell-quickstart#leaving-the-shell-experience)\\n\\nIf you want to start using the CLI locally, just install the Plural CLI and run:\\n\\n[install the Plural CLI](/getting-started/quickstart#install-plural-cli)\\n\\n```\\nplural shell sync\\n```\\n\\nThis will sync your local installation with the Cloud Shell. You can then proceed to purge the shell if you wish to spin it down:\\n\\n```\\nplural shell purge\\n```\\n\\n### Feedback\\n\\n[](/getting-started/cloud-shell-quickstart#feedback)\\n\\nIf you have any feedback or questions about the experience, head over to our community Discord and drop us some feedback. The Cloud Shell is still in development and we are dedicated to perfecting the user experience, so any feedback would be immensely helpful to us.\\n\\n[head over to our community Discord](https://discord.gg/pluralsh)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/getting-started/cloud-shell-quickstart.md)\",\n\"source_links\": []\n\"id\": 31,\n\"page_link\": \"https://docs.plural.sh/getting-started/concepts\",\n\"title\": \" Concepts\",\n\"text\": \"# Concepts\\n\\nA brief overview of concepts used throughout our docs.\\n\\n## Components\\n\\n[](/getting-started/concepts#components)\\n\\nPlural deploys open-source third party applications into a net new cluster in your cloud environment. You can browse a list of all available applications in the Plural Marketplace. Plural uses Terraform to create and manage the cluster, and uses an application\\u2019s Helm charts to deploy and update that", "start_char_idx": 111531, "end_char_idx": 114728, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "66120e66-43af-41f4-ae5c-b08de3244ec3": {"__data__": {"id_": "66120e66-43af-41f4-ae5c-b08de3244ec3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "ab41f012-46ce-432c-87df-c81767fb3839", "node_type": null, "metadata": {}, "hash": "2e347c0d7ce986c67df9c9681ffd122cfb7775030ba0bc3f11661e5602593daa"}, "3": {"node_id": "a91edf2d-4dc3-43e9-a7e4-04509ea2d417", "node_type": null, "metadata": {}, "hash": "a951c0e5eeb8792408f3eada7c0af11b0081305d8e235bb59e766863fb1cca81"}}, "hash": "e0cf77e53303008cb14e5ad6347c3ef2bd23e70edab4d1ca57f8aaffe1ac5fea", "text": "and uses an application\\u2019s Helm charts to deploy and update that application.\\n\\n[Marketplace](https://www.plural.sh/marketplace)\\n\\n[Terraform](https://www.terraform.io/)\\n\\n[Helm charts](https://helm.sh/docs/topics/charts/)\\n\\nAll the necessary configuration for an individual cluster and its applications is stored in an installation repository in your Github or Gitlab account that\\u2019s created at the time of deployment.\\n\\nEach application has a set of packages that encompasses the application\\u2019s Helm charts, Terraform, and Docker images necessary to install and manage that application. These packages are stored in a repository, and a user can install that repository and the set of packages within.\\n\\nA bundle is a collection of packages that we automate the installation and configuration of that\\u2019s specific to a cloud provider. Stacks are collections of bundles (i.e., a one-shot installation of a set of applications with a guided configuration experience).\\n\\nAn installation is a specific deployment of an application onto a cluster. As an example, an organization can have multiple installations of the same application on different clusters.\\n\\nPlural OIDC (OpenID Connect) is a form of\\u00a0SSO\\u00a0that enables Plural users to add an authentication layer on top of any apps they deploy with Plural. Instead of using the application's normal login screen,\\u00a0you are instead prompted to login with Plural. This login is connected to your login at\\u00a0app.plural.sh.\\n\\n[SSO](https://www.onelogin.com/learn/how-single-sign-on-works)\\n\\n[app.plural.sh](https://app.plural.sh/?__hstc=156969850.241daab91cb4e8e8e57fdd6f2b1266f5.1675451782881.1680120796944.1680203822803.30&__hssc=156969850.1.1680203822803&__hsfp=646352474)\\n\\n## Environment\\n\\n[](/getting-started/concepts#environment)\\n\\nThe Plural Cloud Shell is an in-browser alternative to running the Plural CLI that provides a hosted interactive terminal for you to deploy and manage clusters. All CLI commands will work in the Cloud Shell, and currently each Cloud Shell instance is tied to a single cluster and account.\\n\\nThe Plural CLI is a command line interface that can be used to run all Plural commands locally.\\n\\nThe Console is a web application created by Plural that runs within a cluster deployed by Plural. The Console serves as a control panel for all your Plural applications by managing automated upgrades delivered from the Kubernetes API, showing application metrics and logs, serving as a built-in K8s dashboard, and being the touchpoint for incidents which can be filed with the owner of an application.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/getting-started/concepts.md)\",\n\"source_links\": []\n\"id\": 32,\n\"page_link\": \"https://docs.plural.sh/getting-started/manage-git-repositories\",\n\"title\": \" Manage Plural Git Repositories\",\n\"text\": \"# Manage Plural Git Repositories\\n\\nLearn Git setup, the anatomy of a Plural workspace, and how to share repositories with colleagues.\\n\\n## Articles in this section:\\n\\nSetting Up GitOpsWorkspace Encryption Guide\\n\\n[Setting Up GitOps](/getting-started/manage-git-repositories/setting-up-gitops)\\n\\n[Workspace Encryption Guide](/getting-started/manage-git-repositories/workspace-encryption)\\n\\n[Edit on", "start_char_idx": 114684, "end_char_idx": 117975, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a91edf2d-4dc3-43e9-a7e4-04509ea2d417": {"__data__": {"id_": "a91edf2d-4dc3-43e9-a7e4-04509ea2d417", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "66120e66-43af-41f4-ae5c-b08de3244ec3", "node_type": null, "metadata": {}, "hash": "e0cf77e53303008cb14e5ad6347c3ef2bd23e70edab4d1ca57f8aaffe1ac5fea"}, "3": {"node_id": "3ba692bc-3813-4b18-a302-7a00e6afe95c", "node_type": null, "metadata": {}, "hash": "aba62d6d4c42b147222443368a6b303ae58371b39aa4b317edf26f1c6228015c"}}, "hash": "a951c0e5eeb8792408f3eada7c0af11b0081305d8e235bb59e766863fb1cca81", "text": "on Github](https://github.com/pluralsh/documentation/blob/main/pages/getting-started/manage-git-repositories/index.md)\",\n\"source_links\": []\n\"id\": 33,\n\"page_link\": \"https://docs.plural.sh/getting-started/manage-git-repositories/setting-up-gitops\",\n\"title\": \" Setting up GitOps\",\n\"text\": \"# Setting up GitOps\\n\\nConfiguring your version control management to work with Plural.\\n\\n## Overview\\n\\n[](/getting-started/manage-git-repositories/setting-up-gitops#overview)\\n\\nPlural defines all of your infrastructure as code, using Helm, Terraform, and YAML files to denote what is being deployed into your cloud provider or on-prem environment. To manage versioning safely, we use a GitOps practice that requires you to store these files in their own Git repository.\\n\\nIf you are using the Plural Cloud Shell, we handle setting this up for you.\\n\\n[Plural Cloud Shell](https://app.plural.sh/shell)\\n\\n###### Info:\\n\\nCurrently we're limited to a one cluster to one repo mapping, but eventually that will be relaxed. We also strongly urge users to store installations in a fresh, separate repository to avoid our automation trampling existing files.\\n\\nPlural currently supports the following version control providers:\\n\\nGitHubGitLabBitbucket (Follow Manual Git Setup below to use Bitbucket)\\n\\n[GitHub](https://github.com/)\\n\\n[GitLab](https://about.gitlab.com/)\\n\\n[Bitbucket](https://bitbucket.org/product/)\\n\\nSupport for the following providers is on our roadmap:\\n\\nMercurial\\n\\n[Mercurial](https://www.mercurial-scm.org/)\\n\\nYou have two options when setting up a Git repository for use with a Plural workspace:\\n\\nUsing Plural OAuth by running plural init anywhere. (Recommended)Manual Git Setup with an empty, configured Git repository beforehand.\\n\\n## Using Plural OAuth\\n\\n[](/getting-started/manage-git-repositories/setting-up-gitops#using-plural-oauth)\\n\\nSupported for: (GitHub, GitLab)\\n\\nTo have Plural set up your Git repository, you'll need to have SSH set up with your version control provider. Then, run:\\n\\n```\\nplural init\\n```\\n\\nThis will kick off the process of setting up your Plural workspace. Once you've gone through a few setup steps, you'll get the following prompt:? you're attempting to setup plural outside a git repository. would you like us to set one up for you here?\\n\\nEnter Y, pick your version control provider of choice, and you will receive an OAuth screen to let Plural create and manage repositories on your behalf. Note, Plural can only manage repositories that it has created.\\n\\nIf everything goes well, it should look like this:\\n\\n![Image](/assets/basic-setup-and-deployment/gitops-terminal.png)\\n\\n## Manual Git Setup\\n\\n[](/getting-started/manage-git-repositories/setting-up-gitops#manual-git-setup)\\n\\nSupported for: (GitHub, GitLab, Bitbucket)\\n\\nTo set up a Git repository yourself, you'll need a fresh repository with the following requirements:\\n\\nCloned with SSHMust have an initial commitMust be in sync with the upstream/origin repository\\n\\nIf the requirements aren't fulfilled, you'll hit an error in the plural init setup process. To get started, follow these steps:\\n\\nAnd you should be good to go!\\n\\n## GitOps Best", "start_char_idx": 118032, "end_char_idx": 121209, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3ba692bc-3813-4b18-a302-7a00e6afe95c": {"__data__": {"id_": "3ba692bc-3813-4b18-a302-7a00e6afe95c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "a91edf2d-4dc3-43e9-a7e4-04509ea2d417", "node_type": null, "metadata": {}, "hash": "a951c0e5eeb8792408f3eada7c0af11b0081305d8e235bb59e766863fb1cca81"}, "3": {"node_id": "fea4d7ff-511f-4641-9d33-461b5730e900", "node_type": null, "metadata": {}, "hash": "a79d56ce22844a9588456add5ea9f8ef520089e5011337f5ec9e3374e6a3370e"}}, "hash": "aba62d6d4c42b147222443368a6b303ae58371b39aa4b317edf26f1c6228015c", "text": "you should be good to go!\\n\\n## GitOps Best Practices\\n\\n[](/getting-started/manage-git-repositories/setting-up-gitops#gitops-best-practices)\\n\\nPlural has three basic steps to the deploy process:\\n\\nWhen plural build is completed, you'll notice all of your new configuration has been created in your local repository. In this state, the files are not yet committed or pushed up to your origin repository.\\n\\nYou can manually commit and push the files yourself, but we recommend using the --commit CLI argument when running plural deploy\\n\\n```\\nplural deploy --commit \\\"deploying console and dagster\\\"\\n```\\n\\nThis will commit and push up your configuration changes for you to your origin repository, using the commit message you've specified.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/getting-started/manage-git-repositories/setting-up-gitops.md)\",\n\"source_links\": []\n\"id\": 34,\n\"page_link\": \"https://docs.plural.sh/getting-started/manage-git-repositories/sharing-git-repositories\",\n\"title\": \" Sharing Your Git Repositories\",\n\"text\": \"# Sharing Your Git Repositories\\n\\nHow to securely share a Plural workspace and Git repository with a collaborator.\\n\\nPlural reimplements git-crypt in its management of secret data within git. This provides transparent file access to users with the repo's AES key, along with full support for tooling like local diffs, while still providing full obfuscation of secret data when pushed to remote.\\n\\n[git-crypt](https://github.com/AGWA/git-crypt)\\n\\nThe encryption key is automatically generated by Plural and stored in Plural's config directory ~/.plural. We provide commands for importing/exporting the key, as well as a mechanism for sharing the repo with multiple users using the successor to PGP, age.\\n\\n[age](https://github.com/FiloSottile/age)\\n\\n## Sharing a Plural Git Repository\\n\\n[](/getting-started/manage-git-repositories/sharing-git-repositories#sharing-a-plural-git-repository)\\n\\n### Register a public key\\n\\n[](/getting-started/manage-git-repositories/sharing-git-repositories#register-a-public-key)\\n\\nTo register a key for your current machine, run:\\n\\n```\\nplural crypto setup-keys --name <name-for-key-pair>\\n```\\n\\nThis will generate a new keypair and automatically register the public key with the Plural API. You should be able to see it listed here in our web app and the keypair will be stored in ~/.plural/identity.\\n\\n[here](https://app.plural.sh/me/edit/keys)\\n\\n### Share the repository\\n\\n[](/getting-started/manage-git-repositories/sharing-git-repositories#share-the-repository)\\n\\nTo share a repo, use the following command:\\n\\n```\\nplural crypto share --email <email1> --email <email2>\\n```\\n\\n###### Info:\\n\\n--email refers to a user's email associated with their Plural account\\n\\nThis will do a few things:\\n\\ncreate a base identity to encrypt the repo's current AES key and store it in a git-ignored place under ${REPO_ROOT}/.plural-crypt.register all the users who have access in a yaml file under ${REPO_ROOT}/.plural-cryptencrypt the file using all this information and store it under ${REPO_ROOT}/.plural-crypt\\n\\nIf you have the Plural Console deployed, run:\\n\\n```\\nplural build --only", "start_char_idx": 121176, "end_char_idx": 124379, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fea4d7ff-511f-4641-9d33-461b5730e900": {"__data__": {"id_": "fea4d7ff-511f-4641-9d33-461b5730e900", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "3ba692bc-3813-4b18-a302-7a00e6afe95c", "node_type": null, "metadata": {}, "hash": "aba62d6d4c42b147222443368a6b303ae58371b39aa4b317edf26f1c6228015c"}, "3": {"node_id": "3e83b2f7-7daa-40a8-9223-45fa41c10839", "node_type": null, "metadata": {}, "hash": "729603d17013c2c645562541bf1518b140f525d5ea39710ee0fe9154beaebf8a"}}, "hash": "a79d56ce22844a9588456add5ea9f8ef520089e5011337f5ec9e3374e6a3370e", "text": "Console deployed, run:\\n\\n```\\nplural build --only console\\nplural deploy\\ngit add . && git commit -m \\\"set up encryption\\\"\\ngit push\\n```\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/getting-started/manage-git-repositories/sharing-git-repositories.md)\",\n\"source_links\": []\n\"id\": 35,\n\"page_link\": \"https://docs.plural.sh/getting-started/manage-git-repositories/workspace-encryption\",\n\"title\": \" Workspace Encryption Guide\",\n\"text\": \"# Workspace Encryption Guide\\n\\nHow to use `plural crypto backups` to create, list, and restore workspace backups.\\n\\nOut of the box, Plural encrypts all configuration in your Plural workspace and stores an encryption key on your local machine. This means that if anyone gets a copy of your Plural Git repository/workspace, all sensitive information will appear encrypted to them.\\n\\nIf you are changing machines or collaborating with colleagues, you'll need to know how to create and restore from the workspace encryption backups.\\n\\n## Your encryption key\\n\\n[](/getting-started/manage-git-repositories/workspace-encryption#your-encryption-key)\\n\\nWhen you initialize your Plural repository, Plural creates a directory in your home directory called .plural. Within this directory is a file called key, which is your local encryption key. This key is required to decrypt any sensitive configuration within your Plural workspace.\\n\\nTo import a preexisting key, you can run the following command:\\n\\n```\\ncat /path/to/key | plural crypto import\\n```\\n\\n## Encryption backup operations\\n\\n[](/getting-started/manage-git-repositories/workspace-encryption#encryption-backup-operations)\\n\\n### Create workspace backup\\n\\n[](/getting-started/manage-git-repositories/workspace-encryption#create-workspace-backup)\\n\\nTo create a backup for your local key, run:\\n\\n```\\nplural crypto backups create\\n```\\n\\nIn the case that you lose your local encryption key, this will allow you to decrypt your repo.\\n\\n### List backups\\n\\n[](/getting-started/manage-git-repositories/workspace-encryption#list-backups)\\n\\nTo list your workspace backups that you have created, run:\\n\\n```\\nplural crypto backups list\\n```\\n\\n### Restore from backup\\n\\n[](/getting-started/manage-git-repositories/workspace-encryption#restore-from-backup)\\n\\nIn the event that you lose your key file or are on a new machine, you can restore from a backup that you have created with this command:\\n\\n```\\nplural crypto backups restore\\n```\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/getting-started/manage-git-repositories/workspace-encryption.md)\",\n\"source_links\": []\n\"id\": 36,\n\"page_link\": \"https://docs.plural.sh/getting-started/manage-git-repositories/your-plural-workspace\",\n\"title\": \" Your Plural Workspace\",\n\"text\": \"# Your Plural Workspace\\n\\nLearn about your Plural Git workspaces and how to manage them.\\n\\nPlural ensures the state of all installed applications are stored in a git repository, under a common format. A typical workspace should have a similar layout to the following example:\\n\\n```\\n\\ud83d\\udce6installation-repository\\n\\u2523", "start_char_idx": 124370, "end_char_idx": 127481, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3e83b2f7-7daa-40a8-9223-45fa41c10839": {"__data__": {"id_": "3e83b2f7-7daa-40a8-9223-45fa41c10839", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "fea4d7ff-511f-4641-9d33-461b5730e900", "node_type": null, "metadata": {}, "hash": "a79d56ce22844a9588456add5ea9f8ef520089e5011337f5ec9e3374e6a3370e"}, "3": {"node_id": "f4399db6-a47c-4cea-a440-922f033f1af7", "node_type": null, "metadata": {}, "hash": "07e2133812783521e66132e66a4831e7c791c90f5d3c52ce8158c3898d195a72"}}, "hash": "729603d17013c2c645562541bf1518b140f525d5ea39710ee0fe9154beaebf8a", "text": "\\ud83d\\udcdc.gitattributes\\n\\u2523 \\ud83d\\udcdc.gitignore\\n\\u2523 \\ud83d\\udcdccontext.yaml\\n\\u2517 \\ud83d\\udcdcworkspace.yaml\\n```\\n\\n## Top level files\\n\\n[](/getting-started/manage-git-repositories/your-plural-workspace#top-level-files)\\n\\n### context.yaml\\n\\n[](/getting-started/manage-git-repositories/your-plural-workspace#context-yaml)\\n\\nWhen you run plural bundle install <app-name> <bundle> and go through the configuration for an application, that information is stored here. In advanced use cases, it can also be manually edited if you want to apply configuration beyond what the bundle provided.\\n\\n### workspace.yaml\\n\\n[](/getting-started/manage-git-repositories/your-plural-workspace#workspace-yaml)\\n\\nBase cloud provider setup for this repository is stored here. On each app installation, you have the option of inheriting this setup, or reconfiguring for the specific app.\\n\\n### .gitattributes\\n\\n[](/getting-started/manage-git-repositories/your-plural-workspace#gitattributes)\\n\\nThis file specifies the filters that drive secret encryption. In general, do not manually edit this file.\\n\\n## Application folders\\n\\n[](/getting-started/manage-git-repositories/your-plural-workspace#application-folders)\\n\\nThese files exist in every application directory that you install with plural bundle install <app-name> <bundle>. To see these files for a specific application, cd <APP-NAME>.\\n\\n### Helm\\n\\n[](/getting-started/manage-git-repositories/your-plural-workspace#helm)\\n\\nhelm/<application_name>\\n\\nWhen installing an application with Plural, the Kubernetes resources are deployed using Helm. The Plural CLI creates a second Helm chart that wraps the chart(s) downloaded from the Plural API for every application.\\n\\n[Helm](https://helm.sh/)\\n\\nThe values.yaml file contains all the configurations specific for this deployment.\\n\\nThe values.yaml file is created during the plural build command using the user inputs from the plural bundle install <app-name> <bundle> command.\\n\\n### Terraform\\n\\n[](/getting-started/manage-git-repositories/your-plural-workspace#terraform)\\n\\nterraform/*\\n\\nThe cloud resources required for an application installed through Plural are created using Terraform.\\n\\nThe main entrypoint for the Terraform configuration is terraform/main.tf. Similar to the values.yaml file for Helm, the terraform/main.tf is created during the plural build command for every application you have installed.\\n\\n### Build and Deploy files\\n\\n[](/getting-started/manage-git-repositories/your-plural-workspace#build-and-deploy-files)\\n\\nOur build and deploy files are written in HCL, HashiCorp's proprietary configuration language that interacts with Terraform.\\n\\n{build | deploy}.hcl\\n\\nThe build/deploy/diff files manage two things:\\n\\nthe steps needed to build or apply a specific application in Pluralchange detection between runs\\n\\nWe automatically detect if changes have been made to your Terraform files, which enables us to ignore unneeded Terraform commands that take a long time to execute.\\n\\n### Miscellaneous Directories and Files\\n\\n[](/getting-started/manage-git-repositories/your-plural-workspace#miscellaneous-directories-and-files)\\n\\n.pluralignore\\n\\nThis file tells the Plural CLI to ignore", "start_char_idx": 127528, "end_char_idx": 130768, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f4399db6-a47c-4cea-a440-922f033f1af7": {"__data__": {"id_": "f4399db6-a47c-4cea-a440-922f033f1af7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "3e83b2f7-7daa-40a8-9223-45fa41c10839", "node_type": null, "metadata": {}, "hash": "729603d17013c2c645562541bf1518b140f525d5ea39710ee0fe9154beaebf8a"}, "3": {"node_id": "3ad83a4d-9302-46a9-bb05-2eb8de9cc1f9", "node_type": null, "metadata": {}, "hash": "ff4420e9e736d4269aa35373fb85996c4c3d0a124074384ccad9162d6e3b1d24"}}, "hash": "07e2133812783521e66132e66a4831e7c791c90f5d3c52ce8158c3898d195a72", "text": "file tells the Plural CLI to ignore certain paths during change detection, is similar to a .gitignore file for Git.\\n\\nmanifest.yaml\\n\\nMetadata about the plural application.\\n\\noutput.yaml\\n\\nOutputs from various tools (Terraform, Helm, etc) that can be imported and used in other applications.\\n\\ncrds/\\n\\nThe crds directory contains all the CRDs for the Helm chart. We manage these through the Plural CLI rather than Helm so we can do more advanced change detection.\\n\\n.plural/\\n\\nThe .plural folder within each application folder container two files: ONCE and NONCE. These files are used as targets for change detection by the Plural CLI.\\n\\nThe NONCE file is used for commands that should be executed a single time after a plural build command. The ONCE file is used for commands that should only be executed the first time an application is deployed.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/getting-started/manage-git-repositories/your-plural-workspace.md)\",\n\"source_links\": []\n\"id\": 37,\n\"page_link\": \"https://docs.plural.sh/getting-started/openid-connect\",\n\"title\": \" OpenID Connect\",\n\"text\": \"# OpenID Connect\\n\\nWhat is OIDC and how do you set it up?\\n\\nWhen you run plural bundle install to install an application, you may be asked about whether or not you want to enable Plural OIDC for that application.\\n\\n## What is OpenID Connect?\\n\\n[](/getting-started/openid-connect#what-is-openid-connect)\\n\\nOpenID Connect is a form of SSO that enables Plural users to add an authentication layer on top of any apps they deploy with Plural. Instead of using the application's normal login screen, you are instead prompted to login with Plural. This login is connected to your login at app.plural.sh. For example, if you have enabled OIDC, if you are logged in and try to access airbyte.$YOUR_WORKSPACE.onplural.sh, this pops up:\\n\\n[SSO](https://www.onelogin.com/learn/how-single-sign-on-works)\\n\\n[app.plural.sh](https://app.plural.sh)\\n\\n![Image](/assets/setup-oidc/image-1.png)\\n\\nIf you aren't logged in, you'll see this screen when you navigate to your application:\\n\\n![Image](/assets/setup-oidc/image-2.png)\\n\\nAll Plural applications have the capability to create a custom OIDC provider for a user's installation. This allows Plural to become a unified identity management solution for your entire open source portfolio. We have even automated upgrades for OIDC configuration changes, so the setup process is entirely turnkey.\\n\\n## Login Policies\\n\\n[](/getting-started/openid-connect#login-policies)\\n\\nThe provider is mapped to a set of users+groups, just like a Plural role, and if that login policy does not pass, you cannot complete the OIDC login and consent flow. Plural ID tokens will include core user information along with the plural groups they belong to, allowing for seamless identity mapping onto the applications governed by Plural.\\n\\n## Supported Applications\\n\\n[](/getting-started/openid-connect#supported-applications)\\n\\nApplications that currently support Plural OIDC are:\\n\\nPlural Console - includes group provisioning as wellAirflowAirbyteSentryGitLabGrafanaArgo CD\\n\\n[Plural", "start_char_idx": 130740, "end_char_idx": 133893, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3ad83a4d-9302-46a9-bb05-2eb8de9cc1f9": {"__data__": {"id_": "3ad83a4d-9302-46a9-bb05-2eb8de9cc1f9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "f4399db6-a47c-4cea-a440-922f033f1af7", "node_type": null, "metadata": {}, "hash": "07e2133812783521e66132e66a4831e7c791c90f5d3c52ce8158c3898d195a72"}, "3": {"node_id": "b978f671-5bfc-4a6a-9282-a2ddc6182ddc", "node_type": null, "metadata": {}, "hash": "be15ba65f21b7e9db8ece46c4f2b9a422f7d809e5dfb7f0c66164c4820eab72e"}}, "hash": "ff4420e9e736d4269aa35373fb85996c4c3d0a124074384ccad9162d6e3b1d24", "text": "CD\\n\\n[Plural Console](https://www.plural.sh/applications/console)\\n\\n[Airflow](https://www.plural.sh/applications/airflow)\\n\\n[Airbyte](https://www.plural.sh/applications/airbyte)\\n\\n[Sentry](https://www.plural.sh/applications/sentry)\\n\\n[GitLab](https://www.plural.sh/applications/gitlab)\\n\\n[Grafana](https://www.plural.sh/applications/grafana)\\n\\n[Argo CD](https://www.plural.sh/applications/argo-cd)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/getting-started/openid-connect.md)\",\n\"source_links\": []\n\"id\": 38,\n\"page_link\": \"https://docs.plural.sh/getting-started/plural-difference\",\n\"title\": \" What makes Plural different?\",\n\"text\": \"# What makes Plural different?\\n\\nA brief overview of Plural's differentiation.\\n\\n## Plural Differentiators\\n\\n[](/getting-started/plural-difference#plural-differentiators)\\n\\nPlural was built to make deploying and managing applications on Kubernetes as easy as possible. A few things set us apart:\\n\\nPlural is self-hosted. You retain full control over your deployments in your cloud.We're open-source. We were built as an open-source solution from day 1, and allow for full transparency of what our software is doing.Bring your own cloud. We support deploying on all major cloud providers, including AWS, Azure, and GCP.We perform automated testing and upgrades of supported applications, including all dependency management. Set your preferred upgrade channels and we'll do the hard work for you.We're entirely portable. Plural is built on common open-source tools, so if you don't like us, you can always eject your application from Plural and use it as you please.We provide out-of-the-box Day 2 operational workflows. Monitor, manage, and scale your configuration with ease to meet changing demands of your business.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/getting-started/plural-difference.md)\",\n\"source_links\": []\n\"id\": 39,\n\"page_link\": \"https://docs.plural.sh/getting-started/quickstart\",\n\"title\": \" CLI Quickstart\",\n\"text\": \"# CLI Quickstart\\n\\nA guide to getting up and running with Plural using our CLI in under 30 minutes.\\n\\n## Overview\\n\\n[](/getting-started/quickstart#overview)\\n\\nThis is a guide on how to get Plural running using our CLI. If you prefer an in-browser Cloud Shell experience with all the dependencies loaded, check out our Quickstart Guide for Cloud Shell here. You can see the process in the video here or follow the instructions step-by-step, especially for unique cloud providers:\\n\\n[here](/getting-started/cloud-shell-quickstart)\\n\\n## Prerequisites\\n\\n[](/getting-started/quickstart#prerequisites)\\n\\nYou will need the following things to successfully get up and running with Plural:\\n\\nA cloud account: Plural will deploy directly into your cloud provider of choice. We currently support AWS, GCP and Azure. Follow this guide to make sure it's set up correctly.Your cloud provider CLI installed and configured: Plural will leverage your cloud provider's CLI tooling in places. If need to install the cloud provider CLI, or aren't sure if it's properly configured you can follow this guide.A GitHub/GitLab account: Plural manages the state of your infrastructure using a git-ops workflow, so you'll need an account with a version control management system. Follow the instructions in our GitOps resources for more information.\\n\\n[this", "start_char_idx": 133910, "end_char_idx": 137297, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b978f671-5bfc-4a6a-9282-a2ddc6182ddc": {"__data__": {"id_": "b978f671-5bfc-4a6a-9282-a2ddc6182ddc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "3ad83a4d-9302-46a9-bb05-2eb8de9cc1f9", "node_type": null, "metadata": {}, "hash": "ff4420e9e736d4269aa35373fb85996c4c3d0a124074384ccad9162d6e3b1d24"}, "3": {"node_id": "3f90e5b7-9787-466d-b0bb-9554681042d7", "node_type": null, "metadata": {}, "hash": "2206b78fdbaa7239dc3eddabb91c5f7ba86360b31b42e9139b0704d6297beba1"}}, "hash": "be15ba65f21b7e9db8ece46c4f2b9a422f7d809e5dfb7f0c66164c4820eab72e", "text": "the instructions in our GitOps resources for more information.\\n\\n[this guide](/reference/configuring-cloud-provider)\\n\\n[this guide](/reference/configuring-cloud-provider)\\n\\n[in our GitOps resources](/getting-started/manage-git-repositories/setting-up-gitops)\\n\\n## Install Plural CLI\\n\\n[](/getting-started/quickstart#install-plural-cli)\\n\\nThe Plural CLI and its dependencies are available using a package manager for your system. For Mac, we recommend using Homebrew. For other operating systems, curl and our Docker image should work universally.\\n\\n[Homebrew](https://brew.sh/)\\n\\nThe brew tap will install Plural, alongside Terraform, Helm and kubectl for you. If you've already installed any of those dependencies, you can add --without-helm, --without-terraform, or --without-kubectl\\n\\n```\\nbrew install pluralsh/plural/plural\\n```\\n\\n###### Warning:\\n\\nBefore you proceed, make sure that your cloud provider CLI is properly configured and updated to the latest version. If you aren't sure about how to do that, refer to this guide. If it is not configured correctly, Plural will fail and won't be able to create resources on your behalf.\\n\\n[this guide](/reference/configuring-cloud-provider)\\n\\nYou can download the binaries attached to our GitHub releases here. There will be binaries for linux, windows, and mac and all compatible platforms.\\n\\n[here](https://github.com/pluralsh/plural-cli/releases)\\n\\nFor example, you can download v0.6.2 for Darwin arm64 via:\\n\\n```\\nVSN=$(curl --silent -qI https://github.com/pluralsh/plural-cli/releases/latest | awk -F '/' '/^location/ {print  substr($NF, 1, length($NF)-1)}')\\ncurl -L -o plural.tgz 'https://github.com/pluralsh/plural-cli/releases/download/${VSN}/plural-cli_${VSN#v}_Darwin_arm64.tar.gz'\\ntar -xvf plural.tgz\\nchmod +x plural\\nmv plural /usr/local/bin/plural\\n```\\n\\n###### Info:\\n\\nBe sure to download the CLI version for your target OS/architecture, the above example is only valid for ARM Mac's\\n\\nYou will still need to ensure helm, terraform and kubectl are properly installed, you can find installers for each here\\n\\n[https://helm.sh/docs/intro/install/](https://helm.sh/docs/intro/install/)\\n\\n[https://learn.hashicorp.com/tutorials/terraform/install-cli](https://learn.hashicorp.com/tutorials/terraform/install-cli)\\n\\n[https://kubernetes.io/docs/tasks/tools/#kubectl](https://kubernetes.io/docs/tasks/tools/#kubectl)\\n\\n###### Warning:\\n\\nBefore you proceed, make sure that your cloud provider CLI is properly configured and updated to the latest version. If you aren't sure about how to do that, refer to this guide. If it is not configured correctly, Plural will fail and won't be able to create resources on your behalf.\\n\\n[this guide](/reference/configuring-cloud-provider)\\n\\n## Create your Plural Repo\\n\\n[](/getting-started/quickstart#create-your-plural-repo)\\n\\nPlural stores all configuration artifacts within a Git repository that we will create on your behalf. Run this command within the directory that you want to store your configuration in:\\n\\n```\\nplural init\\n```\\n\\nThe Plural CLI will then guide you through a workflow using", "start_char_idx": 137248, "end_char_idx": 140375, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3f90e5b7-9787-466d-b0bb-9554681042d7": {"__data__": {"id_": "3f90e5b7-9787-466d-b0bb-9554681042d7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "b978f671-5bfc-4a6a-9282-a2ddc6182ddc", "node_type": null, "metadata": {}, "hash": "be15ba65f21b7e9db8ece46c4f2b9a422f7d809e5dfb7f0c66164c4820eab72e"}, "3": {"node_id": "59f5ffca-3d64-4a44-a815-06518885e511", "node_type": null, "metadata": {}, "hash": "22e97c652c740d48e0c822146d7f22048c704a8bdf05c4aeb2892ae3e1944945"}}, "hash": "2206b78fdbaa7239dc3eddabb91c5f7ba86360b31b42e9139b0704d6297beba1", "text": "Plural CLI will then guide you through a workflow using GitHub/GitLab OAuth to create a repository on your behalf.\\n\\n###### Info:\\n\\nIf you'd prefer to set up Git manually vs. using OAuth, refer to our guide on setting up Gitops.\\n\\n[setting up Gitops](/getting-started/manage-git-repositories/setting-up-gitops)\\n\\nAlong the plural init workflow, we will set the Git attributes to configure encryption and configure your cloud provider for this installation.\\n\\nYou will also be asked whether you want to use Plural's domain service and if so, what you want the subdomain to be. We recommend that you use our DNS service if you don't have any security reasons that prevent you from doing so. The hostname that you configure with us will determine where your applications are hosted. For example, if you enter singular.onplural.sh, your applications will be available at $APP_NAME.singular.onplural.sh.\\n\\nThis process will generate a workspace.yaml file at the root of your repo that stores your cloud provider configuration information.\\n\\n###### Info:\\n\\nCurrently we're limited to a one cluster to one repo mapping, but eventually that will be relaxed. We also strongly urge users to store installations in a fresh, separate repository to avoid our automation trampling existing files.\\n\\n## Install Plural Applications\\n\\n[](/getting-started/quickstart#install-plural-applications)\\n\\nTo view the applications you can install on Plural, head to this link.\\n\\n[this link](https://app.plural.sh/explore/public)\\n\\nOnce you've selected your applications, you can install Plural bundles using our interactive GUI. To start the GUI, run:\\n\\n```\\nplural install\\n```\\n\\nYou should see a window pop up like the below:\\n\\n![Image](/assets/cli-quickstart/local-installer.png)\\n\\nYou can then follow a guided flow to select and configure your applications.\\n\\nAlternatively, you can run plural repos list on the CLI or Cloud Shell and find the bundle name specific to your cloud provider.\\n\\nRun plural bundle list <app-name> to find installation commands and information about each application available for install. For example, to list the bundle information for the Plural console, a powerful Kubernetes control plane:\\n\\nHere's what we get from running plural bundle list console:\\n\\n```\\n+-------------+--------------------------------+----------+--------------------------------+\\n|    NAME     |          DESCRIPTION           | PROVIDER |        INSTALL COMMAND         |\\n+-------------+--------------------------------+----------+--------------------------------+\\n| console-aws | Deploys console on an EKS      | AWS      | plural bundle install console  |\\n|             | cluster                        |          | console-aws                    |\\n+-------------+--------------------------------+----------+--------------------------------+\\n```\\n\\nTo install applications on Plural, run:\\n\\n```\\nplural bundle install <app-name> <bundle-name>\\n```\\n\\nWe can try this out by installing the Plural Console:\\n\\n```\\nplural bundle install console console-aws\\n```\\n\\n```\\nplural bundle install console console-gcp\\n```\\n\\n```\\nplural bundle install console console-azure\\n```\\n\\nAs of CLI version 0.6.19, the bundle name can be inferred from primary bundles, optionally shortening the command", "start_char_idx": 140393, "end_char_idx": 143694, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "59f5ffca-3d64-4a44-a815-06518885e511": {"__data__": {"id_": "59f5ffca-3d64-4a44-a815-06518885e511", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "3f90e5b7-9787-466d-b0bb-9554681042d7", "node_type": null, "metadata": {}, "hash": "2206b78fdbaa7239dc3eddabb91c5f7ba86360b31b42e9139b0704d6297beba1"}, "3": {"node_id": "ba839fba-4a0a-4066-b8cc-3ec3a2978c4c", "node_type": null, "metadata": {}, "hash": "a14e3a8add156207af81aace70943d11b32bd51fa5cf579b8cc5402176d955d5"}}, "hash": "22e97c652c740d48e0c822146d7f22048c704a8bdf05c4aeb2892ae3e1944945", "text": "the bundle name can be inferred from primary bundles, optionally shortening the command to:\\n\\n```\\nplural bundle install console\\n```\\n\\nAfter running the install command, you will be asked a few questions about how your app will be configured, including whether you want to enable Plural OIDC (single sign-on). Unless you don't wish to use Plural as an identity provider due to internal company security requirements, you should enter (Y). This will enable you to use your existing app.plural.sh login information to access Plural-deployed applications. This will add an extra layer of security for applications without built-in authentication.\\n\\nUltimately all the values you input at this step will be stored in a file called context.yaml at the root of your repo.\\n\\n## Build and Deploy your Kubernetes Cluster and Applications\\n\\n[](/getting-started/quickstart#build-and-deploy-your-kubernetes-cluster-and-applications)\\n\\nWith all bundles installed, run:\\n\\n```\\nplural build\\nplural deploy --commit \\\"initial deploy\\\"\\n```\\n\\nThis will generate all deployment artifacts in the repo, then deploy them in dependency order.\\n\\nIt is common for plural deploy to take a fair amount of time, as is the case with most Terraform and cloud infrastructure deployments. Network disconnects can cause potential issues as a result. If you're running on a spotty network, or would like to step out while it's running we recommend running it in tmux.\\n\\n[tmux](https://github.com/tmux/tmux/wiki)\\n\\nOnce plural deploy has completed, you should be ready to log in to your application at {app-name}.{domain-name}.\\n\\n###### Warning:\\n\\nYou may experience a delayed creation of your SSL certs for your applications. ZeroSSL currently may take up to 24 hours to provide you your certs.\\n\\nAnd you are done! You now have a fully-configured Kubernetes cluster and are free to install applications on it to your heart's content. If you want to take down any of your individual applications, run plural destroy <APP-NAME>. If you're just testing us out and want to take down the entire thing, run plural destroy.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/getting-started/quickstart.md)\",\n\"source_links\": []\n\"id\": 40,\n\"page_link\": \"https://docs.plural.sh/getting-started/video-cli-quickstart\",\n\"title\": \" Video: Installing with CLI\",\n\"text\": \"# Video: Installing with CLI\\n\\nA short video on installing applications on Plural with the CLI\\n\\nIn under 10 minutes, you will learn how to:\\n\\nCreate a repository to store your infrastructure configurationProvision a fully configured Kubernetes cluster with no prior knowledgeInstall an instance of the Plural consoleInstall an instance of Airbyte on your cluster\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/getting-started/video-cli-quickstart.md)\",\n\"source_links\": []\n\"id\": 41,\n\"page_link\": \"https://docs.plural.sh/\",\n\"title\": \"Docs | Plural\",\n\"text\": \"# Documentation\\n\\nGet started, master your operations, and troubleshoot your problems.\\n\\n![Image](/images/landing/hero-bg-lg.png)\\n\\n## Explore Topics\\n\\n[](/#explore-topics)\\n\\nFind what\\u2019s most relevant to you\\n\\n[QuickstartA guide to getting up and running.](/getting-started/quickstart)\\n\\n### Quickstart\\n\\nA guide to getting up and running.\\n\\n[SecurityWhat does Plural have access to?](/operations/security)\\n\\n### Security\\n\\nWhat does Plural have access", "start_char_idx": 143666, "end_char_idx": 147090, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ba839fba-4a0a-4066-b8cc-3ec3a2978c4c": {"__data__": {"id_": "ba839fba-4a0a-4066-b8cc-3ec3a2978c4c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "59f5ffca-3d64-4a44-a815-06518885e511", "node_type": null, "metadata": {}, "hash": "22e97c652c740d48e0c822146d7f22048c704a8bdf05c4aeb2892ae3e1944945"}, "3": {"node_id": "759ba640-52bb-42c9-9cbd-dbf861429fa2", "node_type": null, "metadata": {}, "hash": "aad5e6a5ad1b55dba8d1f37a6997f3e47618335d921f6c6ced251362f66c2251"}}, "hash": "a14e3a8add156207af81aace70943d11b32bd51fa5cf579b8cc5402176d955d5", "text": "Security\\n\\nWhat does Plural have access to?\\n\\n[Cloud ShellSetting up your first cluster in browser.](/getting-started/cloud-shell-quickstart)\\n\\n### Cloud Shell\\n\\nSetting up your first cluster in browser.\\n\\n[Application catalogApplications you can install with Plural.](/applications)\\n\\n### Application catalog\\n\\nApplications you can install with Plural.\\n\\n[TroubleshootingCommon issues or errors.](/reference/troubleshooting)\\n\\n### Troubleshooting\\n\\nCommon issues or errors.\\n\\n[GitOpsShare and manage your Git repositories.](/getting-started/manage-git-repositories/setting-up-gitops)\\n\\n### GitOps\\n\\nShare and manage your Git repositories.\\n\\n## Join the community\\n\\n[](/#join-the-community)\\n\\nJoin the group of Plural users and contributors that are helping shape the future of DevOps.\\n\\n[DiscordJoin the discussion and get help.](https://discord.gg/pluralsh)\\n\\n### Discord\\n\\nJoin the discussion and get help.\\n\\n[Become an open-sourcererStart your contribution journey.](https://github.com/pluralsh/plural)\\n\\n### Become an open-sourcerer\\n\\nStart your contribution journey.\",\n\"source_links\": []\n\"id\": 42,\n\"page_link\": \"https://docs.plural.sh/introduction\",\n\"title\": \" Introduction\",\n\"text\": \"# Introduction\\n\\nPlural empowers you to build and maintain production-ready applications on Kubernetes in minutes with no management overhead.\\n\\n## What is Plural?\\n\\n[](/introduction#what-is-plural)\\n\\nPlural is an open-source, unified, application deployment platform that stands up a Kubernetes cluster and selected applications in the cloud provider of your choice. Plural stores your infrastructure code and configuration in a fresh Git repository of your choosing, which we refer to as a Plural workspace.\\n\\n[workspace](/getting-started/manage-git-repositories/your-plural-workspace)\\n\\nPlural writes all the Helm, Terraform, and YAML needed for your desired infrastructure with plural build, and deploys it all into production with plural deploy. All configuration within your Plural Git repository is fully ejectable from the platform and ecosystem.\\n\\n![Image](/assets/introduction/introduction-marketplace.png)\\n\\nSome key features of the platform include:\\n\\nAutomated UpgradesCross-tool dependency managementGitOps workflow with batteries-included transparent secret encryptionBuilt on common open-source tools, so if you don't like us, you can always eject your application from Plural and use it as you please.\\n\\nNotably, we do not support bringing your own Kubernetes cluster yet, but it's on our roadmap.\\n\\n## Deployment Options\\n\\n[](/introduction#deployment-options)\\n\\n### Plural CLI\\n\\n[](/introduction#plural-cli)\\n\\nThis is the current standard deployment method. Click below for a quickstart to managing configuration locally.\\n\\nQuickstart: Using the Plural CLI on your Machine\\n\\n[Quickstart: Using the Plural CLI on your Machine](/getting-started/quickstart)\\n\\n### Plural Cloud Shell\\n\\n[](/introduction#plural-cloud-shell)\\n\\nWe have created a Cloud Shell with all of the tools and dependencies needed to run Plural. This is available here to try out. If you want to try out Plural without entering cloud credentials, we offer a demo environment of our Plural Console that you can access here.\\n\\n[here](https://app.plural.sh/shell)\\n\\n[here](https://www.plural.sh/demo-login)\\n\\nUsing our in-browser Cloud", "start_char_idx": 147130, "end_char_idx": 150482, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "759ba640-52bb-42c9-9cbd-dbf861429fa2": {"__data__": {"id_": "759ba640-52bb-42c9-9cbd-dbf861429fa2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "ba839fba-4a0a-4066-b8cc-3ec3a2978c4c", "node_type": null, "metadata": {}, "hash": "a14e3a8add156207af81aace70943d11b32bd51fa5cf579b8cc5402176d955d5"}, "3": {"node_id": "b98eb483-8ea9-4b8a-bf9e-0bb749c82c71", "node_type": null, "metadata": {}, "hash": "ac11925238a0422e01ccd24d60e3a54db8952ae51712d18cbe54fd172acce595"}}, "hash": "aad5e6a5ad1b55dba8d1f37a6997f3e47618335d921f6c6ced251362f66c2251", "text": "our in-browser Cloud Shell\\n\\n[Using our in-browser Cloud Shell](/getting-started/cloud-shell-quickstart)\\n\\nIf you need support getting your Plural deployment up and running, join the Plural Discord here!\\n\\n[Plural Discord here!](https://discord.gg/pluralsh)\\n\\n## Architecture\\n\\n[](/introduction#architecture)\\n\\nThe Plural architecture has three main components:\\n\\nPlural API and Catalog site (available at https://app.plural.sh)Plural CLI and Git SCM to maintain the state of a user's applicationsPlural Console for management of all plural applications on your infrastructure\\n\\n[https://app.plural.sh](https://app.plural.sh)\\n\\nAt a high level, the interactions between all three components look something like this:\\n\\n![Image](/assets/reference/architecture.png)\\n\\n### Plural API\\n\\n[](/introduction#plural-api)\\n\\nThe primary responsibility of the Plural API is to store the packages needed for application installation - terraform, helm - and ingesting high-level dependency information about them. This allows us to properly sequence installations. It also serves as a publish-subscribe layer to communicate updates to clusters that have installed those applications, and can leverage the dependency information ingested to delay updates until a cluster has caught up with all the necessary dependencies.\\n\\nIt also can serve as an identity provider for any Plural application, delegating authentication via OIDC and also maintaining user group info and communicating it down to applications.\\n\\n### Plural CLI\\n\\n[](/introduction#plural-cli)\\n\\nThe Plural CLI effectively uses the Plural API as a package manager, and works as a higher level build tool on top of the DevOps packages it supports. It will handle things like running installations in dependency order, detecting changes between runs, and templating out a workspace from scratch.\\n\\nIt also is responsible for managing secret encryption of all application state in plural installation repos and provides a few useful tools for troubleshooting an application our admin console might not be well-suited to solve.\\n\\nFinally it also provides the toolchain for publishing applications to the plural API.\\n\\n### Plural Console\\n\\n[](/introduction#plural-console)\\n\\nThe Plural Console is the operational hub for all applications managed by Plural. It is deployed in-cluster alongside applications and provides a few key features:\\n\\nAutomated upgrades - by subscribing to the API's upgrade websocketObservability - leveraging the dashboard and logging Kubernetes CRDs deployed alongside Plural applicationsSupport - in-person support can be handled in our chat interface available directly in the admin console, with a lot of nice features like direct zoom integration\\n\\nIt's deployed as a highly available, scalable web service, with postgres as its datastore. It also directly integrates with Plural's OIDC for login and user management.\\n\\n## Docs Translations\\n\\n[](/introduction#docs-translations)\\n\\n### Japanese\\n\\n[](/introduction#japanese)\\n\\nThe wonderful team at St-Hakky has translated most of our docs to Japanese on their website. To view the translated docs, click here.\\n\\n[St-Hakky](https://www.about.st-hakky.com/)\\n\\n[translated docs, click here](https://book.st-hakky.com/docs/plural-overview)\\n\\nSt-Hakky", "start_char_idx": 150501, "end_char_idx": 153801, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b98eb483-8ea9-4b8a-bf9e-0bb749c82c71": {"__data__": {"id_": "b98eb483-8ea9-4b8a-bf9e-0bb749c82c71", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "759ba640-52bb-42c9-9cbd-dbf861429fa2", "node_type": null, "metadata": {}, "hash": "aad5e6a5ad1b55dba8d1f37a6997f3e47618335d921f6c6ced251362f66c2251"}, "3": {"node_id": "e2e58768-c348-4204-aff4-ef32742dabd6", "node_type": null, "metadata": {}, "hash": "4a5eca463a22cbe3f6e71337c5aeb3084e5544251ce52337eed23fd75eacf507"}}, "hash": "ac11925238a0422e01ccd24d60e3a54db8952ae51712d18cbe54fd172acce595", "text": "\\u306e\\u3059\\u3070\\u3089\\u3057\\u3044\\u30c1\\u30fc\\u30e0\\u304c\\u3001\\u30a6\\u30a7\\u30d6\\u30b5\\u30a4\\u30c8\\u3067\\u307b\\u3068\\u3093\\u3069\\u306e\\u30c9\\u30ad\\u30e5\\u30e1\\u30f3\\u30c8\\u3092\\u65e5\\u672c\\u8a9e\\u306b\\u7ffb\\u8a33\\u3057\\u3066\\u304f\\u308c\\u307e\\u3057\\u305f\\u3002 \\u7ffb\\u8a33\\u3055\\u308c\\u305f\\u30c9\\u30ad\\u30e5\\u30e1\\u30f3\\u30c8\\u3092\\u8868\\u793a\\u3059\\u308b\\u306b\\u306f\\u3001\\u3053\\u3053\\u3092\\u30af\\u30ea\\u30c3\\u30af\\u3057\\u3066\\u304f\\u3060\\u3055\\u3044\\u3002\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/introduction.md)\",\n\"source_links\": []\n\"id\": 43,\n\"page_link\": \"https://docs.plural.sh/operations/auth-access-control/api-tokens\",\n\"title\": \" API Tokens\",\n\"text\": \"# API Tokens\\n\\nIn addition to the temporary JWTs the API issues on login, it's possible to create persistent access tokens to access the API. This is also the common way credentials are managed when using the plural CLI, with the plural login command either creating or fetching a recent access token to use for all API calls.\\n\\n### Creating a Token\\n\\n[](/operations/auth-access-control/api-tokens#creating-a-token)\\n\\nYou can create a token manually using the web interface here: https://app.plural.sh/me/edit/tokens or you can simply run:\\n\\n[https://app.plural.sh/me/edit/tokens](https://app.plural.sh/me/edit/tokens)\\n\\n```\\nplural login\\nplural config read\\n```\\n\\nto grab the token configured at login.\\n\\n### Token Security\\n\\n[](/operations/auth-access-control/api-tokens#token-security)\\n\\nPlural captures access logs for all token usage, including IP information, available by inspecting the token in the access tokens page. You are also free to revoke a token at any time, although this might require you to rotate the keys used by your plural installations manually, so it's recommended to check the logs for that token before doing so to understand your exposure\\n\\n[access tokens page](https://app.plural.sh/me/edit/tokens)\\n\\n###### Info:\\n\\nRevoking a token while an instance of the plural console is using it will prevent it from receiving upgrades, but once the token is rotated, it will pick back up and apply the upgrades as normal.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/auth-access-control/api-tokens.md)\",\n\"source_links\": []\n\"id\": 44,\n\"page_link\": \"https://docs.plural.sh/operations/auth-access-control/identity-and-installations/audit-logging\",\n\"title\": \" Audit Logging\",\n\"text\": \"# Audit Logging\\n\\nAll mutations in both Plural and the Plural Console have full audit logging, which can be attributed back to the actor and IP address responsible. You can view", "start_char_idx": 153820, "end_char_idx": 156460, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e2e58768-c348-4204-aff4-ef32742dabd6": {"__data__": {"id_": "e2e58768-c348-4204-aff4-ef32742dabd6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "b98eb483-8ea9-4b8a-bf9e-0bb749c82c71", "node_type": null, "metadata": {}, "hash": "ac11925238a0422e01ccd24d60e3a54db8952ae51712d18cbe54fd172acce595"}, "3": {"node_id": "068a78b9-0687-4fc0-9bce-2bd9475fe924", "node_type": null, "metadata": {}, "hash": "3c803b3a9657784383a4b1f35a13250f461eb4d08101a4428fae9f99cae3841d"}}, "hash": "4a5eca463a22cbe3f6e71337c5aeb3084e5544251ce52337eed23fd75eacf507", "text": "logging, which can be attributed back to the actor and IP address responsible. You can view the Plural audit logs here: https://app.plural.sh/audits and should be able to see a table of actions, the resources acted upon and the actor looking somewhat like\\n\\n[https://app.plural.sh/audits](https://app.plural.sh/audits)\\n\\n![Image](/assets/advanced-topics/audit-logs.png)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/auth-access-control/identity-and-installations/audit-logging.md)\",\n\"source_links\": []\n\"id\": 45,\n\"page_link\": \"https://docs.plural.sh/operations/auth-access-control/identity-and-installations\",\n\"title\": \" Advanced Topics\",\n\"text\": \"# Advanced Topics\\n\\n### Installation\\n\\n[](/operations/auth-access-control/identity-and-installations#installation)\\n\\nAny Plural identity can install applications, which will then be tied back to the installing user to track their history and validate whether upgrades are still eligible. This has a few implications:\\n\\nUsers should fix the cloud provider that identity is installing to, as a workspace for that users installation likely can't span multiple providersFor production-grade workloads where you'd like to have a full team managing an installation, it's typically better to use a Service Account to manage an installation.\\n\\nAny activity the Plural Console does against the Plural API is also authenticated as the installer's identity. So support tickets will usually be created using that user, and the upgrade websocket is created on behalf of that user. This makes a lot of things a lot simpler in a disconnected architecture like Plural's.\\n\\n### Publishing\\n\\n[](/operations/auth-access-control/identity-and-installations#publishing)\\n\\nMembers on a Plural account can become publishers if given the appropriate role, or if they are the account owner. Publishers have the ability to create application repositories, publish terraform or helm packages to repositories, and determine payment plans for applications.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/auth-access-control/identity-and-installations/index.md)\",\n\"source_links\": []\n\"id\": 46,\n\"page_link\": \"https://docs.plural.sh/operations/auth-access-control/identity-and-installations/service-accounts\",\n\"title\": \" Creating Multiple Plural Clusters\",\n\"text\": \"# Creating Multiple Plural Clusters\\n\\n## Setting up a new cluster\\n\\n[](/operations/auth-access-control/identity-and-installations/service-accounts#setting-up-a-new-cluster)\\n\\nThere are many scenarios where it's useful to have multiple Kubernetes clusters running (e.g., a development and product cluster). For those users on paid tiers, Plural allows you to manage multiple clusters from a single UI.\\n\\n![Image](/assets/operations/multi-cluster.png)\\n\\nAdditional clusters are spun up using a unique Service Account for each new cluster. Service Accounts are assumable identities, specifically meant to facilitate group management of a set of installations. To spin up a new cluster, first create a new Service Account.\\n\\nTo create a service account, from https://app.plural.sh/, navigate to account, then service accounts.\\n\\n[https://app.plural.sh/](https://app.plural.sh/accounts/edit/service-accounts)\\n\\n![Image](/assets/advanced-topics/service-accounts-static.png)\\n\\nFrom here, you can create a new service account, and attach users or groups.\\n\\n![Image](/assets/advanced-topics/service-accounts-create.png)\\n\\nOnce", "start_char_idx": 156385, "end_char_idx": 159887, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "068a78b9-0687-4fc0-9bce-2bd9475fe924": {"__data__": {"id_": "068a78b9-0687-4fc0-9bce-2bd9475fe924", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "e2e58768-c348-4204-aff4-ef32742dabd6", "node_type": null, "metadata": {}, "hash": "4a5eca463a22cbe3f6e71337c5aeb3084e5544251ce52337eed23fd75eacf507"}, "3": {"node_id": "ecf1bb95-6f1d-409a-895e-135e4289378b", "node_type": null, "metadata": {}, "hash": "b0e2e6a03046c65dc7e567b72918aa4ec15290d16220b723696b1c3c9afa679c"}}, "hash": "3c803b3a9657784383a4b1f35a13250f461eb4d08101a4428fae9f99cae3841d", "text": "created, you can impersonate the service account by clicking the impersonate button in the dashboard, or via the CLI:\\n\\n```\\nplural login --service-account <service-account-email>\\n```\\n\\nIn all other respects, service accounts behave just like normal Plural users, and will be present in audit logs, can be used in support chats, and, of course, can install and deploy applications just like users.\\n\\nYou can then create a new cluster on the Service Account via the Cloud Shell or CLI.\\n\\nThe Clusters tab on your main Plural account will show all clusters that you have access to. From here, you can manage user access, navigate to a cluster's Cloud Shell, set Upgrade Channels for applications, and more.\\n\\n## Setting up Promotions\\n\\n[](/operations/auth-access-control/identity-and-installations/service-accounts#setting-up-promotions)\\n\\nOne major benefit of setting up multiple clusters is the ability to promote versions of different applications between clusters. Assuming both clusters are on the same provider, you can try out new versions of applications in a development cluster, and promote to production when you're ready.\\n\\nYou can set up promotions either in the browser or via the Plural CLI.\\n\\n### CLI Setup\\n\\n[](/operations/auth-access-control/identity-and-installations/service-accounts#cli-setup)\\n\\nTo set up promotions via the CLI, you can first run plural clusters list to see all available clusters and associated IDs. From there, you can run:\\n\\n```\\nplural clusters depend <source_cluster_ID> <destination_cluster_ID>\\n```\\n\\nwhere source is your development cluster and destination is your production cluster.\\n\\nTo run a promotion, use:\\n\\n```\\nplural clusters promote\\n```\\n\\nThis will propagate versions for all apps from your source cluster to your destination cluster.\\n\\n### UI Setup\\n\\n[](/operations/auth-access-control/identity-and-installations/service-accounts#ui-setup)\\n\\nFor a full demonstration of in-browser cluster promotion, check out our demo video or read on below.\\n\\nTo do this from the Plural UI, navigate to the Clusters Overview tab. Choose the cluster you want as your destination cluster, and click into the Cluster details page.\\n\\nClick the \\\"Set up promotions\\\" button, select your source cluster, and click the Save button.\\n\\nYou can then click the \\\"Promote\\\" button to see pending upgrades and execute a promotion.\\n\\nAlternatively, you can promote from the Clusters Overview page by clicking the green checkmark in the clusters table.\\n\\n![Image](/assets/operations/promotion-modal.png)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/auth-access-control/identity-and-installations/service-accounts.md)\",\n\"source_links\": []\n\"id\": 47,\n\"page_link\": \"https://docs.plural.sh/operations/auth-access-control\",\n\"title\": \" Auth & Access Control\",\n\"text\": \"# Auth & Access Control\\n\\nLearn about configuring access control within Plural.\\n\\nPlural comes pre-built with a lot of the core concepts needed for IAM at any organizational scale. These include:\\n\\nUsers and Groups - maintain a full directory to manage identity within PluralRoles - which can be bound to any set of users or groups of users to allocate permissionsService Accounts - dedicated identities with a fixed policy as far as what other entities can impersonate them and act on their behalf.\\n\\n### Account Basics\\n\\n[](/operations/auth-access-control#account-basics)\\n\\nWhen you sign up to plural, you'll immediately be allocated an account. You can then invite users by using the form at", "start_char_idx": 159964, "end_char_idx": 163522, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ecf1bb95-6f1d-409a-895e-135e4289378b": {"__data__": {"id_": "ecf1bb95-6f1d-409a-895e-135e4289378b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "068a78b9-0687-4fc0-9bce-2bd9475fe924", "node_type": null, "metadata": {}, "hash": "3c803b3a9657784383a4b1f35a13250f461eb4d08101a4428fae9f99cae3841d"}, "3": {"node_id": "a57cabea-c208-4f58-942d-5248b2a299d3", "node_type": null, "metadata": {}, "hash": "b8e1dce9c29aa20ba5c5fa7d399eaa5d87d29029fe15bac51e53e40646ea7e3b"}}, "hash": "b0e2e6a03046c65dc7e567b72918aa4ec15290d16220b723696b1c3c9afa679c", "text": "immediately be allocated an account. You can then invite users by using the form at https://app.plural.sh/accounts/edit/users. Users who sign up organically will get their own accounts, and will have to be linked afterwards, so we recommend onboarding additional users via invite.\\n\\n[https://app.plural.sh/accounts/edit/users](https://app.plural.sh/accounts/edit/users)\\n\\n###### Info:\\n\\nThe only users eligible for sharing repo encryption keys are also those users in your account .\\n\\n### RBAC Basics\\n\\n[](/operations/auth-access-control#rbac-basics)\\n\\nEach Plural role is configurable using the role creation form at https://app.plural.sh/accounts/edit/roles:\\n\\n[https://app.plural.sh/accounts/edit/roles](https://app.plural.sh/accounts/edit/roles)\\n\\n![Image](/assets/advanced-topics/rbac-basics.png)\\n\\nThe permissions are fairly self explanatory, but you do have the ability to map a role to whatever identity grouping you'd want to use, and filter the roles application to a list of repositories (or a regex on repository name). The latter mode is helpful if you'd like a certain role to only be able to install, say, airflow and sentry.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/auth-access-control/index.md)\",\n\"source_links\": []\n\"id\": 48,\n\"page_link\": \"https://docs.plural.sh/operations/auth-access-control/openid-connect\",\n\"title\": \" OpenID Connect\",\n\"text\": \"# OpenID Connect\\n\\nAll Plural applications have the capability to create a custom OIDC provider for a user's installation. This allows Plural to become a unified identity management solution for your entire open source portfolio. We have even automated upgrades for OIDC configuration changes, so the setup process is entirely turnkey.\\n\\nFor more information about adding users to applications using OpenID Connect, see the page on Adding Users to Applications\\n\\n[Adding Users to Applications](/operations/managing-applications/add-users-to-application)\\n\\n### Login Policies\\n\\n[](/operations/auth-access-control/openid-connect#login-policies)\\n\\nThe provider is mapped to a set of users+groups, just like a Plural role, and if that login policy does not pass, you cannot complete the OIDC login and consent flow. Plural ID tokens will include core user information along with the plural groups they belong to, allowing for seamless identity mapping onto the applications governed by Plural.\\n\\n### Supported Applications\\n\\n[](/operations/auth-access-control/openid-connect#supported-applications)\\n\\nApplications that currently support Plural OIDC are:\\n\\nPlural Console - includes group provisioning as wellAirflowAirbyteSentryGitLabGrafanaArgo CD\\n\\n[Plural Console](https://www.plural.sh/applications/console)\\n\\n[Airflow](https://www.plural.sh/applications/airflow)\\n\\n[Airbyte](https://www.plural.sh/applications/airbyte)\\n\\n[Sentry](https://www.plural.sh/applications/sentry)\\n\\n[GitLab](https://www.plural.sh/applications/gitlab)\\n\\n[Grafana](https://www.plural.sh/applications/grafana)\\n\\n[Argo CD](https://www.plural.sh/applications/argo-cd)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/auth-access-control/openid-connect.md)\",\n\"source_links\": []\n\"id\":", "start_char_idx": 163454, "end_char_idx": 166687, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a57cabea-c208-4f58-942d-5248b2a299d3": {"__data__": {"id_": "a57cabea-c208-4f58-942d-5248b2a299d3", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "ecf1bb95-6f1d-409a-895e-135e4289378b", "node_type": null, "metadata": {}, "hash": "b0e2e6a03046c65dc7e567b72918aa4ec15290d16220b723696b1c3c9afa679c"}, "3": {"node_id": "1494c681-7f4f-477a-ad81-67b098c8d9ed", "node_type": null, "metadata": {}, "hash": "5a31d612c08857b6638415274220b04cc63a0b5b123a9b8a29cf9ed297ab21cc"}}, "hash": "b8e1dce9c29aa20ba5c5fa7d399eaa5d87d29029fe15bac51e53e40646ea7e3b", "text": "[]\n\"id\": 49,\n\"page_link\": \"https://docs.plural.sh/operations/cluster-configuration\",\n\"title\": \" Cluster Configuration\",\n\"text\": \"# Cluster Configuration\\n\\nDevOps workflows that involve editing your cluster's Terraform files.\\n\\nPlural offers a set of sane defaults to spin up a one-size-fits-all Kubernetes cluster, but there will be cases where you'll want to edit the default cluster configuration to better fit your organization's needs. This will involve editing the Terraform that we generate for you, which carries risks if administered incorrectly.\\n\\nIn general, all core cluster configuration is set up in a Terraform stack in the bootstrap app directory. You can find the Terraform code under bootstrap/terraform if you want to dive in yourself, but we can help guide you here as well.\\n\\n## Operations on node groups\\n\\n[](/operations/cluster-configuration#operations-on-node-groups)\\n\\n### Modifying node types\\n\\n[](/operations/cluster-configuration#modifying-node-types)\\n\\nModifying node types allows you to optimize the infrastructure backing your applications for cost and/or performance reasons.\\n\\nOn AWS, EKS has some interesting limitations around node groups. Since EBS doesn't support multi-AZ disks, to make node autoscaling work properly for stateful workloads, you need to split node groups across all availability zones deployed in a region. Some non-stateful workloads don't need this complexity, so we also have a set of multi-AZ groups as well. To modify either, simply update the aws-bootstrap module's single_az_node_groups or multi_az_node_groups configuration (in bootstrap/terraform/main.tf) with:\\n\\n```\\nsingle_az_node_groups = {\\n    my_node_group = {\\n      name = \\\"my-node-group\\\"\\n      capacity_type = \\\"ON_DEMAND\\\" # or SPOT\\n      min_capacity = 3\\n      desired_capacity = 3\\n      instance_types = [\\\"t3.large\\\", \\\"t3a.large\\\"] # or whatever other types you'd like\\n      k8s_labels = {\\n        \\\"plural.sh/capacityType\\\" = \\\"ON_DEMAND\\\"\\n        \\\"plural.sh/performanceType\\\" = \\\"BURST\\\"\\n        \\\"plural.sh/scalingGroup\\\" = \\\"small-burst-on-demand\\\"\\n      } # kubernetes labels are good for targeting workloads\\n}\\n```\\n\\nfor multi-AZ groups you can do the following:\\n\\n```\\nmulti_az_node_groups = {\\n    my_node_group = {\\n      name = \\\"my-node-group\\\"\\n      capacity_type = \\\"SPOT\\\"\\n      instance_types = [\\\"t3.large\\\", \\\"t3a.large\\\"]\\n      k8s_labels = {\\n        \\\"plural.sh/capacityType\\\" = \\\"SPOT\\\"\\n        \\\"plural.sh/performanceType\\\" = \\\"BURST\\\"\\n        \\\"plural.sh/scalingGroup\\\" = \\\"small-burst-spot\\\"\\n      }\\n      k8s_taints = [{\\n        key = \\\"plural.sh/capacityType\\\"\\n        value = \\\"SPOT\\\"\\n        effect = \\\"NO_SCHEDULE\\\"\\n      }] # taints prevent a node from being schedulable unless a pod explicitly accepts it, good for preventing spot instances from being accidentally used\\n   ", "start_char_idx": 166749, "end_char_idx": 169618, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1494c681-7f4f-477a-ad81-67b098c8d9ed": {"__data__": {"id_": "1494c681-7f4f-477a-ad81-67b098c8d9ed", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "a57cabea-c208-4f58-942d-5248b2a299d3", "node_type": null, "metadata": {}, "hash": "b8e1dce9c29aa20ba5c5fa7d399eaa5d87d29029fe15bac51e53e40646ea7e3b"}, "3": {"node_id": "96616c9b-01d5-4ff9-9ff4-1ae610026c96", "node_type": null, "metadata": {}, "hash": "0f896b7876b8e72b88a0283ebfef0f3a22b4a9e96dcfc86ded0198f8d89e9772"}}, "hash": "5a31d612c08857b6638415274220b04cc63a0b5b123a9b8a29cf9ed297ab21cc", "text": "it, good for preventing spot instances from being accidentally used\\n    }\\n}\\n```\\n\\nOn GCP, update the gcp-bootstrap modules configuration (in bootstrap/terraform/main.tf) with:\\n\\n```\\nnode_pools = [\\n    {\\n      name               = \\\"small-burst-on-demand\\\"\\n      machine_type       = \\\"e2-standard-2\\\" # or whatever you'd like\\n      min_count          = 1\\n      max_count          = 9\\n      disk_size_gb       = 50\\n      disk_type          = \\\"pd-standard\\\"\\n      image_type         = \\\"COS_CONTAINERD\\\"\\n      spot               = false\\n      auto_repair        = true\\n      auto_upgrade       = true\\n      preemptible        = false\\n      initial_node_count = 1\\n      autoscaling        = true\\n    }\\n]\\n# if you'd like to add lables\\nnode_pools_labels = {\\n    \\\"small-burst-on-demand\\\" = {\\n      \\\"plural.sh/capacityType\\\" = \\\"ON_DEMAND\\\"\\n      \\\"plural.sh/performanceType\\\" = \\\"BURST\\\"\\n      \\\"plural.sh/scalingGroup\\\" = \\\"small-burst-on-demand\\\"\\n    }\\n}\\n# if you'd also like to add taints\\nnode_pools_taints = {\\n    small-burst-spot = [\\n      {\\n        key    = \\\"plural.sh/capacityType\\\"\\n        value  = \\\"SPOT\\\"\\n        effect = \\\"NO_SCHEDULE\\\"\\n      },\\n    ],\\n}\\n```\\n\\nCurrently Azure has an annoying chicken-egg issue with the requirement that at least one node pool must be created. Terraform manages this poorly by forcing cluster recreation if the default node pool changes. To ensure no instability, we strongly recommend you confirm any node topology changes do not interfere with the default node pool on the AKS cluster.\\n\\nWith Azure, update the azure-bootstrap modules configuration in bootstrap/terraform/main.tf with:\\n\\n```\\nnode_groups =  [\\n    {\\n      name                = \\\"ssod1\\\"\\n      priority            = \\\"Regular\\\"\\n      enable_auto_scaling = true\\n      availability_zones  = [\\\"1\\\"]\\n      mode                = \\\"System\\\"\\n      node_count          = null\\n      min_count           = 1\\n      max_count           = 9\\n      spot_max_price      = null\\n      eviction_policy     = null\\n      vm_size             = \\\"Standard_D2as_v5\\\"\\n      os_disk_type        = \\\"Managed\\\"\\n ", "start_char_idx": 169567, "end_char_idx": 171721, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "96616c9b-01d5-4ff9-9ff4-1ae610026c96": {"__data__": {"id_": "96616c9b-01d5-4ff9-9ff4-1ae610026c96", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "1494c681-7f4f-477a-ad81-67b098c8d9ed", "node_type": null, "metadata": {}, "hash": "5a31d612c08857b6638415274220b04cc63a0b5b123a9b8a29cf9ed297ab21cc"}, "3": {"node_id": "e432d2b6-b21f-4aa9-abaf-d2288d7abc36", "node_type": null, "metadata": {}, "hash": "dbd79109f98298869827dee6f71279fad1833ba6e905e2ca19ddb41243225361"}}, "hash": "0f896b7876b8e72b88a0283ebfef0f3a22b4a9e96dcfc86ded0198f8d89e9772", "text": "os_disk_type        = \\\"Managed\\\"\\n      os_disk_size_gb     = 50\\n      max_pods            = 110\\n\\n      node_labels = {\\n        \\\"plural.sh/capacityType\\\" = \\\"ON_DEMAND\\\"\\n        \\\"plural.sh/performanceType\\\" = \\\"SUSTAINED\\\"\\n        \\\"plural.sh/scalingGroup\\\" = \\\"small-sustained-on-demand\\\"\\n      } # or whatever labels you'd prefer\\n      node_taints = [\\n        # \\\"someTaintName\\\"\\n      ]\\n      tags = {\\n        \\\"ScalingGroup\\\": \\\"small-sustained-on-demand\\\"\\n      }\\n    }\\n]\\n```\\n\\n## Adding users/roles [AWS]\\n\\n[](/operations/cluster-configuration#adding-users-roles-aws)\\n\\nBecause of the limitations set by AWS' IAM authenticator, you'll need to follow this process to add new users or roles to a cluster running in AWS.\\n\\nAdd these input to aws-bootstrap in bootstrap/terraform/main.tf\\n\\n```\\nmap_users = [\\n    {\\n      userarn = \\\"arn:aws:iam::<account-id>:user/yourusername\\\"\\n      username = \\\"yourusername\\\"\\n      groups = [\\\"system:masters\\\"] # or whatever k8s group you'd prefer\\n    }\\n  ]\\n\\n# if you'd rather authenticate with an IAM role (a recommended approach), add this block\\nmanual_roles = [\\n    {\\n      rolearn = \\\"arn:aws:iam::<account-id>:role/yourrolename\\\"\\n      username = \\\"yourrolename\\\"\\n      groups = [\\\"system:masters\\\"]\\n    }\\n]\\n```\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/cluster-configuration.md)\",\n\"source_links\": []\n\"id\": 50,\n\"page_link\": \"https://docs.plural.sh/operations/cost-management\",\n\"title\": \" Cost Optimization\",\n\"text\": \"# Cost Optimization\\n\\nControlling the cost of your cluster and applications.\\n\\nOut of the box, Plural performs a lot of optimizations behind the scenes with our built-in autoscaler that schedules workloads efficiently across your infrastructure. However, there are some efforts you can make to monitor and optimize this cost.\\n\\n## Console Scaling Recommendations\\n\\n[](/operations/cost-management#console-scaling-recommendations)\\n\\nThe Plural Console offers scaling recommendations for certain apps, some of which can be immediately applied from the Console.\\n\\nTo do this, select your desired application from the Application Overview tab and then click on the Components tab in the sidebar on the left. Then click on the specific component you want to get recommendations for and you will see a Scaling button in the top right.\\n\\nWhen you click on the Scaling button, if you see Apply in the bottom right, you can immediately enforce the recommendations given by Plural.\\n\\n## Node Optimization\\n\\n[](/operations/cost-management#node-optimization)\\n\\n### Helping the Autoscaler\\n\\n[](/operations/cost-management#helping-the-autoscaler)\\n\\nThe Plural autoscaler does a good job of scheduling new Pods and resources onto nodes that can handle the extra workload, but cannot delete Pods, as it could lead to potentially destructive", "start_char_idx": 171756, "end_char_idx": 174640, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e432d2b6-b21f-4aa9-abaf-d2288d7abc36": {"__data__": {"id_": "e432d2b6-b21f-4aa9-abaf-d2288d7abc36", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "96616c9b-01d5-4ff9-9ff4-1ae610026c96", "node_type": null, "metadata": {}, "hash": "0f896b7876b8e72b88a0283ebfef0f3a22b4a9e96dcfc86ded0198f8d89e9772"}, "3": {"node_id": "5277bff5-cd91-4332-8010-bac270ecd528", "node_type": null, "metadata": {}, "hash": "01ba1b606df17b5703028c140291699bb223ee284e179cec42d1e49ea4f3999c"}}, "hash": "dbd79109f98298869827dee6f71279fad1833ba6e905e2ca19ddb41243225361", "text": "extra workload, but cannot delete Pods, as it could lead to potentially destructive scenarios. Because of this, you may end up with imbalanced nodes that are overworked or underworked.\\n\\nTo address this, you'll need the Plural Console installed. Head to the Nodes tab in the sidebar on the left of the Console. Here, you'll see the utilization of resources for all of your nodes. You are looking for nodes that are overworked or underworked, which can be observed by seeing if cpu and/or memory is in the red (overworked) or close to zero and green (underworked).\\n\\nTo delete these nodes, hit the red trash can symbol to the right of the problematic node and it will deprovision, letting the autoscaler schedule the Pods it was running on a different node.\\n\\n###### Info:\\n\\nAs with any operations that involve taking down resources, you will likely encounter a small amount of downtime as your resources get rescheduled.\\n\\n### Node Sizing at Scale\\n\\n[](/operations/cost-management#node-sizing-at-scale)\\n\\nIf you deploy a lot of applications and resources, you may start seeing cost go up faster than expected due to the fixed cost of installing Kubernetes and its services on every node. This fixed Kubernetes tax per node varies based on your cloud provider. Essentially, if a small node is used, it will be a higher percentage of your usage than a large node, making the cost differences more evident at large scale with small node sizes.\\n\\nTo control this, it is recommended that you increase your node sizes to accommodate more resources and applications per node, reducing the amount of times you're paying the fixed cost for running Kubernetes. Learn how to modify your node types here.\\n\\n[here](/operations/cluster-configuration#modifying-node-types)\\n\\n## Kubecost\\n\\n[](/operations/cost-management#kubecost)\\n\\nTo monitor your cost and keep an eye out for spend, you can install Kubecost on Plural just how you would install any other application. Check out their documentation here.\\n\\n[Kubecost](/applications/kubecost)\\n\\n[here](https://docs.kubecost.com/)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/cost-management.md)\",\n\"source_links\": []\n\"id\": 51,\n\"page_link\": \"https://docs.plural.sh/operations/dns-setup/creating-dns-zone-in-your-cloud-provider-console\",\n\"title\": \" Creating a DNS Zone in Console\",\n\"text\": \"# Creating a DNS Zone in Console\\n\\nSign in to the AWS Management Console and open the Route 53 console at https://console.aws.amazon.com/route53/.\\n\\n[https://console.aws.amazon.com/route53/](https://console.aws.amazon.com/route53/)\\n\\nIf you're new to Route 53, choose Get started under DNS management, and then choose Create hosted zones.\\n\\nIf you're already using Route 53, choose Hosted zones in the navigation pane, and then choose Create hosted zones.\\n\\nIn the Create hosted zone pane, enter a newly registered domain (eg pluraldemo.com), or a subdomain (eg, plural.pinterest.com ).\\n\\nFor Type, accept the default value of Public hosted zone.\\n\\nChoose Create hosted zone.\\n\\nNow in the navigation pane, click Hosted zones. On the Hosted zones page, choose the radio button (not the name) for the hosted zone, then choose View details.\\n\\nOn the details page for the hosted zone, choose Hosted zone details. Make note of the four servers listed for Name servers. You will need these records to proceed with Step 3.\\n\\nIn your Google Cloud Console, go to your Plural project and enable the Cloud DNS API.\\n\\n[enable the Cloud DNS", "start_char_idx": 174596, "end_char_idx": 178114, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5277bff5-cd91-4332-8010-bac270ecd528": {"__data__": {"id_": "5277bff5-cd91-4332-8010-bac270ecd528", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "e432d2b6-b21f-4aa9-abaf-d2288d7abc36", "node_type": null, "metadata": {}, "hash": "dbd79109f98298869827dee6f71279fad1833ba6e905e2ca19ddb41243225361"}, "3": {"node_id": "ecd35d39-adab-4256-b6f0-cb5e3b94ecc9", "node_type": null, "metadata": {}, "hash": "049ab626c839305fa8796dc58072587b253a3548a0ed00d7e7661034ff551bfa"}}, "hash": "01ba1b606df17b5703028c140291699bb223ee284e179cec42d1e49ea4f3999c", "text": "project and enable the Cloud DNS API.\\n\\n[enable the Cloud DNS API](https://console.cloud.google.com/flows/enableapi?apiid=dns&_ga=2.143906805.1313565175.1629139974-335821397.1624570886)\\n\\nIn your Google Cloud Console, go to the Create a DNS zone page.\\n\\nGo to Create a DNS zone\\n\\n[Go to Create a DNS zone](https://console.cloud.google.com/networking/dns/zones/~new)\\n\\nFor the Zone type, select Public.\\n\\nFor the Zone name, enter an appropriate string.\\n\\nFor the DNS name, enter a DNS name for the zone , enter a newly registered domain (eg pluraldemo.com), or a subdomain (eg, plural.pinterest.com ).\\n\\nUnder DNSSEC, ensure that the Off setting is selected.\\n\\nClick Create to create a zone populated with the NS and SOA records.\\n\\nOn the Zone details page, retrieve the Name server (NS) records. You need these records to proceed with Step 3.\\n\\n![Image](/assets/Screen%20Shot%202021-08-18%20at%2012.39.37%20PM.png)\\n\\n#### \\n\\n[](/operations/dns-setup/creating-dns-zone-in-your-cloud-provider-console#_)\\n\\nName: The DNS zone name can be any value that is not already configured on the Azure DNS servers. A real-world value would be a newly registered domain (eg pluraldemo.com), or a subdomain (eg, plural.pinterest.com ).Resource group: Select Create new, enter MyResourceGroup, and select OK. The resource group name must be unique within the Azure subscription.\\n\\n![Image](https://docs.microsoft.com/en-us/azure/dns/media/dns-delegate-domain-azure-dns/viewzonens500.png)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/dns-setup/creating-dns-zone-in-your-cloud-provider-console.md)\",\n\"source_links\": []\n\"id\": 52,\n\"page_link\": \"https://docs.plural.sh/operations/dns-setup\",\n\"title\": \" Configuring DNS\",\n\"text\": \"# Configuring DNS\\n\\nRegistering and setting up a domain\\n\\n## Articles in this section:\\n\\nCreating a DNS Zone in Console\\n\\n[Creating a DNS Zone in Console](/operations/dns-setup/creating-dns-zone-in-your-cloud-provider-console)\\n\\n#### 1. Register a Domain Name\\n\\n[](/operations/dns-setup#_1-register-a-domain-name)\\n\\nThis domain name, eg pluraldemo.com can be registered with any registrar, for example Google Domains, GoDaddy, or Namecheap.\\n\\n#### 2. Create a DNS Zone in Your Cloud Provider Console Corresponding to the registered Domain Name\\n\\n[](/operations/dns-setup#_2-create-a-dns-zone-in-your-cloud-provider-console-corresponding-to-the-registered-domain-name)\\n\\nFollow the instructions for creating a DNS Zone named pluraldemo.com within the DNS service of your cloud provider.\\n\\n[the instructions](/operations/dns-setup/creating-dns-zone-in-your-cloud-provider-console)\\n\\nRecord the nameservers corresponding to this zone.\\n\\n#### 3. Update name servers\\n\\n[](/operations/dns-setup#_3-update-name-servers)\\n\\nGo back to where you registered pluraldemo.comand add the nameservers from Step 2 as \\\"custom nameservers\\\" under its DNS configuration.\\n\\n###### Info:\\n\\nThe domain name registrars", "start_char_idx": 178133, "end_char_idx": 181113, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ecd35d39-adab-4256-b6f0-cb5e3b94ecc9": {"__data__": {"id_": "ecd35d39-adab-4256-b6f0-cb5e3b94ecc9", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "5277bff5-cd91-4332-8010-bac270ecd528", "node_type": null, "metadata": {}, "hash": "01ba1b606df17b5703028c140291699bb223ee284e179cec42d1e49ea4f3999c"}, "3": {"node_id": "7bca798f-b60e-40d0-9d65-9e0b8942584e", "node_type": null, "metadata": {}, "hash": "688cc94dd1ae46ded3239bc4650bc58788c99ad8941f88e56e9a868be96f0966"}}, "hash": "049ab626c839305fa8796dc58072587b253a3548a0ed00d7e7661034ff551bfa", "text": "Info:\\n\\nThe domain name registrars will typically provide default name servers and also the ability to set up custom name servers. For example, in Google Domains, you can set custom name servers under the DNS tab once you click into a specific domain name.\\n\\n![Image](/assets/Screen%20Shot%202021-08-18%20at%201.00.00%20PM.png)\\n\\nThe more likely scenario is that you will have an existing company domain, i.e. pinterest.com and you will want to create a subdomain under which you can consolidate all your plural applications, eg plural.pinterest.com\\n\\n#### 1. Create DNS Zone in Your Cloud Provider Console\\n\\n[](/operations/dns-setup#_1-create-dns-zone-in-your-cloud-provider-console)\\n\\nFollow the instructions for creating a DNS Zone named plural.pinterest.com within the DNS service of your cloud provider.\\n\\n[the instructions](/operations/dns-setup/creating-dns-zone-in-your-cloud-provider-console)\\n\\nRecord the nameservers corresponding to this zone.\\n\\n#### 2. Create NS Record\\n\\n[](/operations/dns-setup#_2-create-ns-record)\\n\\nGo back to where you registered pinterest.com and add a NS record that corresponds to the plural.pinterest.com subdomain -- for the data field of the record, input the nameservers from step 1.\\n\\n![Image](/assets/Screen%20Shot%202021-08-30%20at%203.36.34%20PM.png)\\n\\nThese are the terraform snippets for reference:\\n\\n```\\nresource \\\"aws_route53_zone\\\" \\\"test\\\" {\\n  name = \\\"plural.pinterest.com\\\"\\n\\n  tags = {\\n    Environment = \\\"test\\\"\\n  }\\n}\\n\\nresource \\\"aws_route53_record\\\" \\\"test-ns\\\" {\\n  zone_id = data.aws_route53_zone.main.zone_id\\n  name    = \\\"plural.pinterest.com\\\"\\n  type    = \\\"NS\\\"\\n  ttl     = \\\"30\\\"\\n  records = aws_route53_zone.test.name_servers\\n}\\n```\\n\\n# Configuring Externaldns for your cluster\\n\\n[](/operations/dns-setup#configuring-externaldns-for-your-cluster)\\n\\nThere are two ways this can be done:\\n\\nfor a new clusterfor an existing cluster using plural's dns service you want to switch over\\n\\n## Fresh Cluster\\n\\n[](/operations/dns-setup#fresh-cluster)\\n\\nFor a fresh cluster, you'll be prompted in plural init whether you want to enable plural dns. Simply answer no, provide the subdomain you created above, and we'll configure externaldns correctly for you from the start.\\n\\n## Existing Plural Cluster\\n\\n[](/operations/dns-setup#existing-plural-cluster)\\n\\nFor existing clusters, there's a bit of cleanup you'll need to do to reconfigure from plural dns. You'll want to edit the workspace.yaml file at the root of your repo to set false to the pluralDns entry. You'll also want to rewire the subdomain to point to your new subdomain so domain validation works in the future.\\n\\nAdditionally, in the context.yaml file, there will likely be a number of dns entries in the configuration for your apps, you'll want to move those to the new subdomain as well (the old plural dns records will still work during this transition).\\n\\nOnce all this is done, you can reconfigure all the helm charts with plural build then run plural deploy to apply them.\\n\\n[Edit on", "start_char_idx": 181135, "end_char_idx": 184180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7bca798f-b60e-40d0-9d65-9e0b8942584e": {"__data__": {"id_": "7bca798f-b60e-40d0-9d65-9e0b8942584e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "ecd35d39-adab-4256-b6f0-cb5e3b94ecc9", "node_type": null, "metadata": {}, "hash": "049ab626c839305fa8796dc58072587b253a3548a0ed00d7e7661034ff551bfa"}, "3": {"node_id": "f6251cc8-4e04-469a-8d23-45775b22a0b5", "node_type": null, "metadata": {}, "hash": "4f6cffdedf378908fa5ba43e071caf30c36f77f92562dcb866a64d47b708882b"}}, "hash": "688cc94dd1ae46ded3239bc4650bc58788c99ad8941f88e56e9a868be96f0966", "text": "plural build then run plural deploy to apply them.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/dns-setup/index.md)\",\n\"source_links\": []\n\"id\": 53,\n\"page_link\": \"https://docs.plural.sh/operations/managing-applications/add-application-to-cluster\",\n\"title\": \" Add Applications to your Cluster\",\n\"text\": \"# Add Applications to your Cluster\\n\\nHow to install additional applications to a running Plural cluster\\n\\nTo add a new application to your Plural cluster, you can use either the Cloud Shell or CLI (depending on your setup) or install directly from the Plural Console.\\n\\n## Install from the Cloud Shell\\n\\n[](/operations/managing-applications/add-application-to-cluster#install-from-the-cloud-shell)\\n\\nIf you originally set up your Plural cluster with the in-browser Cloud Shell option, you can easily add new installations from within the Cloud Shell. Navigate to the Cloud Shell tab and click the \\\"Install\\\" button in the left-hand pane.\\n\\n![Image](/assets/operations/cloud-shell-install.png)\\n\\nThis will re-launch your Install Wizard, where you can configure and deploy new applications. For more detailed information on the Install Wizard, refer to the In-Browser setup guide.\\n\\n[In-Browser setup guide](/getting-started/cloud-shell-quickstart)\\n\\nIf for any reason your deployment fails, try rebuilding and redeploying the application by clicking \\\"Rebuild\\\" from the installed apps dropdown.\\n\\n![Image](/assets/operations/application-rebuild.png)\\n\\n## Install from the CLI\\n\\n[](/operations/managing-applications/add-application-to-cluster#install-from-the-cli)\\n\\nIf you originally set up your Plural cluster with the local CLI, you can add new installations with a CLI command.\\n\\nRun plural bundle list <app-name> to find installation commands and information about each application available for install.\\n\\nTo install applications on Plural, run:\\n\\n```\\nplural bundle install <app-name> <bundle-name>\\n```\\n\\nAs of CLI version 0.6.19, the bundle name can be inferred from primary bundles, optionally shortening the command to:\\n\\n```\\nplural bundle install console\\n```\\n\\nAfter running the install command, you will be asked a few questions about how your app will be configured, including whether you want to enable Plural OIDC (single sign-on).\\n\\nWith all new bundles installed, run:\\n\\n```\\nplural build\\nplural deploy --commit \\\"added new applications\\\"\\n```\\n\\nOnce plural deploy has completed, you should be ready to log in to your application at {app-name}.{domain-name}.\\n\\n## Install from the Plural Console\\n\\n[](/operations/managing-applications/add-application-to-cluster#install-from-the-plural-console)\\n\\nYou can also easily install new applications from the Plural Console associated with a given cluster. Navigate to your Console and click the \\\"Install\\\" button in the top right corner.\\n\\n![Image](/assets/operations/console-install.png)\\n\\nThis will bring up the in-Console Install Wizard, where you can configure and deploy new applications. Once you're done configuring, you can track the deployment of your new apps from the Builds page.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/managing-applications/add-application-to-cluster.md)\",\n\"source_links\": []\n\"id\": 54,\n\"page_link\":", "start_char_idx": 184160, "end_char_idx": 187474, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f6251cc8-4e04-469a-8d23-45775b22a0b5": {"__data__": {"id_": "f6251cc8-4e04-469a-8d23-45775b22a0b5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "7bca798f-b60e-40d0-9d65-9e0b8942584e", "node_type": null, "metadata": {}, "hash": "688cc94dd1ae46ded3239bc4650bc58788c99ad8941f88e56e9a868be96f0966"}, "3": {"node_id": "d21b42da-f289-403a-84a7-3d8e2858991f", "node_type": null, "metadata": {}, "hash": "4d47eb36cb73bd8f78bc3b1b65e024c102205fdd004a143142ed50d4d9b40a48"}}, "hash": "4f6cffdedf378908fa5ba43e071caf30c36f77f92562dcb866a64d47b708882b", "text": "[]\n\"id\": 54,\n\"page_link\": \"https://docs.plural.sh/operations/managing-applications/add-users-to-application\",\n\"title\": \" Add Users to an Application\",\n\"text\": \"# Add Users to an Application\\n\\nHow to give end users access to an application installed using Plural.\\n\\nIf you've enabled OIDC for a set of applications, you can easily give users or groups access to that application. To enable access to a particular application, you can add permissions via the App Settings for a specific cluster or from the Plural Console. Any changes made in either location will be synced.\\n\\n## Through Plural App Settings\\n\\n[](/operations/managing-applications/add-users-to-application#through-plural-app-settings)\\n\\nAdmin users who have installed an application have the ability to add users to that application. To add users, navigate to the installed application from your Clusters Overview page. Click the three dots on the application and select \\\"App settings\\\" in the menu. Select OpenID Connect from the sidebar on the left, and add any new users or groups and click \\\"Save\\\" in the bottom right.\\n\\n![Image](/assets/operations/app-settings-add-users.png)\\n\\n## Through Plural Console\\n\\n[](/operations/managing-applications/add-users-to-application#through-plural-console)\\n\\nAny Plural Console user with permissions to manage users and groups can add users to any installed application. Navigate to the Plural Console and select your application from the Application Overview tab. Click the \\\"User management\\\" option from the menu on the left. This allows you to search for additional user or group bindings to add for access. Add any new users or groups and click \\\"Update\\\" in the bottom right.\\n\\n![Image](/assets/operations/add-users-console.png)\\n\\nFor applications not using OIDC, permissions are managed through the individual applications.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/managing-applications/add-users-to-application.md)\",\n\"source_links\": []\n\"id\": 56,\n\"page_link\": \"https://docs.plural.sh/operations/managing-applications/connect-application-db\",\n\"title\": \" Connect to an Application DB\",\n\"text\": \"# Connect to an Application DB\\n\\nHow to connect to the underlying database for a deployed application.\\n\\nFor various reasons, you may want to connect to the underlying database for an application. This could be for routine operations, verifying state, or for surgical procedures.\\n\\n## Connecting with the Plural CLI\\n\\n[](/operations/managing-applications/connect-application-db#connecting-with-the-plural-cli)\\n\\nYou can list all possible proxies for an application by running:\\n\\n```\\nplural proxy list <app-name>\\n```\\n\\nYou can connect directly to the database with the following command:\\n\\n```\\nplural proxy connect <app-name> db\\n```\\n\\n## Connecting with the Plural Console\\n\\n[](/operations/managing-applications/connect-application-db#connecting-with-the-plural-console)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/managing-applications/connect-application-db.md)\",\n\"source_links\": []\n\"id\": 57,\n\"page_link\": \"https://docs.plural.sh/operations/managing-applications/credentials-non-oidc\",\n\"title\": \" Find Credentials for non-OIDC Applications\",\n\"text\": \"# Find Credentials for non-OIDC Applications\\n\\nSurface creds for applications without OIDC enabled\\n\\nIf you need to find credentials for an application that does not have OIDC enabled, run the following command in either the Cloud Shell or", "start_char_idx": 187504, "end_char_idx": 191021, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d21b42da-f289-403a-84a7-3d8e2858991f": {"__data__": {"id_": "d21b42da-f289-403a-84a7-3d8e2858991f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "f6251cc8-4e04-469a-8d23-45775b22a0b5", "node_type": null, "metadata": {}, "hash": "4f6cffdedf378908fa5ba43e071caf30c36f77f92562dcb866a64d47b708882b"}, "3": {"node_id": "0fbc1517-7e8a-4363-b0e5-be12b94a2f3f", "node_type": null, "metadata": {}, "hash": "5ccfe058a4b4e2e9c955057c89da095b7a9ac829550141af2e08387517a76946"}}, "hash": "4d47eb36cb73bd8f78bc3b1b65e024c102205fdd004a143142ed50d4d9b40a48", "text": "that does not have OIDC enabled, run the following command in either the Cloud Shell or CLI:\\n\\n```\\nplural info <app-name>\\n```\\n\\nThis will surface credentials and any other useful information about the application.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/managing-applications/credentials-non-oidc.md)\",\n\"source_links\": []\n\"id\": 58,\n\"page_link\": \"https://docs.plural.sh/operations/managing-applications/customize-application\",\n\"title\": \" Customize an Application\",\n\"text\": \"# Customize an Application\\n\\nHow to tailor application configuration\\n\\nIf you need to modify the Helm or Terraform for a given application, you can do so directly from the Plural Console. Navigate to the application you want to update, and click the Configuration sub-tab.\\n\\n![Image](/assets/operations/configuration-helm.png)\\n\\nAdd or update your configuration, and click \\\"Commit\\\" in the bottom right corner to save your changes.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/managing-applications/customize-application.md)\",\n\"source_links\": []\n\"id\": 59,\n\"page_link\": \"https://docs.plural.sh/operations/managing-applications/delete-application\",\n\"title\": \" Delete an Application\",\n\"text\": \"# Delete an Application\\n\\nHow to uninstall your Plural applications.\\n\\nTo uninstall applications run the following command in the CLI or Cloud Shell:\\n\\n```\\nplural destroy <app-name>\\n```\\n\\nThis will:\\n\\nDestroy all Terraform resourcesBring down application in your cloudEmpty the Kubernetes namespace associated with your application\\n\\nThis will not:\\n\\nRemove application builds from your local Plural Git repositoryRemove application configuration values from context.yaml (you are prompted on whether to do this during the destroy process)\\n\\nWe don't remove certain information as it contains required configuration for spinning up the same instance again. If we removed that information, you would be unable to restore an application after destroying it.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/managing-applications/delete-application.md)\",\n\"source_links\": []\n\"id\": 60,\n\"page_link\": \"https://docs.plural.sh/operations/managing-applications\",\n\"title\": \" Managing Applications\",\n\"text\": \"# Managing Applications\\n\\nGuides to accomplishing day-to-day management of your installed Plural applications.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/managing-applications/index.md)\",\n\"source_links\": []\n\"id\": 61,\n\"page_link\": \"https://docs.plural.sh/operations/managing-applications/update-application\",\n\"title\": \" Update an Application\",\n\"text\": \"# Update an Application\\n\\nHow to change an application's version.\\n\\nUpdates to Plural applications are applied automatically based on a per-application setting. This setting supports telling Plural to only upgrade for Stable or Warm releases, as well as disabling automatic upgrades altogether. Here's what each of the settings mean:\\n\\nLatest: Everytime the Plural team tests and publishes a new release, you receive it.Stable: You only receive versions that have passed a set of Plural determined tests.None: You never receive automatic updates and have to manually update your application versions or change this setting.\\n\\nYou can change this setting in the App settings menu, accessible from each cluster's details page. You can dive into each cluster from the Clusters Overview page", "start_char_idx": 190974, "end_char_idx": 194477, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0fbc1517-7e8a-4363-b0e5-be12b94a2f3f": {"__data__": {"id_": "0fbc1517-7e8a-4363-b0e5-be12b94a2f3f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "d21b42da-f289-403a-84a7-3d8e2858991f", "node_type": null, "metadata": {}, "hash": "4d47eb36cb73bd8f78bc3b1b65e024c102205fdd004a143142ed50d4d9b40a48"}, "3": {"node_id": "39726474-c9c5-4236-aaac-2b7f9b99ffd4", "node_type": null, "metadata": {}, "hash": "fcd713d2ad335a9584427c226653af1cf241c642194cc6c04cacd14c3d599c2d"}}, "hash": "5ccfe058a4b4e2e9c955057c89da095b7a9ac829550141af2e08387517a76946", "text": "cluster's details page. You can dive into each cluster from the Clusters Overview page https://app.plural.sh/overview/clusters.\\n\\n[https://app.plural.sh/overview/clusters](https://app.plural.sh/overview/clusters)\\n\\n![Image](/assets/operations/update-application.png)\\n\\n## Rollback to a previous version\\n\\n[](/operations/managing-applications/update-application#rollback-to-a-previous-version)\\n\\nThis requires having the Plural Console installed. We'll need this to create an upgrade policy that tells Plural to not deploy an upgrade to your application, which is normally performed automatically unless disabled using the setting in our app. You could just disable upgrades altogether in the application as stated above, but then you'd lose out on easy upgrade delivery later.\\n\\n[Plural Console installed](/getting-started/admin-console)\\n\\nFirst, navigate to the Plural Console and select the Builds tab.\\n\\nClick on the gear icon in the top right to enter the Upgrade Policy section and then click Create More.\\n\\nHere is an example for a policy that will require approval before runninng plural deploy for Airflow.\\n\\n![Image](/assets/operations/airflow-approval-policy.png)\\n\\nThen head back to our marketplace, go to the repository page for your installed application, and click the Packages section in the sidebar. This will allow you to pick Helm charts and Terraform modules that correspond to previously deployed versions of your application.\\n\\n[marketplace](https://app.plural.sh/marketplace)\\n\\nOnce you click on the Helm chart, the associated application version for the Helm chart is displayed in the CHART.YAML section on the right. On the left will be a drop-down menu showing which version you are currently on. Scroll through the chart versions to find the application version that you want to rollback to. Then click Install in the top right.\\n\\nWe'll be honest. This process isn't ideal, so we're working on a simple rollback command in our CLI.\\n\\n## How Plural updates app versions\\n\\n[](/operations/managing-applications/update-application#how-plural-updates-app-versions)\\n\\nWe use a tool called Renovate to automate the updating of application version images. Renovate creates pull requests against our plural-artifacts GitHub repository to perform these updates on a regular basis. Here is an example of one of those PRs.\\n\\n[Renovate](https://github.com/renovatebot/renovate)\\n\\n[Here](https://github.com/pluralsh/plural-artifacts/pull/236)\\n\\nOnce we have tried out the changes and have confirmed that the new version is stable, we will merge the PR and the change will be available for all Plural installations to pull down when they wish to.\\n\\nOccasionally, we do manually update these versions to pull in application changes more quickly. If a current version is breaking user workflows or if a new version of an application is heavily requested, we will manually perform this operation.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/managing-applications/update-application.md)\",\n\"source_links\": []\n\"id\": 62,\n\"page_link\": \"https://docs.plural.sh/operations/network-configuration\",\n\"title\": \" Network Configuration\",\n\"text\": \"# Network Configuration\\n\\nIn your infrastructure, Plural will create a VPC, a public ingress controller, and a private ingress controller. Sometimes your organization or project will want to change our networking defaults to better suit your deployment.\\n\\n## VPC Subnet configuration\\n\\n[](/operations/network-configuration#vpc-subnet-configuration)\\n\\nYou\\u2019ll want to overwrite our default subnet configuration if you need to add the VPC that Plural creates to any adjacent", "start_char_idx": 194477, "end_char_idx": 198164, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "39726474-c9c5-4236-aaac-2b7f9b99ffd4": {"__data__": {"id_": "39726474-c9c5-4236-aaac-2b7f9b99ffd4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "0fbc1517-7e8a-4363-b0e5-be12b94a2f3f", "node_type": null, "metadata": {}, "hash": "5ccfe058a4b4e2e9c955057c89da095b7a9ac829550141af2e08387517a76946"}, "3": {"node_id": "3da81aa2-396d-49e3-a76f-023e8732b3aa", "node_type": null, "metadata": {}, "hash": "1b5ff0d8efe5e1df815f97659eb4efcec28ae91a34943fa9441b9b08452cd701"}}, "hash": "fcd713d2ad335a9584427c226653af1cf241c642194cc6c04cacd14c3d599c2d", "text": "configuration if you need to add the VPC that Plural creates to any adjacent VPCs/networks in your infrastructure.\\n\\nFrequently, VPC peering APIs require all subnets to be non-overlapping, which isn't guaranteed from our defaults. This can always be updated in bootstrap/terrraform/main.tf (As a reference, CIDR blocks follow this format: 10.xx.xx.xx/yy, the examples below are placeholders.)\\n\\nOn AWS, update the aws-bootstrap modules configuration with:\\n\\n```\\npublic_subnets = [\\\"your.cidr.pub.1\\\", \\\"your.cidr.pub.2\\\", \\\"your.cidr.pub.3\\\"]\\nprivate_subnets = [\\\"your.cidr.priv.1\\\", \\\"your.cidr.priv.2\\\", \\\"your.cidr.priv.3\\\"]\\nworker_private_subnets = [\\\"your.cidr.worker.1\\\", \\\"your.cidr.worker.2\\\", \\\"your.cidr.worker.3\\\"]\\n```\\n\\nOn GCP, update the gcp-bootstrap modules configuration with:\\n\\n```\\nvpc_subnetwork_cidr_range = \\\"your.cidr\\\"\\n\\n# you might also want to update cluster_secondary_range_cidr\\n# and services_secondary_range_cidr\\n```\\n\\nWith Azure, update the azure-bootstrap modules configuration with:\\n\\n```\\naddress_space = \\\"your.cidr\\\"\\nsubnet_prefixes = [\\\"your.cidr.pref\\\"]\\n```\\n\\n###### Warning:\\n\\nNote that updating these will likely cause the VPC to be replaced, which will recreate your cluster. We recommend that you destroy your cluster before applying network config modifications to it.\\n\\n[destroy your cluster](/operations/uninstall)\\n\\n## Configuring VPC Peering\\n\\n[](/operations/network-configuration#configuring-vpc-peering)\\n\\nPlural creates a fresh VPC and Kubernetes cluster for deploying applications. This ensures that we have a clean environment to deploy into and minimizes disruption to existing systems. It does come with the tradeoff of slightly increased network complexity, but most cloud providers can bridge this using VPC peering. This is a technology that effectively allows you to combine the address spaces of two VPCs in the cloud you operate in.\\n\\nThere is a caveat: the VPCs should have no overlapping subnets in addition to some other complexities per cloud provider. Refer to the guide above on subnet configuration before proceeding.\\n\\nPlural makes it easy to add additional Terraform to the stacks we generate. Effectively, as long as you don\\u2019t modify the [main.tf](http://main.tf) file at the root of a Terraform folder, or any of the module folders, we\\u2019ll preserve your Terraform between builds and apply it for you appropriately as changes arise. For configuring a VPC peer, let\\u2019s create a new Terraform file called [network.tf](http://network.tf) and drop the configuration in there for your respective cloud:\\n\\n```\\nresource \\\"aws_vpc_peering_connection\\\" \\\"foo\\\" {\\n   peer_owner_id = \\\"my-owner-id\\\" # Use appropriate values here.\\n   peer_vpc_id   = \\\"peer-vpc-id\\\"\\n   vpc_id        = module.aws-bootstrap.vpc.id\\n}\\n```\\n\\n```\\ndata \\\"google_compute_network\\\" \\\"peer\\\" {\\n   name = \\\"peer-network\\\"\\n}\\n\\nresource \\\"google_compute_network_peering\\\" \\\"peering1\\\" {\\n   name         = \\\"plrl-peer\\\"\\n   network      = module.gcp-bootstrap.vpc_network.self_link\\n ", "start_char_idx": 198175, "end_char_idx": 201236, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3da81aa2-396d-49e3-a76f-023e8732b3aa": {"__data__": {"id_": "3da81aa2-396d-49e3-a76f-023e8732b3aa", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "39726474-c9c5-4236-aaac-2b7f9b99ffd4", "node_type": null, "metadata": {}, "hash": "fcd713d2ad335a9584427c226653af1cf241c642194cc6c04cacd14c3d599c2d"}, "3": {"node_id": "ba96411f-011b-4f02-b308-a2943a74b682", "node_type": null, "metadata": {}, "hash": "35c3a5414996f8094e959fc913407d3c364e9b0a4f3146edbd75032276937a7e"}}, "hash": "1b5ff0d8efe5e1df815f97659eb4efcec28ae91a34943fa9441b9b08452cd701", "text": "= module.gcp-bootstrap.vpc_network.self_link\\n   peer_network = data.google_compute_network.peer.self_link\\n}\\n```\\n\\n```\\ndata \\\"azure_rm_virtual_network\\\" \\\"peer\\\" {\\n   resource_group_name = \\\"your-azure-resource-group\\\" # Use appropriate values here.\\n   name = \\\"peer-network-name\\\"\\n}\\n\\nresource \\\"azurerm_virtual_network_peering\\\" \\\"example-1\\\" {\\n   name                      = \\\"plrl-peer\\\"\\n   resource_group_name       = \\\"your-azure-resource-group\\\"\\n   virtual_network_name      = module.azure-bootstrap.network.name\\n   remote_virtual_network_id = data.azurerm_virtual_network.peer.id\\n}\\n```\\n\\n###### Warning:\\n\\nAs mentioned earlier, consult the section on customizing subnets to ensure your vpc subnets don\\u2019t overlap when attempting to peer to existing networks.\\n\\n## Adding an IP Allowlist to the Public Ingress Controller\\n\\n[](/operations/network-configuration#adding-an-ip-allowlist-to-the-public-ingress-controller)\\n\\nPlural ships with two ingress controllers, both using the open-source ingress-nginx project. Some users might want to restrict what IPs the public ingress is available on. For example, this is required for locking it down to an office VPN. We can implement this by updating Kubernetes' loadBalancerSourceRanges attribute on LoadBalancer services. To configure this, head to your Plural repository and modify ingress-nginx/helm/ingress-nginx/values.yaml by overlaying:\\n\\n[ingress-nginx](https://github.com/kubernetes/ingress-nginx)\\n\\n```\\ningress-nginx:\\n  ingress-nginx:\\n    controller:\\n      service:\\n        loadBalancerSourceRanges:\\n          - cidr.1\\n          - cidr.2\\n        annotations:\\n          # this is only needed for aws\\n          service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: preserve_client_ip.enabled=true\\n```\\n\\nOnce that\\u2019s updated, run plural deploy --commit \\\"adding ip allowlist\\\" and it will update the service for you and push the changes upstream to your git repository.\\n\\nFor many users this will be sufficient, but some may prefer the application not have a public network address at all. In this case, check out the next section on using our private ingress controller.\\n\\n## Using our Private Ingress Controller\\n\\n[](/operations/network-configuration#using-our-private-ingress-controller)\\n\\nIf you only want your application directly addressable on a private network via ingress, e.g. if simply allowlisting source IPs is not secure enough for you, you can rewire an application to use our internal ingress controller. In general, you need to do a little diving to find exactly how the application\\u2019s Helm chart configures its ingresses, and modify it to wire in the internal-nginx ingress class. Then run plural deploy --commit \\\"update app to use private ingress\\\" and it\\u2019ll apply for you.\\n\\nLet's use Dagster as an example. To make Dagster only use the private ingress, apply this yaml on dagster/helm/dagster/values.yaml:\\n\\n```\\ndagster:\\n  dagster:\\n    ingress:\\n      annotations:\\n        kubernetes.io/ingress.class:", "start_char_idx": 201255, "end_char_idx": 204311, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ba96411f-011b-4f02-b308-a2943a74b682": {"__data__": {"id_": "ba96411f-011b-4f02-b308-a2943a74b682", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "3da81aa2-396d-49e3-a76f-023e8732b3aa", "node_type": null, "metadata": {}, "hash": "1b5ff0d8efe5e1df815f97659eb4efcec28ae91a34943fa9441b9b08452cd701"}, "3": {"node_id": "aad4e1a9-8e51-4349-8a25-d042af138f70", "node_type": null, "metadata": {}, "hash": "d88fbad890b827bb64c9546f92bc69c7f91ad30e5288aa79bae053939bb176dc"}}, "hash": "35c3a5414996f8094e959fc913407d3c364e9b0a4f3146edbd75032276937a7e", "text": "       kubernetes.io/ingress.class: 'internal-nginx'\\n```\\n\\nSometimes an application will require you to update an attribute called ingressClass. This will depend on whether the Helm chart is still using the legacy annotation-based ingress class flag or if it has migrated to the new first-class spec field.\\n\\nWe\\u2019ll also build out configuration overlays in our console in the \\u201cConfiguration\\u201d tab to edit these, so you don\\u2019t have to scavenge for the exact yaml update to do this, although that\\u2019s still WIP.\\n\\n###### Warning:\\n\\nWe\\u2019ve occasionally seen it take some time for the ingress controllers to swap classes. If you want to accelerate that, you can run kubectl delete ingress <ingress-name> -n <app-name> then plural bounce <app-name> to speed things along. You can usually find the ingresses in the components tab in our console.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/network-configuration.md)\",\n\"source_links\": []\n\"id\": 63,\n\"page_link\": \"https://docs.plural.sh/operations/pricing-calculator\",\n\"title\": \" Pricing Calculator\",\n\"text\": \"# Pricing Calculator\\n\\nEstimate the costs of using Plural to running the applications and configuration you need for your business with our Pricing Calculator.\\n\\n###### Info: How do we calculate cloud costs?\\n\\nBy default, Plural deploys the following on a given provider:\\n\\nThe Kubernetes control plane3 nodes, each with 2 cores / 8GB\\n\\nEach initial deployment has a certain amount of headroom for installing applications and will scale accordingly as more are added. Costs to Plural are calculated based on which plan is chosen; Plural Professional is priced by the number of users and clusters.\\n\\n###### Info: What is a cluster?\\n\\nA cluster is a set of worker machines (called nodes) that run containerized applications. A single cluster can contain many different applications that work together to perform various workflows. A single cluster is often sufficient for getting started, but it can be beneficial in some circumstances to have multiple clusters running (e.g., a development and production cluster).\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/pricing-calculator.md)\",\n\"source_links\": []\n\"id\": 64,\n\"page_link\": \"https://docs.plural.sh/operations/security\",\n\"title\": \" Security Concepts\",\n\"text\": \"# Security Concepts\\n\\nLearn about what Plural has access to at various steps of deployment.\\n\\n## Cloud Access\\n\\n[](/operations/security#cloud-access)\\n\\n### Plural CLI\\n\\n[](/operations/security#plural-cli)\\n\\nPlural does not have access to any cloud environments when deployed through the CLI. We generate deployment manifests in the Plural Git repository and then use your configured cloud provider's CLI on your behalf. We cannot perform anything outside of deploying and managing the manifests that are created in your Plural Git repository.\\n\\n### Plural Cloud Shell\\n\\n[](/operations/security#plural-cloud-shell)\\n\\nPlural does have access to your cloud credentials when deployed through the Cloud Shell. In order to streamline the Cloud Shell experience, we securely store cloud credentials to create resources on your behalf. You can eject from the Cloud Shell to the CLI at any time to save your configuration and revoke our access. This is done with the following steps:\\n\\n[Install the Plural CLI](/getting-started/quickstart)\\n\\n## Plural", "start_char_idx": 204329, "end_char_idx": 207770, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "aad4e1a9-8e51-4349-8a25-d042af138f70": {"__data__": {"id_": "aad4e1a9-8e51-4349-8a25-d042af138f70", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "ba96411f-011b-4f02-b308-a2943a74b682", "node_type": null, "metadata": {}, "hash": "35c3a5414996f8094e959fc913407d3c364e9b0a4f3146edbd75032276937a7e"}, "3": {"node_id": "c3e005fe-a067-4905-a364-c840ef64cb21", "node_type": null, "metadata": {}, "hash": "0c87d300354d99b8243a23ee6e09c0fc11dbf823ce947bd5971375656ad69f1d"}}, "hash": "d88fbad890b827bb64c9546f92bc69c7f91ad30e5288aa79bae053939bb176dc", "text": "the Plural CLI](/getting-started/quickstart)\\n\\n## Plural Console\\n\\n[](/operations/security#plural-console)\\n\\nOur console has elevated permissions when running in your Plural Kubernetes cluster, but it runs in its own environment to alleviate security concerns. Its permissions are required in order to listen for new versions of packages to apply automated updates to your applications.\\n\\n## GitHub\\n\\n[](/operations/security#github)\\n\\nWhen using the CLI or Cloud Shell, Plural will receive the following permissions:\\n\\nCreate GitHub repositories on your behalfCommit changes to repositories that Plural has created\\n\\nPlural does not have access to repositories that have not been created by Plural.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/security/index.md)\",\n\"source_links\": []\n\"id\": 65,\n\"page_link\": \"https://docs.plural.sh/operations/uninstall\",\n\"title\": \" Destroying the Cluster and Installations\",\n\"text\": \"# Destroying the Cluster and Installations\\n\\nHow do I bring things down safely?\\n\\n## Overview\\n\\n[](/operations/uninstall#overview)\\n\\nPlural provides options to uninstall specific applications, tear down your clusters, and wipe any references to installations to start from zero. Uninstalling any Plural application or an entire Plural installation is a one-liner in your terminal or Cloud Shell. If you want to delete your Plural installation, make sure to run plural destroy before deleting your Git repository. If you delete your Git repository first, you will have to manually clean up all the resources that Plural has provisioned for you.\\n\\n## Purging the Cloud Shell\\n\\n[](/operations/uninstall#purging-the-cloud-shell)\\n\\nIf you created a Plural installation in our Cloud Shell and want to move it to your local dev environment, you can sync your shell and delete the Cloud Shell instance from our servers. To sync your shell and delete your current Cloud Shell instance, use:\\n\\n```\\nplural shell sync\\nplural shell purge\\n```\\n\\nThe purge command will destroy your current Cloud Shell instance, but preserve your existing cluster and installations. Your account will still be pinned to the same cloud provider chosen at the beginning of your onboarding.\\n\\n## Uninstalling Individual Applications\\n\\n[](/operations/uninstall#uninstalling-individual-applications)\\n\\nTo uninstall specific applications, use:\\n\\n```\\nplural destroy <app-name>\\n```\\n\\nThis will do things like destroying terraform resources and emptying k8s namespaces, but it won't remove the application builds from your local repo, or the application configuration values from context.yaml.\\n\\n## Uninstalling your Entire Installation\\n\\n[](/operations/uninstall#uninstalling-your-entire-installation)\\n\\nTo uninstall your entire Plural installation and Kubernetes cluster, run:\\n\\n```\\nplural destroy\\n```\\n\\n###### Danger:\\n\\nOnly do this if you're absolutely sure you want to bring down all associated resources with this repository.\\n\\nBy default, previously installed applications will still appear in your installed applications page on app.plural.sh after running plural destroy. To remove all installation history, run plural repos reset as documented below.\\n\\n[installed applications](https://app.plural.sh/installed)\\n\\n## Terraform Destroy\\n\\n[](/operations/uninstall#terraform-destroy)\\n\\nTo tear down the current cluster but leave installation references as pointers to the Helm/Terraform, cd into bootstrap/terraform and run:\\n\\n```\\nterraform destroy\\n```\\n\\n## Remove Installation", "start_char_idx": 207745, "end_char_idx": 211292, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c3e005fe-a067-4905-a364-c840ef64cb21": {"__data__": {"id_": "c3e005fe-a067-4905-a364-c840ef64cb21", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "aad4e1a9-8e51-4349-8a25-d042af138f70", "node_type": null, "metadata": {}, "hash": "d88fbad890b827bb64c9546f92bc69c7f91ad30e5288aa79bae053939bb176dc"}, "3": {"node_id": "6bdabac3-e735-49e4-950a-6adacc70ae05", "node_type": null, "metadata": {}, "hash": "29b245a6c3968ed123dd5e8718c8adf397286a110859379c635627317aa7f930"}}, "hash": "0c87d300354d99b8243a23ee6e09c0fc11dbf823ce947bd5971375656ad69f1d", "text": "destroy\\n```\\n\\n## Remove Installation References\\n\\n[](/operations/uninstall#remove-installation-references)\\n\\nBy default, app.plural.sh will retain your list of \\u201cinstalled apps\\u201d. After running plural destroy, if you also want to remove your installation history on app.plural.sh you can run:\\n\\n```\\nplural repos reset\\n```\\n\\nThis command does not interact with any infrastructure, but removes references to all installations. This will also reset any association with a specific cloud provider.\\n\\n## Fully Start Over\\n\\n[](/operations/uninstall#fully-start-over)\\n\\nTo tear down a cluster and fully start over, run plural destroy and then plural repos reset.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/operations/uninstall.md)\",\n\"source_links\": []\n\"id\": 66,\n\"page_link\": \"https://docs.plural.sh/reference/api/console-api\",\n\"title\": \" Console API\",\n\"text\": \"# Console API\\n\\nWhile the console API is not public facing, it's still available for you to explore and use if you wish. It has a built-in graphql interface like Plural itself, accessible at https://console.domain.com/graphiql, with the actual graphql api available at https://console.domain.com/gql.\\n\\n[https://console.domain.com/graphiql](https://console.domain.com/graphiql)\\n\\n[https://console.domain.com/gql](https://console.domain.com/gql)\\n\\nThe console does not have an API key system like Plural does, so you'll need to pull out a bearer token from the web app to interact with it directly. You can find this by just looking at the Authorization headers for gql requests in chrome inspector.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/reference/api/console-api.md)\",\n\"source_links\": []\n\"id\": 67,\n\"page_link\": \"https://docs.plural.sh/reference/api\",\n\"title\": \" API / Developer Tools\",\n\"text\": \"# API / Developer Tools\\n\\n## Articles in this section:\\n\\nPlural APIConsole API\\n\\n[Plural API](/reference/api/plural-api)\\n\\n[Console API](/reference/api/console-api)\\n\\nPlural has two main components, each with their own graphql API:\\n\\nPlural - available at https://app.plural.sh/gqlPlural Console - deployable in any plural kubernetes cluster, and accessible at https://console.domain.com/gql\\n\\n[Plural](https://app.plural.sh/graphiql)\\n\\n[Plural Console](https://app.plural.sh/repository/a051a0bf-61b5-4ab5-813d-2c541c83a979)\\n\\nEach have a graphiql dashboard which can be used to play around at will with the APIs. You can also use the schema explorer to view all the data types and query/mutation fields available for whatever automation you'd like to build.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/reference/api/index.md)\",\n\"source_links\": []\n\"id\": 68,\n\"page_link\": \"https://docs.plural.sh/reference/api/plural-api\",\n\"title\": \" Plural API\",\n\"text\": \"# Plural API\\n\\nYou can explore the plural API in more depth using our graphiql console, viewable at https://app.plural.sh/graphiql.\\n\\n[https://app.plural.sh/graphiql](https://app.plural.sh/graphiql)\\n\\nYou'll need to do two things to allow the graphiql interface to be functional:\\n\\nConfigure", "start_char_idx": 211311, "end_char_idx": 214451, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "6bdabac3-e735-49e4-950a-6adacc70ae05": {"__data__": {"id_": "6bdabac3-e735-49e4-950a-6adacc70ae05", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "c3e005fe-a067-4905-a364-c840ef64cb21", "node_type": null, "metadata": {}, "hash": "0c87d300354d99b8243a23ee6e09c0fc11dbf823ce947bd5971375656ad69f1d"}, "3": {"node_id": "d338f7d0-d3dd-4df4-9f00-817a35c1d016", "node_type": null, "metadata": {}, "hash": "fd35bac926de554ebabf74d7e589ea8a9382aaf930cb898471474ed6c833f276"}}, "hash": "29b245a6c3968ed123dd5e8718c8adf397286a110859379c635627317aa7f930", "text": "to do two things to allow the graphiql interface to be functional:\\n\\nConfigure the endpoint to point to https://app.plural.sh/gqlAdd your access token as an authorization header with Bearer <access token> as the format.\\n\\n###### Info:\\n\\nYou can use the docs here to learn how to create API tokens\\n\\n[here](/operations/auth-access-control/api-tokens)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/reference/api/plural-api.md)\",\n\"source_links\": []\n\"id\": 69,\n\"page_link\": \"https://docs.plural.sh/reference/cli-reference\",\n\"title\": \" CLI Command Reference\",\n\"text\": \"# CLI Command Reference\\n\\nOverview of all Plural CLI commands.\\n\\nTo install the Plural CLI, use:\\n\\n```\\nbrew install pluralsh/plural/plural\\n```\\n\\nRefer to the CLI quickstart for more information.\\n\\n###### Info:\\n\\nMake sure to update your CLI to the latest version to pick up any new features.\\n\\n## Synopsis\\n\\n[](/reference/cli-reference#synopsis)\\n\\n```\\nplural [options] <command> [parameters]\\n```\\n\\nUse plural command help for information on a specific command. The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets.\\n\\n## Global Options\\n\\n[](/reference/cli-reference#global-options)\\n\\n--profile-file [FILE] configure your config.yml profile FILE [$PLURAL_PROFILE_FILE]\\n\\n--encryption-key-file [FILE] configure your encryption key FILE [$PLURAL_ENCRYPTION_KEY_FILE]\\n\\n--help, -h show help\\n\\n## Commands\\n\\n[](/reference/cli-reference#commands)\\n\\nGeneral\\n\\nversion, v, vsn Gets cli version info\\n\\nbuild, b Builds your workspace\\n\\ndeploy, d Deploys the current workspace. This command will first sniff out git diffs in workspaces, topsort them, then apply all changes.\\n\\ndiff, df Diffs the state of the current workspace with the deployed version and dumps results to diffs/\\n\\nbounce Redeploys the charts in a workspace\\n\\ndestroy Iterates through all installations in reverse topological order, deleting helm installations and terraform\\n\\ninit Initializes plural within a git repo\\n\\npreflights Runs provider preflight checks\\n\\nbundle Commands for installing and discovering installation bundles\\n\\nstack Commands for installing and discovering plural stacks\\n\\npackages Commands for managing your installed packages\\n\\nlink links a local package into an installation repo\\n\\nunlink Unlinks a linked package\\n\\nhelp, h Shows a list of commands or help for one command\\n\\nAPI\\n\\nrepos View and manage plural repositories\\n\\napi Inspect the plural api\\n\\nDebugging\\n\\nwatch Watches applications until they become ready\\n\\nwait Waits on applications until they become ready\\n\\ninfo Generates a console dashboard for the namespace of this repo\\n\\nproxy Proxies into running processes in your cluster\\n\\nlogs Commands for tailing logs for specific apps\\n\\nops Commands for simplifying cluster operations\\n\\nai Utilize openai to get help with your setup\\n\\nMiscellaneous\\n\\nutils Useful plural utilities\\n\\nvpn Interacting with the plural vpn\\n\\nPublishing\\n\\napply Applies the current pluralfile\\n\\ntest Validate a values templace\\n\\npush Utilities for pushing tf or helm packages\\n\\ntemplate, tpl Templates a helm chart to be uploaded to", "start_char_idx": 214420, "end_char_idx": 217640, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d338f7d0-d3dd-4df4-9f00-817a35c1d016": {"__data__": {"id_": "d338f7d0-d3dd-4df4-9f00-817a35c1d016", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "6bdabac3-e735-49e4-950a-6adacc70ae05", "node_type": null, "metadata": {}, "hash": "29b245a6c3968ed123dd5e8718c8adf397286a110859379c635627317aa7f930"}, "3": {"node_id": "50021089-d5d5-40e1-ba9b-09cde730be6e", "node_type": null, "metadata": {}, "hash": "412f1f5b5293e1785ed1400a8ea0185e738eb962a34fa3f5c4f85a54fcdea10e"}}, "hash": "fd35bac926de554ebabf74d7e589ea8a9382aaf930cb898471474ed6c833f276", "text": "packages\\n\\ntemplate, tpl Templates a helm chart to be uploaded to plural\\n\\nfrom-grafana Imports a grafana dashboard to a plural crd\\n\\nUser Profile\\n\\nlogin Logs into plural and saves credentials to the current config profile\\n\\nimport Imports plural config from another file\\n\\ncrypto Plural encryption utilities\\n\\nconfig, conf Reads/modifies cli configuration\\n\\nprofile Commands for managing config profiles for plural\\n\\nWorkspace\\n\\ncreate Scaffolds the resources needed to create a new plural repository\\n\\nrepair Commits any new encrypted changes in your local workspace automatically\\n\\nvalidate, v Validates your workspace\\n\\ntopsort Renders a dependency-inferred topological sort of the installations in a workspace\\n\\ndependencies, deps Prints ordered dependencies for a repo in your workspace\\n\\nserve Launch the server\\n\\nshell Manages your cloud shell\\n\\nworkspace, wkspace Commands for managing installations in your workspace\\n\\noutput Commands for generating outputs from supported tools\\n\\nbuild-context Creates a fresh context.yaml for legacy repos\\n\\nchanged Shows repos with pending changes\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/reference/cli-reference.md)\",\n\"source_links\": []\n\"id\": 70,\n\"page_link\": \"https://docs.plural.sh/reference/configuring-cloud-provider\",\n\"title\": \" Cloud Provider CLI Setup\",\n\"text\": \"# Cloud Provider CLI Setup\\n\\nMake sure that your cloud provider CLI is properly set up before installing Plural.\\n\\nBefore you can start installing your Kubernetes cluster and applications with the Plural CLI, you will need to make sure that your cloud provider CLI is set up correctly.\\n\\n###### Info:\\n\\nIf you have already configured and installed your cloud provider CLI and are still seeing errors, make sure that you are on the latest version of the CLI.\\n\\n## Installation\\n\\n[](/reference/configuring-cloud-provider#installation)\\n\\nFollow the provider-specific instructions below.\\n\\nFollow the instructions here to install your AWS cli.Verify that the cli has been added to your $PATHFollow the instructions here to configure your cli and connect it to your aws consoleVerify that your cli has been properly configured by running\\n\\n[here](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html)\\n\\n[here](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html)\\n\\n```\\naws configure list\\n```\\n\\nYou should see a set of values that looks like this:\\n\\n```\\nName                    Value             Type    Location\\n      ----                    -----             ----    --------\\n   profile                <not set>             None    None\\naccess_key     ****************RUG2 shared-credentials-file\\nsecret_key     ****************hJUU shared-credentials-file\\n    region                us-east-2      config-file    ~/.aws/config\\n```\\n\\nIf you are deploying to an AWS account with SSO enabled, you'll need to pass that specific AWS profile to the Plural CLI, or it won't be able to create resources on your behalf. You can do this with the following two steps:\\n\\nIf you need to", "start_char_idx": 217652, "end_char_idx": 220762, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "50021089-d5d5-40e1-ba9b-09cde730be6e": {"__data__": {"id_": "50021089-d5d5-40e1-ba9b-09cde730be6e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "d338f7d0-d3dd-4df4-9f00-817a35c1d016", "node_type": null, "metadata": {}, "hash": "fd35bac926de554ebabf74d7e589ea8a9382aaf930cb898471474ed6c833f276"}, "3": {"node_id": "48073fb7-a64e-495f-9a59-81c0922ca5cd", "node_type": null, "metadata": {}, "hash": "ff629dd8999813768d116a62e75e2b907338fab49c66ab71ae4b6e5a63236e5a"}}, "hash": "412f1f5b5293e1785ed1400a8ea0185e738eb962a34fa3f5c4f85a54fcdea10e", "text": "You can do this with the following two steps:\\n\\nIf you need to update your AWS CLI for any reason, make sure to run plural wkspace kube-init to regenerate your kubeconfig to be compatible with the changes. This will be required if you're on a new machine, were using a different Kubernetes cluster, or if the kubeconfig has stale credentials.\\n\\nFollow the instructions here to install the gcloud CLI.Verify that the CLI has been added to your $PATHCreate a new project in gcp via the CLI:\\n\\n[here](https://cloud.google.com/sdk/docs/install)\\n\\n```\\ngcloud projects create example-project-name\\n```\\n\\nEnable the Kubernetes Engine API for the project you just created.Enable the Google DNS API for the project you just created.Run gcloud init and follow the prompts to configure the gcloud CLI and connect it to the project you just created.Verify that your CLI has been properly configured. It should look something like this. Make sure that your active configuration is set to the project you just created.\\n\\n[Enable the Kubernetes Engine API](https://cloud.google.com/kubernetes-engine/docs/quickstart)\\n\\n[Enable the Google DNS API](https://excelnotes.com/enable-cloud-dns-api/)\\n\\n```\\n> gcloud config list\\n[compute]\\nregion = us-east1\\nzone = us-east1-b\\n[core]\\naccount = yirenlu92@gmail.com\\ndisable_usage_reporting = True\\nproject = example-project-name\\n\\nYour active configuration is: [example-project-name]\\n```\\n\\nIt can be the case that you have multiple accounts or projects in GCP and previously have configured your gcloud CLI to point to a different project. Verify your active configuration with\\n\\n```\\n> gcloud config configurations list\\nNAME                  IS_ACTIVE  ACCOUNT              PROJECT               COMPUTE_DEFAULT_ZONE  COMPUTE_DEFAULT_REGION\\npersonalprj           False      yirenlu92@gmail.com  personalprj           us-east1-b            us-east1\\nexample-project-name  True       yirenlu92@gmail.com  example-project-name  us-east1-b            us-east1\\n```\\n\\nTo change the active configuration run\\n\\n```\\n> gcloud config configurations activate example-project-name\\nActivated [example-project-name].\\n```\\n\\nTo refresh the login for this gcloud configuration run\\n\\n```\\n> gcloud auth login\\n```\\n\\nIn addition to the gcloud CLI, the Plural CLI, as well as the employed GCP Terraform providers, also use the gcloud SDK. So you will also need to setup Application Default Credentials. Make sure to use the same account as you used to authenticate your active gcloud CLI configuration!\\n\\n[Application Default Credentials](https://cloud.google.com/sdk/gcloud/reference/auth/application-default/login)\\n\\n```\\n> gcloud auth application-default login\\n```\\n\\nFailure to do this could result in project requested not found or permission related errors further along.\\n\\nFollow the instructions here to install your Azure CLI.Follow the instructions here to sign into your Azure CLI.\\n\\n[here](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli)\\n\\n[here](https://docs.microsoft.com/en-us/cli/azure/get-started-with-azure-cli)\\n\\n######", "start_char_idx": 220768, "end_char_idx": 223860, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "48073fb7-a64e-495f-9a59-81c0922ca5cd": {"__data__": {"id_": "48073fb7-a64e-495f-9a59-81c0922ca5cd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "50021089-d5d5-40e1-ba9b-09cde730be6e", "node_type": null, "metadata": {}, "hash": "412f1f5b5293e1785ed1400a8ea0185e738eb962a34fa3f5c4f85a54fcdea10e"}, "3": {"node_id": "21f97cf2-dc9e-4a78-89d4-b1a4fbc2b9a7", "node_type": null, "metadata": {}, "hash": "c7fdbba57d600df3e9e1ee3e0f64b201800a9fd98bacb5695b2492e71d129d24"}}, "hash": "ff629dd8999813768d116a62e75e2b907338fab49c66ab71ae4b6e5a63236e5a", "text": "Warning:\\n\\nKeep in mind that your Azure subscription type can limit the availability of your VMs, so make sure to tailor your subscription to the availability requirements of your infrastructure.\\n\\n## Permissions\\n\\n[](/reference/configuring-cloud-provider#permissions)\\n\\nSince Plural is responsible for creating over 50 different applications, what permissions are required will vary based on what you're deploying. In most cases, Admin access is the simplest to use. For example, when provisioning Airbyte, we'll need to create an IAM role and IRSA binding to the EKS control plane, which is an Admin only action.\\n\\n#### Service Account Permissions\\n\\n[](/reference/configuring-cloud-provider#service-account-permissions)\\n\\nWhen deploying via GCP, you may run into a Terraform error around permissions. Plural will need to create a various set of resources in order to make sure that your Kubernetes cluster is configured correctly. We recommend attaching the following permission roles to the service account associated with your CLI or Cloud Shell:\\n\\nownerstorage.admin\\n\\nFollow these steps to authorize your GCloud CLI with a new or existing Service Account.\\n\\n[these steps](https://cloud.google.com/sdk/docs/authorizing#authorize_with_a_service_account)\\n\\nNo special permissions necessary, but as mentioned above, providing Plural Administrator access will prevent issues around application specific requirements.\\n\\nNo special permissions necessary, but as mentioned above, providing Plural Administrator access will prevent issues around application specific requirements. Make sure you're specifically providing Administrator access for the resource group you're deploying Plural into.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/reference/configuring-cloud-provider.md)\",\n\"source_links\": []\n\"id\": 73,\n\"page_link\": \"https://docs.plural.sh/reference\",\n\"title\": \" Reference\",\n\"text\": \"# Reference\\n\\nNon-Operational Reference\\n\\nPlural's reference is split up into a few sections. Here are short descriptions for what they are:\\n\\nWorkspacesLearn about how Plural workspaces are organized and how you can share your repositories with others securely.Identity and Access ManagementLearn about setting up RBAC in Plural and how we manage Auth for access to your applications.DebuggingThe tools you need to figure out what's going on with your Plural installation.APIFor those that want to integrate Plural into their applications or run commands programmatically.\\n\\n[Workspaces](/reference/workspace/index)\\n\\nLearn about how Plural workspaces are organized and how you can share your repositories with others securely.\\n\\n[Identity and Access Management](/reference/identity-and-access-management/index)\\n\\nLearn about setting up RBAC in Plural and how we manage Auth for access to your applications.\\n\\n[Debugging](/reference/debugging/index)\\n\\nThe tools you need to figure out what's going on with your Plural installation.\\n\\n[API](/reference/api/introduction/index)\\n\\nFor those that want to integrate Plural into their applications or run commands programmatically.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/reference/index.md)\",\n\"source_links\": []\n\"id\": 74,\n\"page_link\": \"https://docs.plural.sh/reference/operator-guides/adding-kubecost-for-cost-analysis\",\n\"title\": \"Docs | Plural\",\n\"text\": \"# Page not found\\n\\nSorry, this page doesn't appear to exist. Would you like to vist the home page?\\n\\n[home page](/)\",\n\"source_links\": []\n\"id\": 75,\n\"page_link\": \"https://docs.plural.sh/reference/operator-guides\",\n\"title\": \" Catalog Overview\",\n\"text\": \"# Catalog Overview\\n\\nApplications you can install with", "start_char_idx": 223913, "end_char_idx": 227606, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "21f97cf2-dc9e-4a78-89d4-b1a4fbc2b9a7": {"__data__": {"id_": "21f97cf2-dc9e-4a78-89d4-b1a4fbc2b9a7", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "48073fb7-a64e-495f-9a59-81c0922ca5cd", "node_type": null, "metadata": {}, "hash": "ff629dd8999813768d116a62e75e2b907338fab49c66ab71ae4b6e5a63236e5a"}, "3": {"node_id": "97e006e4-ad29-4a81-81c1-0022e3b1d0b6", "node_type": null, "metadata": {}, "hash": "a39775f684e478d90f05e56c87fb3a81425c5d2fe531270c504668adb8fae3cd"}}, "hash": "c7fdbba57d600df3e9e1ee3e0f64b201800a9fd98bacb5695b2492e71d129d24", "text": "Catalog Overview\",\n\"text\": \"# Catalog Overview\\n\\nApplications you can install with Plural.\\n\\nHere is where all the documentation for configuring the installation of your Plural apps live.\\n\\n## Application Updates\\n\\n[](/applications#application-updates)\\n\\nWe use a tool called Renovate to automate creation of PRs to update Application version images to newer versions. Here is an example of one of these PRs.\\n\\n[Renovate](https://github.com/renovatebot/renovate)\\n\\n[Here](https://github.com/pluralsh/plural-artifacts/pull/288)\\n\\nOnce we have tried out the changes and have confirmed that the new version works, we will merge the PR and the change will be available for all Plural installations to pull down when they wish to.\\n\\n## Our Catalog\\n\\n[Airbyte](/applications/airbyte)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d79a69b7-dfcd-480a-a51d-518865fd6e7c/airbyte.png?v=63850444005)\\n\\nAirbyte\\n\\n[Airflow](/applications/airflow)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/eb88ca01-21d6-464f-8fd5-f481b385c166/airflow.png?v=63850349004)\\n\\nAirflow\\n\\n[Argo CD](/applications/argo-cd)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/df3ab918-4b1f-4ecd-b0c6-670dc18dc967/argo-stacked-color-square.png?v=63827245273)\\n\\nArgo CD\\n\\n[Argo Workflows](/applications/argo-workflows)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/92c5ed56-445e-44dd-bb9a-6cd8cfadbf36/argo-stacked-color-square.png?v=63827245274)\\n\\nArgo Workflows\\n\\n[Chatwoot](/applications/chatwoot)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/1fa864cc-98b2-457d-afb8-ed0659a6caf4/chatwoot.png?v=63827245281)\\n\\nChatwoot\\n\\n[Clickhouse](/applications/clickhouse)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/6ee23d50-55e4-475a-bd1a-919803e1658a/clickhouse.png?v=63846289251)\\n\\nClickhouse\\n\\n[Plural Console](/applications/console)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/4d9e07ec-fd50-4bc2-80c5-55a8e29c8997/console-white.png?v=63827552028)\\n\\nPlural", "start_char_idx": 227532, "end_char_idx": 229670, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "97e006e4-ad29-4a81-81c1-0022e3b1d0b6": {"__data__": {"id_": "97e006e4-ad29-4a81-81c1-0022e3b1d0b6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "21f97cf2-dc9e-4a78-89d4-b1a4fbc2b9a7", "node_type": null, "metadata": {}, "hash": "c7fdbba57d600df3e9e1ee3e0f64b201800a9fd98bacb5695b2492e71d129d24"}, "3": {"node_id": "d3d89345-0272-4cfa-a730-6ae213e8bba0", "node_type": null, "metadata": {}, "hash": "974ac15747125893509df5209c691ae563601433ed33dfaccb99a1955fd84f46"}}, "hash": "a39775f684e478d90f05e56c87fb3a81425c5d2fe531270c504668adb8fae3cd", "text": "Console\\n\\n[Crossplane](/applications/crossplane)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/568528e6-371b-4c20-8893-bcfe107aa120/crossplane.png?v=63827245276)\\n\\nCrossplane\\n\\n[Dagster](/applications/dagster)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/809ae45c-8ccf-44e2-8240-3df890557ad8/dagster-primary-mark.png?v=63849322727)\\n\\nDagster\\n\\n[Dagster Agent](/applications/dagster-agent)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/a1df0efd-aec3-491b-aef2-6d3375f11d91/dagster-primary-mark.png?v=63848192807)\\n\\nDagster Agent\\n\\n[Datadog](/applications/datadog)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/282199df-941b-4b79-98fb-7db1fa4421e1/datadog.png?v=63827870813)\\n\\nDatadog\\n\\n[Datahub](/applications/datahub)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/027332f3-edd2-4380-ac93-58fa6cd6b23d/datahub.png?v=63828661293)\\n\\nDatahub\\n\\n[Directus](/applications/directus)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/1f62dc7f-d418-43a7-9b62-4df6cf028dee/directus-logo-stacked.png?v=63848804642)\\n\\nDirectus\\n\\n[Elasticsearch](/applications/elasticsearch)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/cc1bb214-2841-405e-a4db-27e4855c7858/elastic.png?v=63848383152)\\n\\nElasticsearch\\n\\n[Etcd](/applications/etcd)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/9eb21fe4-f891-4170-a535-a0eb8ac28352/etcd-logo.png?v=63827245277)\\n\\nEtcd\\n\\n[External Secrets](/applications/external-secrets)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/9cd47e49-4ab8-4981-848c-821a533f1d26/external-secrets.png?v=63835057578)\\n\\nExternal", "start_char_idx": 229746, "end_char_idx": 231539, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d3d89345-0272-4cfa-a730-6ae213e8bba0": {"__data__": {"id_": "d3d89345-0272-4cfa-a730-6ae213e8bba0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "97e006e4-ad29-4a81-81c1-0022e3b1d0b6", "node_type": null, "metadata": {}, "hash": "a39775f684e478d90f05e56c87fb3a81425c5d2fe531270c504668adb8fae3cd"}, "3": {"node_id": "f3edff15-3144-4848-a9a8-a212535b00b2", "node_type": null, "metadata": {}, "hash": "e999834d09e900f57cb338abff747bcc9311241ee837149c35034235699c86f2"}}, "hash": "974ac15747125893509df5209c691ae563601433ed33dfaccb99a1955fd84f46", "text": "Secrets\\n\\n[Filecoin](/applications/filecoin)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d2838155-f78d-44bd-9671-d8ca8a0fce36/filecoin.png?v=63827245280)\\n\\nFilecoin\\n\\n[Ghost](/applications/ghost)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/e125482a-caba-4d97-8767-2e90c671dcc1/ghost.png?v=63827245280)\\n\\nGhost\\n\\n[Gitlab](/applications/gitlab)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/0b78e1b6-ed5a-4e39-90a9-4beae4eb27c3/gitlab.png?v=63845588812)\\n\\nGitlab\\n\\n[Goldilocks](/applications/goldilocks)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d40c11ac-a12f-47c4-af3b-0ce57471764e/goldilocks.png?v=63830906375)\\n\\nGoldilocks\\n\\n[Grafana](/applications/grafana)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/2783a06b-8317-4998-8c5d-18bcdc2a3c6c/grafana.png?v=63849313526)\\n\\nGrafana\\n\\n[Grafana Agent](/applications/grafana-agent)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/ca723774-20ff-45c2-8b0c-13e6fef8d760/grafana-agent.png?v=63847918699)\\n\\nGrafana Agent\\n\\n[Grafana Tempo](/applications/grafana-tempo)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/aa94309f-00de-4b1b-becb-9dd93ff0853d/tempo.png?v=63830906376)\\n\\nGrafana", "start_char_idx": 231540, "end_char_idx": 232887, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f3edff15-3144-4848-a9a8-a212535b00b2": {"__data__": {"id_": "f3edff15-3144-4848-a9a8-a212535b00b2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "d3d89345-0272-4cfa-a730-6ae213e8bba0", "node_type": null, "metadata": {}, "hash": "974ac15747125893509df5209c691ae563601433ed33dfaccb99a1955fd84f46"}, "3": {"node_id": "7913244a-59bb-445b-9b4e-49bb2a510bb0", "node_type": null, "metadata": {}, "hash": "e996aa71558f8df96b7fea3a0dcc7a89d705a7a1d42e66c158ae296a557e6f7c"}}, "hash": "e999834d09e900f57cb338abff747bcc9311241ee837149c35034235699c86f2", "text": "Tempo\\n\\n[Growthbook](/applications/growthbook)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/e43918d9-52c8-4717-92e1-2152552ccbf1/growthbook.png?v=63828133374)\\n\\nGrowthbook\\n\\n[Harbor](/applications/harbor)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/df23d563-066a-46e2-a961-7094ac516830/harbor.png?v=63851479413)\\n\\nHarbor\\n\\n[Hasura](/applications/hasura)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d714bcb7-82d2-496d-b70d-9f8ca73bb698/hasura.png?v=63830906377)\\n\\nHasura\\n\\n[Hydra](/applications/hydra)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/8dbdcf86-4ab8-4034-b7e2-3905c4890258/hydra.png?v=63830906378)\\n\\nHydra\\n\\n[Influx](/applications/influx)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/041cc6aa-262a-422d-8d6d-7358ee90b49f/influx.png?v=63830906378)\\n\\nInflux\\n\\n[Ingress Nginx](/applications/ingress-nginx)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/b00f924d-a832-4a73-84ba-40fd9f5f2cf8/nginx.png?v=63830906379)\\n\\nIngress", "start_char_idx": 232888, "end_char_idx": 234011, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7913244a-59bb-445b-9b4e-49bb2a510bb0": {"__data__": {"id_": "7913244a-59bb-445b-9b4e-49bb2a510bb0", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "f3edff15-3144-4848-a9a8-a212535b00b2", "node_type": null, "metadata": {}, "hash": "e999834d09e900f57cb338abff747bcc9311241ee837149c35034235699c86f2"}, "3": {"node_id": "9500dedb-c509-4ef6-a6c2-ecdb87b90418", "node_type": null, "metadata": {}, "hash": "c1a1734d714d3691ba323b3b4a4a4b5a8314c6cae2b2802fd90fe7d0dadff60f"}}, "hash": "e996aa71558f8df96b7fea3a0dcc7a89d705a7a1d42e66c158ae296a557e6f7c", "text": "Nginx\\n\\n[Istio](/applications/istio)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/fa9a3b19-539d-4307-b57d-3979a3f2b8ec/istio.png?v=63830907771)\\n\\nIstio\\n\\n[Jitsu](/applications/jitsu)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/26bfa7eb-3602-43c1-af79-4a5e2077d674/jitsu.png?v=63830907999)\\n\\nJitsu\\n\\n[Jupyterhub](/applications/jupyterhub)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/6664af69-9133-4d0c-b0db-adf0c8fce072/jupyterhub.png?v=63848545606)\\n\\nJupyterhub\\n\\n[Kafka](/applications/kafka)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/79728698-e8c7-4705-ba36-8a46d6ec9b2e/kafka-darkmode.png?v=63792628117)\\n\\nKafka\\n\\n[Knative](/applications/knative)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/405d5d69-0ed7-4995-9685-b2063fba845a/knative.png?v=63830908095)\\n\\nKnative\\n\\n[Kserve](/applications/kserve)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/2089f227-24a3-442d-a53b-941d12dd6d91/kserve.png?v=63830908096)\\n\\nKserve\\n\\n[Kubecost](/applications/kubecost)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/67592c4b-5ed5-4d5b-be12-c65318b2597c/kubecost.png?v=63830908097)\\n\\nKubecost\\n\\n[Kubeflow](/applications/kubeflow)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/98bcf7e8-e05b-4653-988f-f40752a5067a/kubeflow.png?v=63829243852)\\n\\nKubeflow\\n\\n[Kubescape](/applications/kubescape)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/265120f7-9afe-42f8-a70c-bda122800d05/kubescape.png?v=63830908098)\\n\\nKubescape\\n\\n[Kubricks](/applications/kubricks)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/1fa91315-35a7-4d18-9e64-db5c95214195/kubricks.png?v=63824240381)\\n\\nKubricks\\n\\n[Kyverno](/applications/kyverno)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazon", "start_char_idx": 234012, "end_char_idx": 235980, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9500dedb-c509-4ef6-a6c2-ecdb87b90418": {"__data__": {"id_": "9500dedb-c509-4ef6-a6c2-ecdb87b90418", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "7913244a-59bb-445b-9b4e-49bb2a510bb0", "node_type": null, "metadata": {}, "hash": "e996aa71558f8df96b7fea3a0dcc7a89d705a7a1d42e66c158ae296a557e6f7c"}, "3": {"node_id": "5b4af56d-fcfa-48a3-a913-9a74ea0f02d4", "node_type": null, "metadata": {}, "hash": "49d00b2d2c22f0bfed1f4c2a7fe9d843255d383a0430ad534822365eb6bb9103"}}, "hash": "c1a1734d714d3691ba323b3b4a4a4b5a8314c6cae2b2802fd90fe7d0dadff60f", "text": "aws.com/uploads/repos/cba9e42e-62d2-4715-bb15-de9e7d8c43cc/kyverno.png?v=63830908099)\\n\\nKyverno\\n\\n[Lightdash](/applications/lightdash)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/432b8cac-a2f5-4440-8b29-d0610962ae06/lightdash.png?v=63841729505)\\n\\nLightdash\\n\\n[Loki](/applications/loki)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/a13d8533-7e35-434b-b981-be377f973175/loki.png?v=63849227349)\\n\\nLoki\\n\\n[Metabase](/applications/metabase)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/029f6b32-8b3b-40e0-9f44-4d154cb32aa3/metabase.png?v=63828669690)\\n\\nMetabase\\n\\n[Mimir](/applications/mimir)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/9efb373f-c381-4201-bd30-ce04fa015519/mimir.png?v=63849313524)\\n\\nMimir\\n\\n[Minecraft](/applications/minecraft)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/c3f5d3b2-ed75-489c-aac9-9319c9bfea02/minecraft.png?v=63831674374)\\n\\nMinecraft\\n\\n[Minio](/applications/minio)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/20067709-663b-4100-9f18-e213cdf4f165/minio.png?v=63830908101)\\n\\nMinio\\n\\n[MLflow](/applications/mlflow)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/bb99f957-fdef-4b9a-8c33-e974bb392c0e/mlflow.png?v=63830908102)\\n\\nMLflow\\n\\n[MongoDB](/applications/mongodb)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/bfe51870-8f8b-4b4d-bd68-18645f61ee8e/mongodb.png?v=63827333062)\\n\\nMongoDB\\n\\n[Monitoring](/applications/monitoring)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/1ed5c2be-9d60-43db-b757-ee289e6524f6/monitoring.png?v=63830290708)\\n\\nMonitoring\\n\\n[MySQL](/applications/mysql)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/e3a59d39-0917-4072-9c95-6cbcaab2381a/mysql.png?v=63830908103)\\n\\nMySQL\\n\\n[n8n](/applications/n8n)\\n\\n![Image](https://plural-assets.s3.us-east-2", "start_char_idx": 235981, "end_char_idx": 238004, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5b4af56d-fcfa-48a3-a913-9a74ea0f02d4": {"__data__": {"id_": "5b4af56d-fcfa-48a3-a913-9a74ea0f02d4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "9500dedb-c509-4ef6-a6c2-ecdb87b90418", "node_type": null, "metadata": {}, "hash": "c1a1734d714d3691ba323b3b4a4a4b5a8314c6cae2b2802fd90fe7d0dadff60f"}, "3": {"node_id": "91a41264-127f-4137-8838-c835cc214e8a", "node_type": null, "metadata": {}, "hash": "c26fccdb2dfcc3b96d790bafd22ede5cf81839b4a1736d0ca81ad2e89e43bedb"}}, "hash": "49d00b2d2c22f0bfed1f4c2a7fe9d843255d383a0430ad534822365eb6bb9103", "text": ".amazonaws.com/uploads/repos/236a48a3-4e40-458a-a9ee-ff464ba84234/n8n.png?v=63830908103)\\n\\nn8n\\n\\n[Nextcloud](/applications/nextcloud)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/9dbccf2b-771a-4bfb-87b9-63646a253d1c/nextcloud.png?v=63830908104)\\n\\nNextcloud\\n\\n[NocoDB](/applications/nocodb)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/a052b432-212f-486e-90bb-6c0bc0f987e8/nocodb.png?v=63830908105)\\n\\nNocoDB\\n\\n[NVIDIA Operator](/applications/nvidia-operator)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/841eb2e5-f792-4157-9ff0-7c8df1322a77/nvidia.png?v=63830908105)\\n\\nNVIDIA Operator\\n\\n[OAuth2 Proxy](/applications/oauth2-proxy)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/099fa484-b9d1-458a-aeb9-f8009516ad8b/oauth2-proxy.png?v=63830908106)\\n\\nOAuth2 Proxy\\n\\n[Plural](/applications/plural)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/3fbf2a2b-6416-4245-ad28-3c2fb74aac86/plural-white.png?v=63827274061)\\n\\nPlural\\n\\n[PostgreSQL](/applications/postgres)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/964f6549-30f1-46c3-ad03-a31166120a5c/postgres.png?v=63842071705)\\n\\nPostgreSQL\\n\\n[Posthog](/applications/posthog)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/4f7ba528-88c0-4bc8-b8f9-eabd40b57927/posthog.png?v=63843098284)\\n\\nPosthog\\n\\n[Prefect](/applications/prefect)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/c1132fad-5829-4a5a-baeb-6621b392f91b/prefect.png?v=63852931356)\\n\\nPrefect\\n\\n[Prefect Agent](/applications/prefect-agent)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/40fee2a9-ed30-481b-bf25-60279b35e252/prefect.png?v=63852931358)\\n\\nPrefect Agent\\n\\n[Prefect Worker](/applications/prefect-worker)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/724c0bb0-cdf7-4cfe-b9ea-cd2697088ded/prefect.png?v=63853292861)\\n\\nPrefect", "start_char_idx": 238005, "end_char_idx": 240049, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "91a41264-127f-4137-8838-c835cc214e8a": {"__data__": {"id_": "91a41264-127f-4137-8838-c835cc214e8a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "5b4af56d-fcfa-48a3-a913-9a74ea0f02d4", "node_type": null, "metadata": {}, "hash": "49d00b2d2c22f0bfed1f4c2a7fe9d843255d383a0430ad534822365eb6bb9103"}, "3": {"node_id": "7d12991b-63ff-43ef-bf87-d576ee5e7338", "node_type": null, "metadata": {}, "hash": "4472693b86cb15acfcd57792a02917777262710239f444fd72662ecf79c05c67"}}, "hash": "c26fccdb2dfcc3b96d790bafd22ede5cf81839b4a1736d0ca81ad2e89e43bedb", "text": "Worker\\n\\n[RabbitMQ](/applications/rabbitmq)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/6394470f-b74e-4dc5-8084-aba94fd8dc05/rabbitmq.png?v=63830908333)\\n\\nRabbitMQ\\n\\n[Ray](/applications/ray)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/32861411-b531-4d25-a9e4-1685d6ae7dc0/ray.png?v=63832368843)\\n\\nRay\\n\\n[Redis](/applications/redis)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/afe7e33a-9b9a-40ef-b0c4-898d48a1cc41/redis.png?v=63847520946)\\n\\nRedis\\n\\n[Redpanda](/applications/redpanda)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/8bb75682-c0b6-4e1b-ac89-d0a83556e5da/redpanda.png?v=63847520561)\\n\\nRedpanda\\n\\n[Reloader](/applications/reloader)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/90932299-2920-4148-aba1-401b7bdd82b9/reloader.png?v=63830908335)\\n\\nReloader\\n\\n[Renovate on Prem](/applications/renovate-on-prem)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/5bef1d85-2a3f-434e-a91a-46b36d47b1e1/renovate.png?v=63835211789)\\n\\nRenovate on", "start_char_idx": 240050, "end_char_idx": 241183, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7d12991b-63ff-43ef-bf87-d576ee5e7338": {"__data__": {"id_": "7d12991b-63ff-43ef-bf87-d576ee5e7338", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "91a41264-127f-4137-8838-c835cc214e8a", "node_type": null, "metadata": {}, "hash": "c26fccdb2dfcc3b96d790bafd22ede5cf81839b4a1736d0ca81ad2e89e43bedb"}, "3": {"node_id": "e16ae4c9-d2fd-4386-8e04-76a212ecc03b", "node_type": null, "metadata": {}, "hash": "3d5fabae0521aa3ecfca302e03f294739b96fdd132e787255900bd9233c1b0a8"}}, "hash": "4472693b86cb15acfcd57792a02917777262710239f444fd72662ecf79c05c67", "text": "on Prem\\n\\n[Retool](/applications/retool)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/a5b2b8d0-95d1-4ac2-9466-eafc2af27567/retool-dark.jpeg?v=63843893988)\\n\\nRetool\\n\\n[Rook](/applications/rook)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d4a2c822-0481-4b30-880a-dfd6423a925a/rook.png?v=63830908335)\\n\\nRook\\n\\n[Sentry](/applications/sentry)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/01089244-ac87-41e4-b464-2cbef89756cd/sentry.png?v=63828767648)\\n\\nSentry\\n\\n[Sftpgo](/applications/sftpgo)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/8fa091ea-9574-47fe-ac61-8cb379230018/sftpgo.png?v=63848193195)\\n\\nSftpgo\\n\\n[Spark](/applications/spark)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/c29e7964-1c53-477f-b071-2b397cf63815/spark.png?v=63830908337)\\n\\nSpark\\n\\n[Superset](/applications/superset)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/9420c529-ad19-4067-81cd-fd8e08e89d27/superset.png?v=63844820270)\\n\\nSuperset\\n\\n[Terraria](/applications/terraria)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/40e1a25c-9a68-4d7e-a579-a02803a8526d/terraria.png?v=63829848381)\\n\\nTerraria\\n\\n[Tier](/applications/tier)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/7bd4ec71-4a8d-494b-85b5-bbd7c9fbc435/tier.png?v=63847493413)\\n\\nTier\\n\\n[Touca](/applications/touca)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/04282582-e36a-4196-9f8b-84c29235540e/touca.png?v=63837576222)\\n\\nTouca\\n\\n[Trace Shield](/applications/trace-shield)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/77a0972b-1683-47e3-8c8d-59f56db060b0/trace-shield.png?v=63847916475)\\n\\nTrace", "start_char_idx": 241182, "end_char_idx": 243024, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e16ae4c9-d2fd-4386-8e04-76a212ecc03b": {"__data__": {"id_": "e16ae4c9-d2fd-4386-8e04-76a212ecc03b", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "7d12991b-63ff-43ef-bf87-d576ee5e7338", "node_type": null, "metadata": {}, "hash": "4472693b86cb15acfcd57792a02917777262710239f444fd72662ecf79c05c67"}, "3": {"node_id": "07db8619-b00d-4145-ae79-4fc681f6c7e6", "node_type": null, "metadata": {}, "hash": "fb7801c5a84b9cebb669269cef166e7a48de888b3c82a67cd365a696c1eeab15"}}, "hash": "3d5fabae0521aa3ecfca302e03f294739b96fdd132e787255900bd9233c1b0a8", "text": "Shield\\n\\n[Trino](/applications/trino)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/635d9ef5-5455-4657-9edd-190ea7ebd035/trino.png?v=63843608393)\\n\\nTrino\\n\\n[Trivy](/applications/trivy)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d977000f-89e4-41ff-a389-6e4a4201811b/trivy.png?v=63837144025)\\n\\nTrivy\\n\\n[Typesense](/applications/typesense)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d600735f-b112-4d62-ba9a-53c3432145a6/typesense.png?v=63853862916)\\n\\nTypesense\\n\\n[Valheim](/applications/valheim)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/0ddec8ed-d37e-4a0d-af14-5fc7dcc6b2a1/valheim.png?v=63840335330)\\n\\nValheim\\n\\n[Vault](/applications/vault)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/3020f975-31c4-4e78-9a0e-4ff732d1b4ad/vault-white.png?v=63830908340)\\n\\nVault\\n\\n[Vaultwarden](/applications/vaultwarden)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/52ea8e1e-4b0f-4e41-af41-aae42a9c20fe/vaultwarden.png?v=63830908340)\\n\\nVaultwarden\\n\\n[Wireguard](/applications/wireguard)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/4c0f055b-9011-4c5e-a8b0-db029080151f/wireguard.png?v=63835127357)\\n\\nWireguard\\n\\n[Yatai](/applications/yatai)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/d7dce8f1-e3cf-4315-b333-863361025358/yatai.png?v=63852322856)\\n\\nYatai\\n\\n[Yugabyte](/applications/yugabyte)\\n\\n![Image](https://plural-assets.s3.us-east-2.amazonaws.com/uploads/repos/4036bea8-d1bd-4720-b0e6-3e9d91706aad/yugabyte.png?v=63831419625)\\n\\nYugabyte\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/applications/index.md)\",\n\"source_links\": []\n\"id\": 76,\n\"page_link\": \"https://docs.plural.sh/reference/release-notes\",\n\"title\": \" Release Notes\",\n\"text\": \"# Release Notes\\n\\nLinks to Plural Release Notes\\n\\nTo see what's new with Plural, check out the following resources:\\n\\nMain repository release notesPlural artifacts release notesPlural CLI release notesPlural Console release notesPlural In-App Roadmap\\n\\n[Main repository release", "start_char_idx": 243027, "end_char_idx": 245230, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "07db8619-b00d-4145-ae79-4fc681f6c7e6": {"__data__": {"id_": "07db8619-b00d-4145-ae79-4fc681f6c7e6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "e16ae4c9-d2fd-4386-8e04-76a212ecc03b", "node_type": null, "metadata": {}, "hash": "3d5fabae0521aa3ecfca302e03f294739b96fdd132e787255900bd9233c1b0a8"}, "3": {"node_id": "c66bcd6f-fef0-443b-9cb0-4bfc65e06cfe", "node_type": null, "metadata": {}, "hash": "1ed9a0ae0201127ee5661c6b90da6f7a1f51beafd5dd48a31c0720a323fae75d"}}, "hash": "fb7801c5a84b9cebb669269cef166e7a48de888b3c82a67cd365a696c1eeab15", "text": "Console release notesPlural In-App Roadmap\\n\\n[Main repository release notes](https://github.com/pluralsh/plural/releases)\\n\\n[Plural artifacts release notes](https://github.com/pluralsh/plural-artifacts/releases)\\n\\n[Plural CLI release notes](https://github.com/pluralsh/plural-cli/releases)\\n\\n[Plural Console release notes](https://github.com/pluralsh/console/releases)\\n\\n[Plural In-App Roadmap](https://app.plural.sh/roadmap)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/reference/release-notes.md)\",\n\"source_links\": []\n\"id\": 77,\n\"page_link\": \"https://docs.plural.sh/reference/troubleshooting\",\n\"title\": \" Troubleshooting\",\n\"text\": \"# Troubleshooting\\n\\nHere is a non-exhaustive list of common issues or errors during the install or operation of Plural. If you see an error not listed here or get stuck in general, just hop into our Discord for help.\\n\\n## Helm Errors\\n\\n[](/reference/troubleshooting#helm-errors)\\n\\nHelm can be tempermental at times, here are some errors that will ocassionally pop up\\n\\n### another operation (install/upgrade/rollback) is in progress\\n\\n[](/reference/troubleshooting#another-operation-install-upgrade-rollback-is-in-progress)\\n\\nhelm upgrade --install --skip-crds --namespace APP APP /path/to/chart 2023/03/23 02:02:15 another operation (install/upgrade/rollback) is in progress\\n\\nIn this case you need to roll back your helm release to the last successful version. You can do this by running:\\n\\nhelm history APP --namespace APP to find the latest safe version, then run: helm rollback APP VSN --namespace APP to get helm back in a safe state.\\n\\nYou should then be able to run either plural deploy  or plural bounce without issue.\\n\\n## Git Errors\\n\\n[](/reference/troubleshooting#git-errors)\\n\\n### Could not compare workspace to origin\\n\\n[](/reference/troubleshooting#could-not-compare-workspace-to-origin)\\n\\nFailed to get git information: Could not compare current workspace to origin, do you have an 'origin' remote configured, or does your repo not have an inital commit?\\n\\nThis error either means you cannot push information to Git, or you do not have a remote branch set up to track your local one. Make sure you've added your SSH keys to Github and verify that your origin is set by running git remote -v.\\n\\n### Out of date\\n\\n[](/reference/troubleshooting#out-of-date)\\n\\nYour local workspace is not in sync with remote, either 'git pull' recent changes or 'git push' any missed changes.\\n\\nThis error can happen if you're ahead of or behind your remote by a few commits, so try git push if git pull does not resolve the issue.\\n\\n## Cloud Errors\\n\\n[](/reference/troubleshooting#cloud-errors)\\n\\n### Google Credentials\\n\\n[](/reference/troubleshooting#google-credentials)\\n\\nYou don't have necessary services enabled. Please run: 'gcloud services enable serviceusage.googleapis.com cloudresourcemanager.googleapis.com container.googleapis.com' with an owner of the project to enable or enable them in the GCP console.\\n\\nEnsure that you've run the gcloud command in the correct project, and make sure you have owner rights.\\n\\n### AWS Credentials\\n\\n[](/reference/troubleshooting#aws-credentials)\\n\\nFailed to get aws account (is your aws cli configured?)\\n\\nEnsure your AWS CLI is set up, that you have the correct profile chosen, and that you're authenticated in", "start_char_idx": 245167, "end_char_idx": 248523, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c66bcd6f-fef0-443b-9cb0-4bfc65e06cfe": {"__data__": {"id_": "c66bcd6f-fef0-443b-9cb0-4bfc65e06cfe", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "07db8619-b00d-4145-ae79-4fc681f6c7e6", "node_type": null, "metadata": {}, "hash": "fb7801c5a84b9cebb669269cef166e7a48de888b3c82a67cd365a696c1eeab15"}, "3": {"node_id": "9c6fabe2-6e91-4689-a8f9-3491fd558f57", "node_type": null, "metadata": {}, "hash": "0284adbda3c2797751910082c69b45ac93644268a73e81b7256581c15b0d5e63"}}, "hash": "1ed9a0ae0201127ee5661c6b90da6f7a1f51beafd5dd48a31c0720a323fae75d", "text": "is set up, that you have the correct profile chosen, and that you're authenticated in to AWS. If necessary, run export AWS_PROFILE=<profile-name> in the terminal you are running Plural in and auth in with aws sso login.\\n\\napi error AuthorizationHeaderMalformed: The authorization header is malformed; a non-empty Access Key (AKID) must be provided in the credential.\\n\\nMake sure you're authenticated in to AWS with aws sso login.\\n\\n### IAM policy update 403 permission denied\\n\\n[](/reference/troubleshooting#iam-policy-update-403-permission-denied)\\n\\nYou will see permission errors if your Cloud account does not have permissions to create the IAM roles needed by Plural. Apply the correct permissions to the user account that Plural is deploying as.\\n\\n### Requested project not found\\n\\n[](/reference/troubleshooting#requested-project-not-found)\\n\\nError 404: The requested project was not found., notFound\\n\\nIf you are running plural build and encounter a project requested not found error it's possible that your application default credential is set to the wrong gcp project. Run:\\n\\n```\\ngcloud auth application-default login\\n```\\n\\nto reset the credential and reauthorize the browser for the correct project.\\n\\n###### Info:\\n\\nIf you're experiencing persistent issues with a Cloud Provider CLI, try updating the CLI and/or SDK.\\n\\n## Initialization Errors\\n\\n[](/reference/troubleshooting#initialization-errors)\\n\\n### Workspace Initialization\\n\\n[](/reference/troubleshooting#workspace-initialization)\\n\\nYour workspace hasn't been configured, try running 'plural init' Could not find workspace.yaml file, you might need to run 'plural init'\\n\\nBase cloud provider setup for a Plural repository is stored in your workspace.yaml file. This should be created when running plural init.\\n\\n### Kubconfig missing\\n\\n[](/reference/troubleshooting#kubconfig-missing)\\n\\n2022/12/19 16:56:24 stat /home/plural/.kube/config: no such file or directory\\n\\nThis will happen because for whatever reason your kubeconfig is not available locally. This will occasionally happen if your cloud shell pod was recently recreated, if you're using a new laptop, or if the file was deleted/expired accidentally. To fix, run:\\n\\n```\\nplural wkspace kube-init\\n```\\n\\nin your repo and we'll generate a new one for you.\\n\\n## Deployment Errors\\n\\n[](/reference/troubleshooting#deployment-errors)\\n\\n### Invalid apiVersion for K8s\\n\\n[](/reference/troubleshooting#invalid-apiversion-for-k8s)\\n\\nerror: exec plugin: invalid apiVersion \\\"client.authentication.k8s.io/v1alpha1\\\" error: exec plugin: invalid apiVersion \\\"client.authentication.k8s.io/v1alpha1\\\" exit status 1\\n\\nYou might see this when attempting to sync crds or run helm commands in a run of plural deploy. It's due to legacy versions of the aws cli generating deprecated kubeconfigs, if you upgrade your cli and rerun plural deploy it should be able to proceed successfully.\\n\\n### Failed deploy model\\n\\n[](/reference/troubleshooting#failed-deploy-model)\\n\\nFailed deploy model due to Internal error occurred: failed calling webhook \\\"mtargetgroupbinding.elbv2.k8s.aws\\\": Post \\\"https://aws-load-balancer-webhook-service.bootstrap.svc:443/mutate-elbv2-k8s-aws-v1beta1-targetgroupbinding?timeout=10s\\\"\\n\\nThe aws load balancer controller webhook is not fully reliable; if you see this error", "start_char_idx": 248517, "end_char_idx": 251859, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9c6fabe2-6e91-4689-a8f9-3491fd558f57": {"__data__": {"id_": "9c6fabe2-6e91-4689-a8f9-3491fd558f57", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "c66bcd6f-fef0-443b-9cb0-4bfc65e06cfe", "node_type": null, "metadata": {}, "hash": "1ed9a0ae0201127ee5661c6b90da6f7a1f51beafd5dd48a31c0720a323fae75d"}, "3": {"node_id": "b04779c2-057f-464f-9fee-a6dd8622a463", "node_type": null, "metadata": {}, "hash": "61552d382532bcb58207cd545e3dc0ece70afe92129a49139d619db095b503aa"}}, "hash": "0284adbda3c2797751910082c69b45ac93644268a73e81b7256581c15b0d5e63", "text": "aws load balancer controller webhook is not fully reliable; if you see this error it's just a matter of recreating the webhook which you can do with:\\n\\n```\\nkubectl delete validatingwebhookconfiguration aws-load-balancer-webhook -n bootstrap\\nplural bounce bootstrap\\n```\\n\\n### Error acquiring state lock\\n\\n[](/reference/troubleshooting#error-acquiring-state-lock)\\n\\nTerraform acquires a state lock to protect the state from being written by multiple users at the same time. Please resolve the issue above and try again.\\n\\nIf your deploy is interrupted, it's possible terraform state gets confused. To fix this, you'll need to:\\n\\n```\\ncd <app-name>/terraform\\nterraform force-unlock <lock-id>\\n```\\n\\nYou should be able to find the state lock id from the error message. Terraform stacks for each app are located in a standard terraform folder each time.\\n\\n### May not specify more than one provider type\\n\\n[](/reference/troubleshooting#may-not-specify-more-than-one-provider-type)\\n\\nIf you are running plural deploy and encounter the error below there may be stale state from the previous install.\\n\\n```\\nError: UPGRADE FAILED: cannot patch \\\"letsencrypt-prod\\\" with kind ClusterIssuer: admission webhook \\\"webhook.cert-manager.io\\\" denied the request: spec.acme.solvers[0].dns01.route53: Forbidden: may not specify more than one provider type\\n```\\n\\nRun:\\n\\n```\\nhelm del bootstrap -n bootstrap\\nplural deploy\\n```\\n\\n### Error reading route table association\\n\\n[](/reference/troubleshooting#error-reading-route-table-association)\\n\\nerror reading Route Table Association () : Empty result\\n\\nThis is a possible terraform race condition where the route tables think they're being read before they've been created, but in fact, they have already been created. As a temporary fix, just wait some time and rerun the deploy:\\n\\n```\\nplural deploy\\n```\\n\\n### Cloud resource limits exceeded\\n\\n[](/reference/troubleshooting#cloud-resource-limits-exceeded)\\n\\nIt's possible plural will deploy resources that exceed your cloud limits. In general the most pessimistic of these are load balancer limits and VPC limits. Be sure you have headroom in both those dimensions. This can lead to terraform state corruption, in which case you'll need to do something along the lines of for all resources missing from your terraform state:\\n\\n```\\ncd application-name/terraform\\nterraform import path_to_terraform_resource resource_id\\n```\\n\\nIf you devise a better way to recover crashed terraform state, please give us a shout in our Discord. We'd love to automate this better.\\n\\n[Discord](https://discord.gg/pluralsh)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/reference/troubleshooting.md)\",\n\"source_links\": []\n\"id\": 78,\n\"page_link\": \"https://docs.plural.sh/test/blockquotes\",\n\"title\": \" Blockquotes\",\n\"text\": \"# Blockquotes\\n\\nThings like inline links, code highlights, linked code highlights and other text styles should be supported. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n\\n[inline links](/test/blockquotes#)\\n\\n[linked code highlights](/test/blockquotes#)\\n\\nList itemAnother list itemAnother list itemAnother list item\\n\\nThings like inline links, code highlights, linked code highlights and other text styles should be", "start_char_idx": 251863, "end_char_idx": 255208, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b04779c2-057f-464f-9fee-a6dd8622a463": {"__data__": {"id_": "b04779c2-057f-464f-9fee-a6dd8622a463", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "9c6fabe2-6e91-4689-a8f9-3491fd558f57", "node_type": null, "metadata": {}, "hash": "0284adbda3c2797751910082c69b45ac93644268a73e81b7256581c15b0d5e63"}, "3": {"node_id": "13c76117-d693-4dd0-9861-4fa052101dbd", "node_type": null, "metadata": {}, "hash": "f6e8d2c3b7ecc6d67a059335649038e4a409ebcd34c84c3228c7abe1e0be64cb"}}, "hash": "61552d382532bcb58207cd545e3dc0ece70afe92129a49139d619db095b503aa", "text": "like inline links, code highlights, linked code highlights and other text styles should be supported.\\n\\n[inline links](/test/blockquotes#)\\n\\n[linked code highlights](/test/blockquotes#)\\n\\nShould support things like inline links.\\n\\n[inline links](/test/blockquotes#)\\n\\nShould support things like code highlights.\\n\\nShould support things like linked code highlights.\\n\\n[linked code highlights](/test/blockquotes#)\\n\\nShould support things like italic text, bold text or bold italic text.\\n\\nSupports\\n\\nMultiple\\n\\nParagraphs\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/test/blockquotes.md)\",\n\"source_links\": []\n\"id\": 79,\n\"page_link\": \"https://docs.plural.sh/test/buttons\",\n\"title\": \" Buttons\",\n\"text\": \"# Buttons\\n\\n# Standalone buttons\\n\\n[](/test/buttons#standalone-buttons)\\n\\n```\\n{% button type=\\\"floating\\\" href=\\\"/\\\" %}A string with **formatted** text and a _local_ link{% /button %}\\n\\n{% button type=\\\"floating\\\" href=\\\"http://google.com\\\" %}\\nA string with **formatted** text and an _external_ link\\n{% /button %}\\n```\\n\\nA string with formatted text and a local link\\n\\n[A string with formatted text and a local link](/)\\n\\n[A string with formatted text and an external link](http://google.com)\\n\\n# Icons\\n\\n[](/test/buttons#icons)\\n\\nSee full icon list here\\n\\n[here](https://pluralsh-design.web.app/?path=/story/icons--default)\\n\\n```\\n{% button href=\\\"#\\\" icon=\\\"WarningOutline\\\" %}Icon Button{% /button %}\\n```\\n\\n[Warning\\u00adOutline](/test/buttons#)\\n\\n[Video](/test/buttons#)\\n\\n[MagicWand](/test/buttons#)\\n\\n[Tool](/test/buttons#)\\n\\n[Book](/test/buttons#)\\n\\n[Workspace](/test/buttons#)\\n\\n[PushPin](/test/buttons#)\\n\\n# Button groups\\n\\n[](/test/buttons#button-groups)\\n\\n```\\n{% buttonGroup %}\\n{% button href=\\\"#\\\" %}Three{% /button %}\\n{% button href=\\\"#\\\" %}buttons{% /button %}\\n{% button href=\\\"#\\\" %}in a row{% /button %}\\nNon-button content will be ignored\\n{% /buttonGroup %}\\n```\\n\\n[Three](/test/buttons#)\\n\\n[buttons](/test/buttons#)\\n\\n[in a row](/test/buttons#)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/test/buttons.md)\",\n\"source_links\": []\n\"id\": 80,\n\"page_link\": \"https://docs.plural.sh/test/callouts\",\n\"title\": \" Callouts\",\n\"text\": \"# Callouts\\n\\n## Full size kitchen sink\\n\\n[](/test/callouts#full-size-kitchen-sink)\\n\\n###### Info: This is an info callout\\n\\nThings like inline links, code highlights, linked code highlights and other text styles should be supported. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n\\n[inline links](/test/callouts#)\\n\\n[linked code highlights](/test/callouts#)\\n\\nList item 1List item 2\\n\\n###### Warning: This is a warning callout\\n\\nThings like inline", "start_char_idx": 255200, "end_char_idx": 257983, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "13c76117-d693-4dd0-9861-4fa052101dbd": {"__data__": {"id_": "13c76117-d693-4dd0-9861-4fa052101dbd", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "b04779c2-057f-464f-9fee-a6dd8622a463", "node_type": null, "metadata": {}, "hash": "61552d382532bcb58207cd545e3dc0ece70afe92129a49139d619db095b503aa"}, "3": {"node_id": "7efe7388-0367-48f3-9dde-80d85c790759", "node_type": null, "metadata": {}, "hash": "84b3ca338e592635f6a8136a1f006215319bf7b0b68e4498241ca1feca2001ab"}}, "hash": "f6e8d2c3b7ecc6d67a059335649038e4a409ebcd34c84c3228c7abe1e0be64cb", "text": "Warning: This is a warning callout\\n\\nThings like inline links, code highlights, linked code highlights and other text styles should be supported. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n\\n[inline links](/test/callouts#)\\n\\n[linked code highlights](/test/callouts#)\\n\\nList item 1List item 2\\n\\n###### Danger: This is a danger callout\\n\\nThings like inline links, code highlights, linked code highlights and other text styles should be supported. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n\\n[inline links](/test/callouts#)\\n\\n[linked code highlights](/test/callouts#)\\n\\nList item 1List item 2\\n\\n###### Success: This is a success callout\\n\\nThings like inline links, code highlights, linked code highlights and other text styles should be supported. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n\\n[inline links](/test/callouts#)\\n\\n[linked code highlights](/test/callouts#)\\n\\nList item 1List item 2\\n\\n## Full size\\n\\n[](/test/callouts#full-size)\\n\\n###### Info:\\n\\nThings like inline links, code highlights, linked code highlights and other text styles should be supported. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n\\n[inline links](/test/callouts#)\\n\\n[linked code highlights](/test/callouts#)\\n\\nList item 1List item 2\\n\\n###### Warning:\\n\\nThings like inline links, code highlights, linked code highlights and other text styles should be supported. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n\\n[inline links](/test/callouts#)\\n\\n[linked code highlights](/test/callouts#)\\n\\nList item 1List item 2\\n\\n###### Danger:\\n\\nThings like inline links, code highlights, linked code highlights and other text styles should be supported. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n\\n[inline links](/test/callouts#)\\n\\n[linked code highlights](/test/callouts#)\\n\\nList item 1List item 2\\n\\n###### Success:\\n\\nThings like inline links, code highlights, linked code highlights and other text styles should be supported. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n\\n[inline links](/test/callouts#)\\n\\n[linked code highlights](/test/callouts#)\\n\\nList item 1List item 2\\n\\n## Compact size\\n\\n[](/test/callouts#compact-size)\\n\\n###### Info:\\n\\nShould support things like inline links.\\n\\n[inline links](/test/callouts#)\\n\\n###### Warning:\\n\\nShould support things like code highlights.\\n\\n###### Danger:\\n\\nShould support things like linked code highlights.\\n\\n[linked code highlights](/test/callouts#)\\n\\n###### Success:\\n\\nShould support things like italic text, bold text or bold italic text.\\n\\n[Edit on", "start_char_idx": 258012, "end_char_idx": 261085, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7efe7388-0367-48f3-9dde-80d85c790759": {"__data__": {"id_": "7efe7388-0367-48f3-9dde-80d85c790759", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "13c76117-d693-4dd0-9861-4fa052101dbd", "node_type": null, "metadata": {}, "hash": "f6e8d2c3b7ecc6d67a059335649038e4a409ebcd34c84c3228c7abe1e0be64cb"}, "3": {"node_id": "5187a7d7-5808-4bb0-892e-23dd1c5b8cfb", "node_type": null, "metadata": {}, "hash": "7a1ae2bc710f37c2eca70f11f1cd2c2c2a234b65fb601927eb69e9e190dbb0f2"}}, "hash": "84b3ca338e592635f6a8136a1f006215319bf7b0b68e4498241ca1feca2001ab", "text": "like italic text, bold text or bold italic text.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/test/callouts.md)\",\n\"source_links\": []\n\"id\": 83,\n\"page_link\": \"https://docs.plural.sh/test/global-variables\",\n\"title\": \" Global Variables\",\n\"text\": \"# Global Variables\\n\\n# From design system default\\n\\n[](/test/global-variables#from-design-system-default)\\n\\nGlobal test content\\n\\n# Added locally\\n\\n[](/test/global-variables#added-locally)\\n\\nDocs global test content\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/test/global-variables.md)\",\n\"source_links\": []\n\"id\": 84,\n\"page_link\": \"https://docs.plural.sh/test/images\",\n\"title\": \" Images\",\n\"text\": \"# Images\\n\\n# Basic caption\\n\\n[](/test/images#basic-caption)\\n\\n```\\n![alt text for screen readers](/assets/cloud-shell-quickstart/image-1.png 'Basic *caption* (no formatting allowed)')\\n```\\n\\n![Image](/assets/cloud-shell-quickstart/image-1.png)\\n\\n# Formatted caption\\n\\n[](/test/images#formatted-caption)\\n\\n```\\n{% figure %}\\n![alt text for screen readers](/assets/cloud-shell-quickstart/image-1.png)\\n{% caption %}\\nA more **complex** caption with `formatted` text and [links](#)\\n{% /caption %}\\n{% /figure %}\\n```\\n\\n![Image](/assets/cloud-shell-quickstart/image-1.png)\\n\\n[links](/test/images#)\\n\\n# No caption\\n\\n[](/test/images#no-caption)\\n\\n```\\n{% figure %}\\n![alt text for screen readers](/assets/cloud-shell-quickstart/image-1.png)\\n{% /figure %}\\n```\\n\\n![Image](/assets/cloud-shell-quickstart/image-1.png)\\n\\n# Multiple images in a row mixed with other content\\n\\n[](/test/images#multiple-images-in-a-row-mixed-with-other-content)\\n\\n![Image](/assets/cloud-shell-quickstart/image-1.png)\\n\\nOther text\\n\\n![Image](/assets/cloud-shell-quickstart/image-1.png)\\n\\n![Image](/assets/cloud-shell-quickstart/image-1.png)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/test/images.md)\",\n\"source_links\": []\n\"id\": 86,\n\"page_link\": \"https://docs.plural.sh/test/tabs\",\n\"title\": \" Tabs\",\n\"text\": \"# Tabs\\n\\n## Basic\\n\\n[](/test/tabs#basic)\\n\\n```\\n{% tabs %}\\n\\n{% tab title=\\\"Personal Runbooks\\\" %}\\nEu qui laborum fugiat ipsum labore proident consequat id dolor exercitation irure ad et qui. Eiusmod anim magna est et eiusmod sit. Esse cillum id pariatur velit laborum. Ex irure amet magna voluptate excepteur exercitation in sit Lorem irure mollit. Incididunt non pariatur velit pariatur fugiat duis velit consequat labore quis dolore.\\n\\n1. After you have deployed your application with Plural, go to `my-plural-repo/<app-name>/helm/<app-name>/templates` and create a file called `runbooks.yaml`.", "start_char_idx": 261084, "end_char_idx": 263732, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5187a7d7-5808-4bb0-892e-23dd1c5b8cfb": {"__data__": {"id_": "5187a7d7-5808-4bb0-892e-23dd1c5b8cfb", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "7efe7388-0367-48f3-9dde-80d85c790759", "node_type": null, "metadata": {}, "hash": "84b3ca338e592635f6a8136a1f006215319bf7b0b68e4498241ca1feca2001ab"}, "3": {"node_id": "c4e824e1-6f71-4cc1-87a0-3e036e77578f", "node_type": null, "metadata": {}, "hash": "b810dad63da24e26c2031a909b3027c1bf23f47b1572af01ada702aa4513a545"}}, "hash": "7a1ae2bc710f37c2eca70f11f1cd2c2c2a234b65fb601927eb69e9e190dbb0f2", "text": "and create a file called `runbooks.yaml`. For more information about how to write a `runbooks.yaml` please refer to the guide [here](/adding-new-application/getting-started-with-runbooks/runbook-yaml).\\n2. Go to `my-plural-repo/<app-name>/helm/<app-name>/runbooks` and create an `xml` file for the runbook display. For more information on how to write `xml` for the runbook, please refer to the guide [here](/adding-new-application/getting-started-with-runbooks/runbook-xml).\\n\\n{% /tab %}\\n\\n{% tab title=\\\"Publishing a Runbook on Plural\\\" %}\\n\\n1. `git clone git@github.com:pluralsh/plural-artifacts.git`\\n2. `cd plural-artifacts`\\n3. Add your configuration to `<app-name>/helm/<app-name>/templates/runbooks.yaml`\\n4. Add your custom xml template to `<app-name>/helm/<app-name>/runbooks`\\n5. Open up a PR; once the new runbook has been code reviewed, it will be merged into the repo and available for others to download.\\n\\n{% /tab %}\\n\\n{% /tabs %}\\n```\\n\\nEu qui laborum fugiat ipsum labore proident consequat id dolor exercitation irure ad et qui. Eiusmod anim magna est et eiusmod sit. Esse cillum id pariatur velit laborum. Ex irure amet magna voluptate excepteur exercitation in sit Lorem irure mollit. Incididunt non pariatur velit pariatur fugiat duis velit consequat labore quis dolore.\\n\\n[here](/adding-new-application/getting-started-with-runbooks/runbook-yaml)\\n\\n[here](/adding-new-application/getting-started-with-runbooks/runbook-xml)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/test/tabs.md)\",\n\"source_links\": []\n\"id\": 87,\n\"page_link\": \"https://docs.plural.sh/applications/airbyte\",\n\"title\": \" Installing Airbyte\",\n\"text\": \"# Installing Airbyte\\n\\nOpen-source ELT platform.\\n\\n## Description\\n\\nPlural will install Airbyte in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Airbyte for the following providers:\\n\\n```\\nplural bundle install airbyte airbyte-aws\\n```\\n\\n```\\nplural bundle install airbyte airbyte-azure\\n```\\n\\n```\\nplural bundle install airbyte airbyte-gcp\\n```\\n\\n```\\nplural bundle install airbyte airbyte-kind\\n```\\n\\n## Setup Configuration\\n\\n[](/applications/airbyte#setup-configuration)\\n\\nvpc_name: We need an isolated VPC to launch your resources in, so we create one for you. Stick with plural for most cases. This is a cluster-level setting that we only ask for once. Once you've set this up, you won't need to do it again.wal_bucket: Plural uses Postgres as the backing database for cluster information. We need to store the WAL logs somewhere to backup and restore from. This is a cluster-level setting that we only ask for once. Once you've set this up, you won't need to do it again unless you destroy all existing applications.airbyteBucket: We want to store your Airbyte logs in a S3-like bucket for easy access. Use the default by pressing [Enter] unless it's been used before. This configuration step is not idempotent, if you have to redo configuration for any reason, you'll need to create a new bucket. Alternatively you can directly edit the", "start_char_idx": 263748, "end_char_idx": 266864, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c4e824e1-6f71-4cc1-87a0-3e036e77578f": {"__data__": {"id_": "c4e824e1-6f71-4cc1-87a0-3e036e77578f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "5187a7d7-5808-4bb0-892e-23dd1c5b8cfb", "node_type": null, "metadata": {}, "hash": "7a1ae2bc710f37c2eca70f11f1cd2c2c2a234b65fb601927eb69e9e190dbb0f2"}, "3": {"node_id": "27c93f14-917f-4377-8b8c-51677e83365e", "node_type": null, "metadata": {}, "hash": "97afabba6b13fa3c8d3f6e3280b53e9eb26abb8ecf453ce42415bb6c24dd838e"}}, "hash": "b810dad63da24e26c2031a909b3027c1bf23f47b1572af01ada702aa4513a545", "text": "any reason, you'll need to create a new bucket. Alternatively you can directly edit the context.yaml file to use the existing bucket that you create in this step.hostname: This will be where your Airbyte instance is hosted. Generally, use airbyte.$YOUR_ORG_NAME.onplural.sh.privateHostname: This will be the hostname under which the Airbyte API will be accessible. As a suggestion, use airbytedev.$YOUR_ORG_NAME.onplural.sh.Enable plural OIDC: Enabling Plural OIDC means that you won't need to worry about authenticating into this app if you're logged into Plural. We highly recommend this as long as you don't have any specific security requirements.\\n\\nvpc_name: We need an isolated VPC to launch your resources in, so we create one for you. Stick with plural for most cases. This is a cluster-level setting that we only ask for once. Once you've set this up, you won't need to do it again.\\n\\nwal_bucket: Plural uses Postgres as the backing database for cluster information. We need to store the WAL logs somewhere to backup and restore from. This is a cluster-level setting that we only ask for once. Once you've set this up, you won't need to do it again unless you destroy all existing applications.\\n\\nairbyteBucket: We want to store your Airbyte logs in a S3-like bucket for easy access. Use the default by pressing [Enter] unless it's been used before. This configuration step is not idempotent, if you have to redo configuration for any reason, you'll need to create a new bucket. Alternatively you can directly edit the context.yaml file to use the existing bucket that you create in this step.\\n\\nhostname: This will be where your Airbyte instance is hosted. Generally, use airbyte.$YOUR_ORG_NAME.onplural.sh.\\n\\nprivateHostname: This will be the hostname under which the Airbyte API will be accessible. As a suggestion, use airbytedev.$YOUR_ORG_NAME.onplural.sh.\\n\\nEnable plural OIDC: Enabling Plural OIDC means that you won't need to worry about authenticating into this app if you're logged into Plural. We highly recommend this as long as you don't have any specific security requirements.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/applications/airbyte.mdpart)\",\n\"source_links\": []\n\"id\": 88,\n\"page_link\": \"https://docs.plural.sh/applications/airflow\",\n\"title\": \" Installing Airflow\",\n\"text\": \"# Installing Airflow\\n\\nA DAG-based, dependency-aware job scheduler.\\n\\n## Description\\n\\nPlural will install Airflow in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Airflow for the following providers:\\n\\n```\\nplural bundle install airflow airflow-aws\\n```\\n\\n```\\nplural bundle install airflow airflow-azure\\n```\\n\\n```\\nplural bundle install airflow airflow-gcp\\n```\\n\\n```\\nplural bundle install airflow kind-airflow\\n```\\n\\n## Setup Configuration\\n\\n[](/applications/airflow#setup-configuration)\\n\\nvpc_name: We need an isolated VPC to launch your resources in, so we create one for you. Stick with plural for most cases. This is a cluster-level setting that we only ask for once. Once you have set this up, you won't need to do it again.wal_bucket: Plural uses Postgres as the backing database for cluster information. We need to store the WAL logs somewhere to backup and restore from. This is a cluster-level setting that we only ask for once. Once you've set this up, you won't need to do it again unless you destroy all existing", "start_char_idx": 266828, "end_char_idx": 270299, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "27c93f14-917f-4377-8b8c-51677e83365e": {"__data__": {"id_": "27c93f14-917f-4377-8b8c-51677e83365e", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "c4e824e1-6f71-4cc1-87a0-3e036e77578f", "node_type": null, "metadata": {}, "hash": "b810dad63da24e26c2031a909b3027c1bf23f47b1572af01ada702aa4513a545"}, "3": {"node_id": "a23ed0a8-b42b-48dd-ac76-3c39458bd03c", "node_type": null, "metadata": {}, "hash": "59feffdbda4976a78983e4dd5a61d132c761522fc2c6a7b365287de41a199b3e"}}, "hash": "97afabba6b13fa3c8d3f6e3280b53e9eb26abb8ecf453ce42415bb6c24dd838e", "text": "Once you've set this up, you won't need to do it again unless you destroy all existing applications.airflowBucket: We want to store your Airflow logs in a S3-like bucket for easy access. Use the default by pressing [Enter] unless it's been used before. This configuration step is not idempotent, if you have to redo configuration for any reason, you'll need to create a new bucket. Alternatively you can directly edit the context.yaml file to use the existing bucket that you create in this step.hostname: This will be where your Airflow instance is hosted. Generally, use airflow.$YOUR_ORG_NAME.onplural.sh.dagRepo: We'll need a preexisting GitHub repository to store the DAGs that you create and use in Airflow. Either create one now or use an existing DAG repository. Then grab the SSH URL from the Code tab on the repo to use here.branchName: If you have an existing DAG repository, you may want to sync your existing dags into and from a specific branch. This will be the branch that Plural stays up to date with, so use main unless you want to prevent direct changes to the repository.adminUsername: Use your naming preference for admin accounts. No need to reinvent the wheel, admin is fine too.adminFirst: Use your relevant operator's first name or just use admin.adminLast: Use your relevant operator's last name or just use admin.adminEmail: Use your relevant admin operator's email address. This will the email used to manage the Airflow instance.private_key: This makes sure that your admin account has Read/Write access to the DAG repo. We recommend you stick with the default, unless you have compliance reasons for this file not existing here.public_key: Similar to private_key, this makes sure that your admin account has Read/Write access to the DAG repo. We recommend you stick with the default, unless you have compliance reasons for this file not existing here.Enable plural OIDC: Enabling Plural OIDC means that you won't need to worry about authenticating into this app if you're logged into Plural. We highly recommend this as long as you don't have any specific security requirements.\\n\\nvpc_name: We need an isolated VPC to launch your resources in, so we create one for you. Stick with plural for most cases. This is a cluster-level setting that we only ask for once. Once you have set this up, you won't need to do it again.\\n\\nwal_bucket: Plural uses Postgres as the backing database for cluster information. We need to store the WAL logs somewhere to backup and restore from. This is a cluster-level setting that we only ask for once. Once you've set this up, you won't need to do it again unless you destroy all existing applications.\\n\\nairflowBucket: We want to store your Airflow logs in a S3-like bucket for easy access. Use the default by pressing [Enter] unless it's been used before. This configuration step is not idempotent, if you have to redo configuration for any reason, you'll need to create a new bucket. Alternatively you can directly edit the context.yaml file to use the existing bucket that you create in this step.\\n\\nhostname: This will be where your Airflow instance is hosted. Generally, use airflow.$YOUR_ORG_NAME.onplural.sh.\\n\\ndagRepo: We'll need a preexisting GitHub repository to store the DAGs that you create and use in Airflow. Either create one now or use an existing DAG repository. Then grab the SSH URL from the Code tab on the repo to use here.\\n\\nbranchName: If you have an existing DAG repository, you may want to sync your existing dags into and from a specific branch. This will be the branch that Plural stays up to date with, so use main unless you want to prevent direct changes to the repository.\\n\\nadminUsername: Use your naming preference for admin accounts. No need to reinvent the wheel, admin is fine too.\\n\\nadminFirst: Use your relevant operator's first name or just use admin.\\n\\nadminLast: Use your relevant operator's last name or", "start_char_idx": 270303, "end_char_idx": 274219, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a23ed0a8-b42b-48dd-ac76-3c39458bd03c": {"__data__": {"id_": "a23ed0a8-b42b-48dd-ac76-3c39458bd03c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "27c93f14-917f-4377-8b8c-51677e83365e", "node_type": null, "metadata": {}, "hash": "97afabba6b13fa3c8d3f6e3280b53e9eb26abb8ecf453ce42415bb6c24dd838e"}, "3": {"node_id": "7d5b932d-0ca2-46c6-8364-31fe5582761f", "node_type": null, "metadata": {}, "hash": "ca0929e764a557c81dfa367642b878a033367f08b35a4dd53087e05e5c2c18a7"}}, "hash": "59feffdbda4976a78983e4dd5a61d132c761522fc2c6a7b365287de41a199b3e", "text": "or just use admin.\\n\\nadminLast: Use your relevant operator's last name or just use admin.\\n\\nadminEmail: Use your relevant admin operator's email address. This will the email used to manage the Airflow instance.\\n\\nprivate_key: This makes sure that your admin account has Read/Write access to the DAG repo. We recommend you stick with the default, unless you have compliance reasons for this file not existing here.\\n\\npublic_key: Similar to private_key, this makes sure that your admin account has Read/Write access to the DAG repo. We recommend you stick with the default, unless you have compliance reasons for this file not existing here.\\n\\nEnable plural OIDC: Enabling Plural OIDC means that you won't need to worry about authenticating into this app if you're logged into Plural. We highly recommend this as long as you don't have any specific security requirements.\\n\\n## Auth Configuration\\n\\n[](/applications/airflow#auth-configuration)\\n\\ngit_user: Plural will perform Git operations on your behalf to manage your config repository. Just use your GitHub username here, unless you have a dedicated user for Ops.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/applications/airflow.mdpart)\",\n\"source_links\": []\n\"id\": 89,\n\"page_link\": \"https://docs.plural.sh/applications/argo-cd\",\n\"title\": \" Installing Argo CD\",\n\"text\": \"# Installing Argo CD\\n\\nDeclarative, GitOps continuous delivery tool for Kubernetes.\\n\\n## Description\\n\\nPlural will install Argo CD in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Argo CD for the following providers:\\n\\n```\\nplural bundle install argo-cd argo-cd-aws\\n```\\n\\n```\\nplural bundle install argo-cd argo-cd-azure\\n```\\n\\n```\\nplural bundle install argo-cd argo-cd-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your Argo CD installationadminGroup: OIDC group that should receive admin permissionsconfigPrivateRepo: Configure access too private repositoriescredentialTemplateURL: Domain for which to configure private repository credentialscredentialUsername: Username to access private repositoriescredentialPassword: Password or Personal Access Token to access private repositoriesprivateRepoName: Name for the private repository to addprivateRepoURL: URL of the private repositoryenableImageUpdater: Enable the Argo CD Image Updater\",\n\"source_links\": []\n\"id\": 90,\n\"page_link\": \"https://docs.plural.sh/applications/argo-workflows\",\n\"title\": \" Installing Argo Workflows\",\n\"text\": \"# Installing Argo Workflows\\n\\nContainer-native workflow engine for orchestrating parallel jobs on Kubernetes.\\n\\n## Description\\n\\nPlural will install Argo Workflows in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Argo Workflows for the following providers:\\n\\n```\\nplural bundle install argo-workflows argo-workflows-aws\\n```\\n\\n```\\nplural bundle install argo-workflows argo-workflows-azure\\n```\\n\\n```\\nplural bundle install argo-workflows argo-workflows-gcp\\n```\\n\\n## Setup Configuration\\n\\nworkflowBucket: bucket to workflow artifacts inhostname: FQDN to use for your Argo Workflows installationadminEmail: email address for the admin useradminGroup: specify a user group to grant admin rights to\",\n\"source_links\": []\n\"id\": 91,\n\"page_link\":", "start_char_idx": 274226, "end_char_idx": 277620, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7d5b932d-0ca2-46c6-8364-31fe5582761f": {"__data__": {"id_": "7d5b932d-0ca2-46c6-8364-31fe5582761f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "a23ed0a8-b42b-48dd-ac76-3c39458bd03c", "node_type": null, "metadata": {}, "hash": "59feffdbda4976a78983e4dd5a61d132c761522fc2c6a7b365287de41a199b3e"}, "3": {"node_id": "e12c223b-4cdd-4a9f-aaa8-a9008b828a26", "node_type": null, "metadata": {}, "hash": "69a61ad7cf923579a6e8b6d18b75015a3f962f0c25b2be24d3d872b1ccadef74"}}, "hash": "ca0929e764a557c81dfa367642b878a033367f08b35a4dd53087e05e5c2c18a7", "text": "[]\n\"id\": 91,\n\"page_link\": \"https://docs.plural.sh/applications/chatwoot\",\n\"title\": \" Installing Chatwoot\",\n\"text\": \"# Installing Chatwoot\\n\\nOpen-source and self-hosted customer engagement suite.\\n\\n## Description\\n\\nPlural will install Chatwoot in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Chatwoot for the following providers:\\n\\n```\\nplural bundle install chatwoot chatwoot-aws\\n```\\n\\n```\\nplural bundle install chatwoot chatwoot-azure\\n```\\n\\n```\\nplural bundle install chatwoot chatwoot-gcp\\n```\\n\\n## Setup Configuration\\n\\nchatwootBucket: bucket to store chatwoot files inhostname: FQDN to use for your chatwoot installation\",\n\"source_links\": []\n\"id\": 92,\n\"page_link\": \"https://docs.plural.sh/applications/clickhouse\",\n\"title\": \" Installing Clickhouse\",\n\"text\": \"# Installing Clickhouse\\n\\nclickhouse deployed on plural\\n\\n## Description\\n\\nPlural will install Clickhouse in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Clickhouse for the following providers:\\n\\n```\\nplural bundle install clickhouse clickhouse-aws\\n```\\n\\n```\\nplural bundle install clickhouse clickhouse-azure\\n```\\n\\n```\\nplural bundle install clickhouse clickhouse-gcp\\n```\",\n\"source_links\": []\n\"id\": 93,\n\"page_link\": \"https://docs.plural.sh/applications/console\",\n\"title\": \" Installing Plural Console\",\n\"text\": \"# Installing Plural Console\\n\\nA Plural admin console for monitoring and ops.\\n\\n## Description\\n\\nPlural will install Plural Console in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Plural Console for the following providers:\\n\\n```\\nplural bundle install console console-aws\\n```\\n\\n```\\nplural bundle install console console-azure\\n```\\n\\n```\\nplural bundle install console console-equinix\\n```\\n\\n```\\nplural bundle install console console-gcp\\n```\\n\\n```\\nplural bundle install console console-generic\\n```\\n\\n```\\nplural bundle install console console-kind\\n```\\n\\n## Setup Configuration\\n\\n[](/applications/console#setup-configuration)\\n\\nvpc_name: We need an isolated VPC to launch your resources in, so we create one for you. Stick with plural for most cases. This is a cluster-level setting that we only ask for once. Once you've set this up, you won't need to do it again.wal_bucket: Plural uses Postgres as the backing database for cluster information. We need to store the WAL logs somewhere to backup and restore from. This is a cluster-level setting that we only ask for once. Once you've set this up, you won't need to do it again unless you destroy all existing applications.console_dns: This will be where your console is hosted. Generally, use console.$YOUR_ORG_NAME.onplural.sh.Enable plural OIDC: Enabling Plural OIDC means that you won't need to worry about authenticating into this app if you're logged into Plural. We highly recommend this as long as you don't have any specific security requirements.\\n\\nvpc_name: We need an isolated VPC to launch your resources in, so we create one for you. Stick with plural for", "start_char_idx": 277661, "end_char_idx": 280855, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e12c223b-4cdd-4a9f-aaa8-a9008b828a26": {"__data__": {"id_": "e12c223b-4cdd-4a9f-aaa8-a9008b828a26", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "7d5b932d-0ca2-46c6-8364-31fe5582761f", "node_type": null, "metadata": {}, "hash": "ca0929e764a557c81dfa367642b878a033367f08b35a4dd53087e05e5c2c18a7"}, "3": {"node_id": "001975da-2718-42c1-9b0b-8ae17b889054", "node_type": null, "metadata": {}, "hash": "1c45d14d5f4bea28af317e2b859e2d3f279e4f925c6ff7c8cfbcb5e380a2dfab"}}, "hash": "69a61ad7cf923579a6e8b6d18b75015a3f962f0c25b2be24d3d872b1ccadef74", "text": "to launch your resources in, so we create one for you. Stick with plural for most cases. This is a cluster-level setting that we only ask for once. Once you've set this up, you won't need to do it again.\\n\\nwal_bucket: Plural uses Postgres as the backing database for cluster information. We need to store the WAL logs somewhere to backup and restore from. This is a cluster-level setting that we only ask for once. Once you've set this up, you won't need to do it again unless you destroy all existing applications.\\n\\nconsole_dns: This will be where your console is hosted. Generally, use console.$YOUR_ORG_NAME.onplural.sh.\\n\\nEnable plural OIDC: Enabling Plural OIDC means that you won't need to worry about authenticating into this app if you're logged into Plural. We highly recommend this as long as you don't have any specific security requirements.\\n\\n## Auth Configuration\\n\\n[](/applications/console#auth-configuration)\\n\\ngit_user: Plural will perform Git operations on your behalf to manage your config repository. Just use your GitHub username here, unless you have a dedicated user for Ops.git_email: Use the email tied to the account associated with git_useradmin_name: Use your naming preference for admin accounts. No need to reinvent the wheel, admin is fine too.private_key: This makes sure that your admin account has Read/Write access to the config repo. We recommend you stick with the default, unless you have compliance reasons for this file not existing here.public_key: Similar to private_key, this makes sure that your admin account has Read/Write access to the DAG repo. We recommend you stick with the default, unless you have compliance reasons for this file not existing here.passphrase: If you have encrypted your SSH key with a passphrase for extra security, you'll need to enter it here in order for Plural to use it for Git operations.\\n\\ngit_user: Plural will perform Git operations on your behalf to manage your config repository. Just use your GitHub username here, unless you have a dedicated user for Ops.\\n\\ngit_email: Use the email tied to the account associated with git_user\\n\\nadmin_name: Use your naming preference for admin accounts. No need to reinvent the wheel, admin is fine too.\\n\\nprivate_key: This makes sure that your admin account has Read/Write access to the config repo. We recommend you stick with the default, unless you have compliance reasons for this file not existing here.\\n\\npublic_key: Similar to private_key, this makes sure that your admin account has Read/Write access to the DAG repo. We recommend you stick with the default, unless you have compliance reasons for this file not existing here.\\n\\npassphrase: If you have encrypted your SSH key with a passphrase for extra security, you'll need to enter it here in order for Plural to use it for Git operations.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/applications/console.mdpart)\",\n\"source_links\": []\n\"id\": 94,\n\"page_link\": \"https://docs.plural.sh/applications/crossplane\",\n\"title\": \" Installing Crossplane\",\n\"text\": \"# Installing Crossplane\\n\\nAn open-source Kubernetes add-on that transforms your cluster into a universal control plane.\\n\\n## Description\\n\\nPlural will install Crossplane in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Crossplane for the following providers:\\n\\n```\\nplural bundle install crossplane crossplane-aws\\n```\",\n\"source_links\": []\n\"id\": 95,\n\"page_link\": \"https://docs.plural.sh/applications/dagster\",\n\"title\": \" Installing Dagster\",\n\"text\": \"# Installing Dagster\\n\\nGuide to self-hosting Dagster with", "start_char_idx": 280818, "end_char_idx": 284495, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "001975da-2718-42c1-9b0b-8ae17b889054": {"__data__": {"id_": "001975da-2718-42c1-9b0b-8ae17b889054", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "e12c223b-4cdd-4a9f-aaa8-a9008b828a26", "node_type": null, "metadata": {}, "hash": "69a61ad7cf923579a6e8b6d18b75015a3f962f0c25b2be24d3d872b1ccadef74"}, "3": {"node_id": "a3205dfe-7210-4ea0-838d-133328dbe514", "node_type": null, "metadata": {}, "hash": "da6b873b4791bd2a5dbe2141bf4c2ecb9465de9795875453eac72c2f86064b40"}}, "hash": "1c45d14d5f4bea28af317e2b859e2d3f279e4f925c6ff7c8cfbcb5e380a2dfab", "text": "Installing Dagster\\n\\nGuide to self-hosting Dagster with Plural\\n\\n## Description\\n\\nPlural will install Dagster in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Dagster for the following providers:\\n\\n```\\nplural bundle install dagster dagster-aws\\n```\\n\\n```\\nplural bundle install dagster dagster-azure\\n```\\n\\n```\\nplural bundle install dagster dagster-gcp\\n```\\n\\n## Setup Configuration\\n\\ndagsterBucket: s3 bucket for storing dagster logshostname: fqdn on which to deploy your dagster instance\\n\\n## Getting Started\\n\\n[](/applications/dagster#getting-started)\\n\\nFirst, create an account on https://app.plural.sh. This is to sync your installations and allow for the delivery of automated upgrades. You will not be asked to provide any infrastructure credentials or sensitive information.\\n\\n[https://app.plural.sh](https://app.plural.sh)\\n\\nNext, install the Plural CLI. If you're on Mac, the brew tap is the easiest way to do this, as it installs Helm, Terraform, and kubectl for you. For alternate installation methods such as curl and Docker, click here.\\n\\n[click here](https://docs.plural.sh/getting-started/quickstart#install-plural-cli)\\n\\n```\\nbrew install pluralsh/plural/plural\\n```\\n\\n###### Warning:\\n\\nBefore you proceed, make sure that your cloud provider CLI is properly configured and updated to the latest version. If it is not configured correctly, Plural will fail and won't be able to create resources on your behalf.\\n\\nPlural uses a GitOps workflow to manage configuration files and deployment state, so you'll need a Git repository to store your Plural configuration. Plural supports GitHub, GitLab, and Bitbucket currently. If you're planning on using Bitbucket, follow this guide. This repository will contain the Helm charts, Terraform config, and Kubernetes manifests that Plural will autogenerate for you.\\n\\n[this guide](https://docs.plural.sh/getting-started/manage-git-repositories/setting-up-gitops#manual-git-setup)\\n\\nNavigate to a directory that you would like to create this Git repository in and run plural init. This will start a configuration wizard to configure your Git repo and cloud provider for use with Plural.\\n\\n## Installing Dagster\\n\\n[](/applications/dagster#installing-dagster)\\n\\nRun this command to find the bundle name associated with your cloud provider:\\n\\n```\\nplural bundle list dagster\\n```\\n\\nNow, to add it to your workspace, run the install command with the bundle name that you received in the previous step. This will guide you through some minor configuration of your Dagster installation, such as choosing the subdomain that your Dagster installation will be hosted at. If you are on AWS, it would look like this:\\n\\n```\\nplural bundle install dagster dagster-aws\\n```\\n\\nTo generate the Helm charts, Terraform, and deployment YAML, run:\\n\\n```\\nplural build\\n```\\n\\nTo deploy your infrastructure and commit the changes to your origin Git repository, run:\\n\\n```\\nplural deploy --commit \\\"deploying dagster\\\"\\n```\\n\\n## Installing the Plural Console\\n\\n[](/applications/dagster#installing-the-plural-console)\\n\\nPlural comes with a console", "start_char_idx": 284507, "end_char_idx": 287706, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a3205dfe-7210-4ea0-838d-133328dbe514": {"__data__": {"id_": "a3205dfe-7210-4ea0-838d-133328dbe514", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "001975da-2718-42c1-9b0b-8ae17b889054", "node_type": null, "metadata": {}, "hash": "1c45d14d5f4bea28af317e2b859e2d3f279e4f925c6ff7c8cfbcb5e380a2dfab"}, "3": {"node_id": "10cf48ea-2457-4d77-8cce-9e3b53f11f3c", "node_type": null, "metadata": {}, "hash": "d227e62bf4ffa3d9080dd133e80ecc7c3b077bb38dcef38a2f38851b6a5254d0"}}, "hash": "da6b873b4791bd2a5dbe2141bf4c2ecb9465de9795875453eac72c2f86064b40", "text": "comes with a console that provides DevOps workflows, customized dashboards, and an interactive UI for managing your Kubernetes cluster. It's not required, but highly recommended. You can install the console the same way that you installed Dagster:\\n\\n```\\nplural bundle install console console-aws\\nplural build\\nplural deploy --commit \\\"deploying the console too\\\"\\n```\\n\\n## Accessing your Dagster installation\\n\\n[](/applications/dagster#accessing-your-dagster-installation)\\n\\nNavigate to dagster.YOUR_SUBDOMAIN.onplural.sh to access the Dagster UI. If you set up a different subdomain for Dagster during the plural bundle install phase, use that instead.\\n\\n## Uninstalling Dagster\\n\\n[](/applications/dagster#uninstalling-dagster)\\n\\nTo bring down your Plural installation of Dagster, run:\\n\\n```\\nplural destroy dagster\\n```\\n\\nTo bring down your entire Plural deployment, run:\\n\\n```\\nplural destroy\\n```\\n\\n###### Warning:\\n\\nOnly do this if you're absolutely sure you want to bring down all associated resources with this repository.\\n\\n## Troubleshooting\\n\\n[](/applications/dagster#troubleshooting)\\n\\nIf you run into any issues with installing Dagster on Plural, feel free to join our Discord Community so that we can help you out.\\n\\n[Discord Community](https://discord.gg/pluralsh)\\n\\nIf you'd like to request any updates or new features for our Dagster installation, feel free to open an issue here.\\n\\n[here](https://github.com/pluralsh/plural-artifacts)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/applications/dagster.mdpart)\",\n\"source_links\": []\n\"id\": 96,\n\"page_link\": \"https://docs.plural.sh/applications/dagster-agent\",\n\"title\": \" Installing Dagster Agent\",\n\"text\": \"# Installing Dagster Agent\\n\\ndagster-agent deployed on plural\\n\\n## Description\\n\\nPlural will install Dagster Agent in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Dagster Agent for the following providers:\\n\\n```\\nplural bundle install dagster-agent dagster-agent-aws\\n```\\n\\n```\\nplural bundle install dagster-agent dagster-agent-azure\\n```\\n\\n```\\nplural bundle install dagster-agent dagster-agent-gcp\\n```\\n\\n## Setup Configuration\\n\\nagentToken: the dagster agent token to communicate with dagster cloud\",\n\"source_links\": []\n\"id\": 97,\n\"page_link\": \"https://docs.plural.sh/applications/datadog\",\n\"title\": \" Installing Datadog\",\n\"text\": \"# Installing Datadog\\n\\nObservability service for cloud-scale applications.\\n\\n## Description\\n\\nPlural will install Datadog in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Datadog for the following providers:\\n\\n```\\nplural bundle install datadog datadog-aws\\n```\\n\\n```\\nplural bundle install datadog datadog-azure\\n```\\n\\n```\\nplural bundle install datadog datadog-gcp\\n```\\n\\n## Setup Configuration\\n\\napiKey: the api key for your datadog account\",\n\"source_links\": []\n\"id\":", "start_char_idx": 287741, "end_char_idx": 290758, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "10cf48ea-2457-4d77-8cce-9e3b53f11f3c": {"__data__": {"id_": "10cf48ea-2457-4d77-8cce-9e3b53f11f3c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "a3205dfe-7210-4ea0-838d-133328dbe514", "node_type": null, "metadata": {}, "hash": "da6b873b4791bd2a5dbe2141bf4c2ecb9465de9795875453eac72c2f86064b40"}, "3": {"node_id": "044cff0a-7edf-4d92-8a53-8758a0d3a916", "node_type": null, "metadata": {}, "hash": "fabb22b8d3750a7cec9f1cea60031567bd2f7f12e1481766431ac7d338b7462d"}}, "hash": "d227e62bf4ffa3d9080dd133e80ecc7c3b077bb38dcef38a2f38851b6a5254d0", "text": "api key for your datadog account\",\n\"source_links\": []\n\"id\": 98,\n\"page_link\": \"https://docs.plural.sh/applications/datahub\",\n\"title\": \" Installing Datahub\",\n\"text\": \"# Installing Datahub\\n\\nAn open-source metadata platform for the modern data stack.\\n\\n## Description\\n\\nPlural will install Datahub in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Datahub for the following providers:\\n\\n```\\nplural bundle install datahub datahub-aws\\n```\\n\\n```\\nplural bundle install datahub datahub-azure\\n```\\n\\n```\\nplural bundle install datahub datahub-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: domain on which you'd like to host datahub's page\",\n\"source_links\": []\n\"id\": 99,\n\"page_link\": \"https://docs.plural.sh/applications/directus\",\n\"title\": \" Installing Directus\",\n\"text\": \"# Installing Directus\\n\\nThe Modern Data Stack \\ud83d\\udc30 \\u2014 Directus is an instant REST+GraphQL API and intuitive no-code data collaboration app for any SQL database.\\n\\n## Description\\n\\nPlural will install Directus in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Directus for the following providers:\\n\\n```\\nplural bundle install directus directus-aws\\n```\\n\\n```\\nplural bundle install directus directus-azure\\n```\\n\\n```\\nplural bundle install directus directus-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your directus installationadminEmail: email for the initial admin user\",\n\"source_links\": []\n\"id\": 100,\n\"page_link\": \"https://docs.plural.sh/applications/elasticsearch\",\n\"title\": \" Installing Elasticsearch\",\n\"text\": \"# Installing Elasticsearch\\n\\nde facto open source search databse\\n\\n## Description\\n\\nPlural will install Elasticsearch in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Elasticsearch for the following providers:\\n\\n```\\nplural bundle install elasticsearch elasticsearch-aws\\n```\\n\\n```\\nplural bundle install elasticsearch elasticsearch-azure\\n```\\n\\n```\\nplural bundle install elasticsearch elasticsearch-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: hostname for your kibana instance\",\n\"source_links\": []\n\"id\": 101,\n\"page_link\": \"https://docs.plural.sh/applications/etcd\",\n\"title\": \" Installing Etcd\",\n\"text\": \"# Installing Etcd\\n\\nA distributed reliable key-value store for the most critical data of a distributed system.\\n\\n## Description\\n\\nPlural will install Etcd in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Etcd for the following providers:\\n\\n```\\nplural bundle install etcd etcd-aws\\n```\\n\\n```\\nplural bundle install etcd etcd-azure\\n```\\n\\n```\\nplural bundle install etcd etcd-equinix\\n```\\n\\n```\\nplural bundle install etcd etcd-gcp\\n```\\n\\n```\\nplural bundle install etcd", "start_char_idx": 290723, "end_char_idx": 293689, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "044cff0a-7edf-4d92-8a53-8758a0d3a916": {"__data__": {"id_": "044cff0a-7edf-4d92-8a53-8758a0d3a916", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "10cf48ea-2457-4d77-8cce-9e3b53f11f3c", "node_type": null, "metadata": {}, "hash": "d227e62bf4ffa3d9080dd133e80ecc7c3b077bb38dcef38a2f38851b6a5254d0"}, "3": {"node_id": "bb75b3a8-52ec-45d4-bc62-60dcac50675c", "node_type": null, "metadata": {}, "hash": "53b9d3d39c3832fa14bfa317f0d2aa3122d0de047e4802891ba99db8a419769f"}}, "hash": "fabb22b8d3750a7cec9f1cea60031567bd2f7f12e1481766431ac7d338b7462d", "text": "bundle install etcd etcd-kind\\n```\",\n\"source_links\": []\n\"id\": 102,\n\"page_link\": \"https://docs.plural.sh/applications/external-secrets\",\n\"title\": \" Installing External Secrets\",\n\"text\": \"# Installing External Secrets\\n\\nexternal-secrets deployed on plural\\n\\n## Description\\n\\nPlural will install External Secrets in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support External Secrets for the following providers:\\n\\n```\\nplural bundle install external-secrets external-secrets-aws\\n```\",\n\"source_links\": []\n\"id\": 103,\n\"page_link\": \"https://docs.plural.sh/applications/filecoin\",\n\"title\": \" Installing Filecoin\",\n\"text\": \"# Installing Filecoin\\n\\nDecentralized storage network for renting unused hard disk space.\\n\\n## Description\\n\\nPlural will install Filecoin in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Filecoin for the following providers:\\n\\n```\\nplural bundle install filecoin filecoin-aws\\n```\",\n\"source_links\": []\n\"id\": 104,\n\"page_link\": \"https://docs.plural.sh/applications/ghost\",\n\"title\": \" Installing Ghost\",\n\"text\": \"# Installing Ghost\\n\\nOpen-source blog to publish, share, and grow a business around your content.\\n\\n## Description\\n\\nPlural will install Ghost in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Ghost for the following providers:\\n\\n```\\nplural bundle install ghost ghost-aws\\n```\\n\\n```\\nplural bundle install ghost ghost-gcp\\n```\\n\\n## Setup Configuration\\n\\nghostUser: username for your initial ghost user accountghostEmail: email address for the initial ghost userghostDomain: fully qualified domain name for the ghost blog instanceblogTitle: title for your ghost-powered blog\",\n\"source_links\": []\n\"id\": 105,\n\"page_link\": \"https://docs.plural.sh/applications/gitlab\",\n\"title\": \" Installing Gitlab\",\n\"text\": \"# Installing Gitlab\\n\\nSource control management tool with built-in CI/CD and DevOps solutions.\\n\\n## Description\\n\\nPlural will install Gitlab in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Gitlab for the following providers:\\n\\n```\\nplural bundle install gitlab aws-gitlab\\n```\\n\\n```\\nplural bundle install gitlab gcp-gitlab\\n```\\n\\n## Setup Configuration\\n\\nregistryBucket: bucket name for gitlab registryartifactsBucket: bucket name for gitlab artifactsuploadsBucket: bucket name for gitlab uploadspackagesBucket: bucket name for gitlab packagesbackupsBucket: bucket name for gitlab backupsbackupsTmpBucket: bucket name for gitlab tmp backupslfsBucket: bucket name for git large file storagerunnerCacheBucket: bucket name for gitlab runner cacheterraformBucket: bucket name for gitlab managed terraform state\",\n\"source_links\": []\n\"id\": 106,\n\"page_link\": \"https://docs.plural.sh/applications/goldilocks\",\n\"title\": \" Installing Goldilocks\",\n\"text\": \"# Installing Goldilocks\\n\\nK8s controller that provides a dashboard with guidance for setting up your resource requests.\\n\\n## Description\\n\\nPlural will install Goldilocks in a dependency-aware manner onto a Plural-managed", "start_char_idx": 293726, "end_char_idx": 296990, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bb75b3a8-52ec-45d4-bc62-60dcac50675c": {"__data__": {"id_": "bb75b3a8-52ec-45d4-bc62-60dcac50675c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "044cff0a-7edf-4d92-8a53-8758a0d3a916", "node_type": null, "metadata": {}, "hash": "fabb22b8d3750a7cec9f1cea60031567bd2f7f12e1481766431ac7d338b7462d"}, "3": {"node_id": "bca3d0e9-d831-4587-afd3-c3f19ef5b45a", "node_type": null, "metadata": {}, "hash": "9319b4aedd84fb0a97ee8a8dbe46b9d62d7a70309636935ba9d564abdca67c80"}}, "hash": "53b9d3d39c3832fa14bfa317f0d2aa3122d0de047e4802891ba99db8a419769f", "text": "will install Goldilocks in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Goldilocks for the following providers:\\n\\n```\\nplural bundle install goldilocks goldilocks-aws\\n```\\n\\n```\\nplural bundle install goldilocks goldilocks-azure\\n```\\n\\n```\\nplural bundle install goldilocks goldilocks-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your accessing the goldilocks dashboard\",\n\"source_links\": []\n\"id\": 107,\n\"page_link\": \"https://docs.plural.sh/applications/grafana\",\n\"title\": \" Installing Grafana\",\n\"text\": \"# Installing Grafana\\n\\nAn open-source platform for monitoring and observability with interactive visualizations.\\n\\n## Description\\n\\nPlural will install Grafana in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Grafana for the following providers:\\n\\n```\\nplural bundle install grafana aws-grafana\\n```\\n\\n```\\nplural bundle install grafana azure-grafana\\n```\\n\\n```\\nplural bundle install grafana equinix-grafana\\n```\\n\\n```\\nplural bundle install grafana gcp-grafana\\n```\\n\\n```\\nplural bundle install grafana kind-grafana\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your grafana installation\",\n\"source_links\": []\n\"id\": 108,\n\"page_link\": \"https://docs.plural.sh/applications/grafana-agent\",\n\"title\": \" Installing Grafana Agent\",\n\"text\": \"# Installing Grafana Agent\\n\\ngrafana-agent deployed on plural\\n\\n## Description\\n\\nPlural will install Grafana Agent in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Grafana Agent for the following providers:\\n\\n```\\nplural bundle install grafana-agent grafana-agent-aws\\n```\\n\\n```\\nplural bundle install grafana-agent grafana-agent-azure\\n```\",\n\"source_links\": []\n\"id\": 109,\n\"page_link\": \"https://docs.plural.sh/applications/grafana-tempo\",\n\"title\": \" Installing Grafana Tempo\",\n\"text\": \"# Installing Grafana Tempo\\n\\nAn open-source high-scale distributed tracing backend.\\n\\n## Description\\n\\nPlural will install Grafana Tempo in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Grafana Tempo for the following providers:\",\n\"source_links\": []\n\"id\": 110,\n\"page_link\": \"https://docs.plural.sh/applications/growthbook\",\n\"title\": \" Installing Growthbook\",\n\"text\": \"# Installing Growthbook\\n\\nFeature flagging and experimentation platform.\\n\\n## Description\\n\\nPlural will install Growthbook in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Growthbook for the following providers:\\n\\n```\\nplural bundle install growthbook growthbook-aws\\n```\\n\\n```\\nplural bundle install growthbook growthbook-azure\\n```\\n\\n```\\nplural bundle install growthbook", "start_char_idx": 296943, "end_char_idx": 299897, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bca3d0e9-d831-4587-afd3-c3f19ef5b45a": {"__data__": {"id_": "bca3d0e9-d831-4587-afd3-c3f19ef5b45a", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "bb75b3a8-52ec-45d4-bc62-60dcac50675c", "node_type": null, "metadata": {}, "hash": "53b9d3d39c3832fa14bfa317f0d2aa3122d0de047e4802891ba99db8a419769f"}, "3": {"node_id": "1dfe92fb-7616-4c64-af12-dec59063b65d", "node_type": null, "metadata": {}, "hash": "4b6531d5c754639c90ed56c2acbcdffe07cd63514841358fd0e27b0eec3df570"}}, "hash": "9319b4aedd84fb0a97ee8a8dbe46b9d62d7a70309636935ba9d564abdca67c80", "text": "bundle install growthbook growthbook-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: the domain name for your growthbook instanceapiHostname: the domain name for the growthbook api (should be different from hostname)growthbookBucket: bucket for your growthbook instance\",\n\"source_links\": []\n\"id\": 111,\n\"page_link\": \"https://docs.plural.sh/applications/harbor\",\n\"title\": \" Installing Harbor\",\n\"text\": \"# Installing Harbor\\n\\nAn open source trusted cloud native registry project that stores, signs, and scans content.\\n\\n## Description\\n\\nPlural will install Harbor in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Harbor for the following providers:\\n\\n```\\nplural bundle install harbor harbor-aws\\n```\\n\\n```\\nplural bundle install harbor harbor-azure\\n```\\n\\n```\\nplural bundle install harbor harbor-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your harbor installationnotaryHostname: FQDN to use for your harbor notary servicebucket: S3 Bucket to store harbor images\",\n\"source_links\": []\n\"id\": 112,\n\"page_link\": \"https://docs.plural.sh/applications/hasura\",\n\"title\": \" Installing Hasura\",\n\"text\": \"# Installing Hasura\\n\\nAn open-source product that gives you GraphQL or REST APIs with built-in authorization on your data.\\n\\n## Description\\n\\nPlural will install Hasura in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Hasura for the following providers:\\n\\n```\\nplural bundle install hasura hasura-aws\\n```\\n\\n```\\nplural bundle install hasura hasura-azure\\n```\\n\\n```\\nplural bundle install hasura hasura-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: Fully Qualified Domain Name to use for your hasura installation, eg hasura.topleveldomain.com if topleveldomain.com is the domain you inputed for dns_domain above.\",\n\"source_links\": []\n\"id\": 113,\n\"page_link\": \"https://docs.plural.sh/applications/hydra\",\n\"title\": \" Installing Hydra\",\n\"text\": \"# Installing Hydra\\n\\nLow latency, high-throughput OAuth 2.0 and OpenID Connect provider.\\n\\n## Description\\n\\nPlural will install Hydra in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Hydra for the following providers:\\n\\n```\\nplural bundle install hydra hydra-aws\\n```\\n\\n```\\nplural bundle install hydra hydra-azure\\n```\\n\\n```\\nplural bundle install hydra hydra-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: domain on which you'd like to host hydraadminHostname: dns name for the internal endpoint for hydra admin (leave empty to not enable ingress)loginUrl: url on which oauth logins will occurconsentUrl: url for oauth consent requests\",\n\"source_links\": []\n\"id\": 114,\n\"page_link\": \"https://docs.plural.sh/applications/influx\",\n\"title\": \" Installing Influx\",\n\"text\": \"# Installing Influx\\n\\nAn open-source time-series database.\\n\\n## Description\\n\\nPlural will install Influx in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI", "start_char_idx": 299940, "end_char_idx": 303033, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1dfe92fb-7616-4c64-af12-dec59063b65d": {"__data__": {"id_": "1dfe92fb-7616-4c64-af12-dec59063b65d", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "bca3d0e9-d831-4587-afd3-c3f19ef5b45a", "node_type": null, "metadata": {}, "hash": "9319b4aedd84fb0a97ee8a8dbe46b9d62d7a70309636935ba9d564abdca67c80"}, "3": {"node_id": "3b179406-fe67-46a7-9f9c-4f3f18645459", "node_type": null, "metadata": {}, "hash": "3e1a36a0b31280bb7f26000f7b012499a32143214525cf01d4ace9d4cd4a77da"}}, "hash": "4b6531d5c754639c90ed56c2acbcdffe07cd63514841358fd0e27b0eec3df570", "text": "manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Influx for the following providers:\\n\\n```\\nplural bundle install influx influx-aws\\n```\\n\\n```\\nplural bundle install influx influx-azure\\n```\\n\\n```\\nplural bundle install influx influx-gcp\\n```\\n\\n## Setup Configuration\\n\\nenableChronograf: whether to deploy the chronograf web uichronografHostname: Fully Qualified Domain Name for the chronograf web uienableKapacitor: whether to deploy kapacitor alertingenableTelegraf: whether to deploy telegraf metrics collectiondatabaseName: name for the initial bootstrapped databaseinfluxdbHostname: external dns name for your influxdb instance (leave empty if you don't want ingress)\",\n\"source_links\": []\n\"id\": 115,\n\"page_link\": \"https://docs.plural.sh/applications/ingress-nginx\",\n\"title\": \" Installing Ingress Nginx\",\n\"text\": \"# Installing Ingress Nginx\\n\\nAn Ingress controller for Kubernetes that uses NGINX as a reverse proxy and load balancer.\\n\\n## Description\\n\\nPlural will install Ingress Nginx in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Ingress Nginx for the following providers:\\n\\n```\\nplural bundle install ingress-nginx ingress-nginx-aws\\n```\\n\\n```\\nplural bundle install ingress-nginx ingress-nginx-azure\\n```\\n\\n```\\nplural bundle install ingress-nginx ingress-nginx-equinix\\n```\\n\\n```\\nplural bundle install ingress-nginx ingress-nginx-gcp\\n```\\n\\n```\\nplural bundle install ingress-nginx ingress-nginx-generic\\n```\\n\\n```\\nplural bundle install ingress-nginx ingress-nginx-kind\\n```\",\n\"source_links\": []\n\"id\": 116,\n\"page_link\": \"https://docs.plural.sh/applications/istio\",\n\"title\": \" Installing Istio\",\n\"text\": \"# Installing Istio\\n\\nOpen-source service mesh platform that controls data sharing across microservices.\\n\\n## Description\\n\\nPlural will install Istio in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Istio for the following providers:\\n\\n```\\nplural bundle install istio istio-aws\\n```\\n\\n```\\nplural bundle install istio istio-azure\\n```\\n\\n```\\nplural bundle install istio istio-gcp\\n```\\n\\n## Setup Configuration\\n\\nkialiHostname: FQDN to use for the Kiali installation\",\n\"source_links\": []\n\"id\": 117,\n\"page_link\": \"https://docs.plural.sh/applications/jitsu\",\n\"title\": \" Installing Jitsu\",\n\"text\": \"# Installing Jitsu\\n\\nOpen-source Segment alternative; high-performance data collection service.\\n\\n## Description\\n\\nPlural will install Jitsu in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Jitsu for the following providers:\\n\\n```\\nplural bundle install jitsu jitsu-aws\\n```\\n\\n```\\nplural bundle install jitsu jitsu-azure\\n```\\n\\n```\\nplural bundle install jitsu", "start_char_idx": 303005, "end_char_idx": 305930, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3b179406-fe67-46a7-9f9c-4f3f18645459": {"__data__": {"id_": "3b179406-fe67-46a7-9f9c-4f3f18645459", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "1dfe92fb-7616-4c64-af12-dec59063b65d", "node_type": null, "metadata": {}, "hash": "4b6531d5c754639c90ed56c2acbcdffe07cd63514841358fd0e27b0eec3df570"}, "3": {"node_id": "e3e4d275-1ee5-4eb9-8abd-677c38434ff6", "node_type": null, "metadata": {}, "hash": "1346de272c6f89a02cbddbf616823b15db75e87fbb23982bf37de3959a7987de"}}, "hash": "3e1a36a0b31280bb7f26000f7b012499a32143214525cf01d4ace9d4cd4a77da", "text": "bundle install jitsu jitsu-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: domain on which you'd like to host jitsu's configuration pageapiHostname: domain on which you'd like to host jitsu's apiairbyteEnabled: enable docker-in-docker airbyte support\",\n\"source_links\": []\n\"id\": 118,\n\"page_link\": \"https://docs.plural.sh/applications/jupyterhub\",\n\"title\": \" Installing Jupyterhub\",\n\"text\": \"# Installing Jupyterhub\\n\\nAn application that you can use to create documents that contain live code, equations, visualizations, and text.\\n\\n## Description\\n\\nPlural will install Jupyterhub in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Jupyterhub for the following providers:\\n\\n```\\nplural bundle install jupyterhub jupyterhub-aws\\n```\\n\\n```\\nplural bundle install jupyterhub jupyterhub-azure\\n```\\n\\n```\\nplural bundle install jupyterhub jupyterhub-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your jupyterhub installation\",\n\"source_links\": []\n\"id\": 119,\n\"page_link\": \"https://docs.plural.sh/applications/kafka\",\n\"title\": \" Installing Kafka\",\n\"text\": \"# Installing Kafka\\n\\nAn open-source distributed event streaming platform.\\n\\n## Description\\n\\nPlural will install Kafka in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Kafka for the following providers:\\n\\n```\\nplural bundle install kafka aws-kafka\\n```\\n\\n```\\nplural bundle install kafka azure-kafka\\n```\\n\\n```\\nplural bundle install kafka gcp-kafka\\n```\",\n\"source_links\": []\n\"id\": 120,\n\"page_link\": \"https://docs.plural.sh/applications/knative\",\n\"title\": \" Installing Knative\",\n\"text\": \"# Installing Knative\\n\\nAn open-source enterprise-level solution to build serverless and event-driven applications.\\n\\n## Description\\n\\nPlural will install Knative in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Knative for the following providers:\\n\\n```\\nplural bundle install knative knative-aws\\n```\\n\\n```\\nplural bundle install knative knative-gcp\\n```\\n\\n```\\nplural bundle install knative knative-operator-aws\\n```\",\n\"source_links\": []\n\"id\": 121,\n\"page_link\": \"https://docs.plural.sh/applications/kserve\",\n\"title\": \" Installing Kserve\",\n\"text\": \"# Installing Kserve\\n\\nKServe provides a K8s CRD for serving ML models on arbitrary frameworks.\\n\\n## Description\\n\\nPlural will install Kserve in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Kserve for the following providers:\\n\\n```\\nplural bundle install kserve kserve-aws\\n```\\n\\n```\\nplural bundle install kserve kserve-azure\\n```\\n\\n```\\nplural bundle install kserve kserve-gcp\\n```\",\n\"source_links\": []\n\"id\":", "start_char_idx": 305965, "end_char_idx": 308844, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e3e4d275-1ee5-4eb9-8abd-677c38434ff6": {"__data__": {"id_": "e3e4d275-1ee5-4eb9-8abd-677c38434ff6", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "3b179406-fe67-46a7-9f9c-4f3f18645459", "node_type": null, "metadata": {}, "hash": "3e1a36a0b31280bb7f26000f7b012499a32143214525cf01d4ace9d4cd4a77da"}, "3": {"node_id": "ad85ba7a-1a95-4e04-8f20-e8a1e89dc3b5", "node_type": null, "metadata": {}, "hash": "82c8df618b1d6cdd631627826e7df0195f1693003c84a6960da014f0b9385a84"}}, "hash": "1346de272c6f89a02cbddbf616823b15db75e87fbb23982bf37de3959a7987de", "text": "[]\n\"id\": 122,\n\"page_link\": \"https://docs.plural.sh/applications/kubecost\",\n\"title\": \" Kubecost\",\n\"text\": \"# Kubecost\\n\\nGet visibility into your Kubernetes spend and resource allocation.\\n\\n## Description\\n\\nPlural will install Kubecost in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Kubecost for the following providers:\\n\\n```\\nplural bundle install kubecost kubecost-aws\\n```\\n\\n```\\nplural bundle install kubecost kubecost-azure\\n```\\n\\n```\\nplural bundle install kubecost kubecost-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your KubeCost installation\\n\\n## Examples\\n\\n[](/applications/kubecost#examples)\\n\\nPlural integrates directly with kubecost to provide cost analysis for any application deployed on your plural kubernetes clusters. Kubecost can be installed just like any other application, although perhaps the easiest is to just go to your console and click the install button in the top right:\\n\\n![Image](/assets/Screen%20Shot%202022-01-07%20at%2011.47.57%20PM.png)\\n\\n![Image](/assets/Screen%20Shot%202022-01-07%20at%2011.48.06%20PM.png)\\n\\nOnce Kubecost is installed, the plural console will query its api to surface granular cost information for all your apps, which you can see by clicking the app information icon also in the top right, giving a modal looking something like this:\\n\\n![Image](/assets/Screen%20Shot%202022-01-07%20at%2011.50.03%20PM.png)\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/applications/kubecost.mdpart)\",\n\"source_links\": []\n\"id\": 123,\n\"page_link\": \"https://docs.plural.sh/applications/kubeflow\",\n\"title\": \" Installing Kubeflow\",\n\"text\": \"# Installing Kubeflow\\n\\nCloud-native platform for machine learning operations - pipelines, training, and deployment.\\n\\n## Description\\n\\nPlural will install Kubeflow in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Kubeflow for the following providers:\\n\\n```\\nplural bundle install kubeflow kubeflow-aws\\n```\\n\\n```\\nplural bundle install kubeflow kubeflow-gcp\\n```\\n\\n## Setup Configuration\\n\\npipelines_bucket: bucket to store the pipeline artifacts and logs inhostname: FQDN to use for your Kubeflow installation\",\n\"source_links\": []\n\"id\": 124,\n\"page_link\": \"https://docs.plural.sh/applications/kubescape\",\n\"title\": \" Installing Kubescape\",\n\"text\": \"# Installing Kubescape\\n\\nMulti-cloud K8s single pane of glass for security.\\n\\n## Description\\n\\nPlural will install Kubescape in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Kubescape for the following providers:\\n\\n```\\nplural bundle install kubescape kubescape-aws\\n```\\n\\n```\\nplural bundle install kubescape kubescape-azure\\n```\\n\\n```\\nplural bundle install kubescape", "start_char_idx": 308855, "end_char_idx": 311785, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ad85ba7a-1a95-4e04-8f20-e8a1e89dc3b5": {"__data__": {"id_": "ad85ba7a-1a95-4e04-8f20-e8a1e89dc3b5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "e3e4d275-1ee5-4eb9-8abd-677c38434ff6", "node_type": null, "metadata": {}, "hash": "1346de272c6f89a02cbddbf616823b15db75e87fbb23982bf37de3959a7987de"}, "3": {"node_id": "fb605d04-fa58-4265-b257-f963c60a8d1c", "node_type": null, "metadata": {}, "hash": "b516966689a235ea67ac85a9c80c9a9e4b7c30fab9b01bb317a3ba534660e924"}}, "hash": "82c8df618b1d6cdd631627826e7df0195f1693003c84a6960da014f0b9385a84", "text": "bundle install kubescape kubescape-gcp\\n```\\n\\n## Setup Configuration\\n\\naccountGuid: Unique identifier connecting results to the Kubescape Cloud account. To learn more go here https://hub.armosec.io/docs/kubescape-cloud-account#account-id\",\n\"source_links\": []\n\"id\": 125,\n\"page_link\": \"https://docs.plural.sh/applications/kubricks\",\n\"title\": \" Installing Kubricks\",\n\"text\": \"# Installing Kubricks\\n\\nkubricks deployed on plural\\n\\n## Description\\n\\nPlural will install Kubricks in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Kubricks for the following providers:\\n\\n```\\nplural bundle install kubricks kubricks-aws\\n```\\n\\n```\\nplural bundle install kubricks kubricks-azure\\n```\\n\\n```\\nplural bundle install kubricks kubricks-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: domain on which you'd like to host n8n's page\",\n\"source_links\": []\n\"id\": 126,\n\"page_link\": \"https://docs.plural.sh/applications/kyverno\",\n\"title\": \" Installing Kyverno\",\n\"text\": \"# Installing Kyverno\\n\\nA policy engine designed for Kubernetes that can validate, mutate, and generate configurations.\\n\\n## Description\\n\\nPlural will install Kyverno in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Kyverno for the following providers:\\n\\n```\\nplural bundle install kyverno kyverno-aws\\n```\\n\\n```\\nplural bundle install kyverno kyverno-azure\\n```\\n\\n```\\nplural bundle install kyverno kyverno-gcp\\n```\\n\\n## Setup Configuration\\n\\nenablePolicies: Deploy Kyverno policies\",\n\"source_links\": []\n\"id\": 127,\n\"page_link\": \"https://docs.plural.sh/applications/lightdash\",\n\"title\": \" Installing Lightdash\",\n\"text\": \"# Installing Lightdash\\n\\nAn open source alternative to looker built on dbt\\n\\n## Description\\n\\nPlural will install Lightdash in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Lightdash for the following providers:\\n\\n```\\nplural bundle install lightdash lightdash-aws\\n```\\n\\n```\\nplural bundle install lightdash lightdash-azure\\n```\\n\\n```\\nplural bundle install lightdash lightdash-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your Lightdash installation\",\n\"source_links\": []\n\"id\": 128,\n\"page_link\": \"https://docs.plural.sh/applications/loki\",\n\"title\": \" Installing Loki\",\n\"text\": \"# Installing Loki\\n\\nA horizontally scalable, highly available, multi-tenant log aggregation system inspired by Prometheus.\\n\\n## Description\\n\\nPlural will install Loki in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Loki for the following providers:\\n\\n```\\nplural bundle install loki loki-aws\\n```\\n\\n```\\nplural bundle install loki loki-azure\\n```\\n\\n```\\nplural bundle install loki", "start_char_idx": 311772, "end_char_idx": 314691, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "fb605d04-fa58-4265-b257-f963c60a8d1c": {"__data__": {"id_": "fb605d04-fa58-4265-b257-f963c60a8d1c", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "ad85ba7a-1a95-4e04-8f20-e8a1e89dc3b5", "node_type": null, "metadata": {}, "hash": "82c8df618b1d6cdd631627826e7df0195f1693003c84a6960da014f0b9385a84"}, "3": {"node_id": "bfc076cb-15b4-4b9b-879a-c796d184de57", "node_type": null, "metadata": {}, "hash": "b1653c524bb6cef660592046fe9ffdbb13ebe9ebc448e19342923a21bc28e223"}}, "hash": "b516966689a235ea67ac85a9c80c9a9e4b7c30fab9b01bb317a3ba534660e924", "text": "bundle install loki loki-gcp\\n```\\n\\n## Setup Configuration\\n\\nlokiBucket: bucket to store the logs inhostname: the hostname you'll deploy loki with (will only be available on a private network)multiTenant: if loki should be deployed in multi-tenant mode\",\n\"source_links\": []\n\"id\": 129,\n\"page_link\": \"https://docs.plural.sh/applications/mage\",\n\"title\": \"Docs | Plural\",\n\"text\": \"## Description\\n\\nPlural will install  in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support  for the following providers:\",\n\"source_links\": []\n\"id\": 130,\n\"page_link\": \"https://docs.plural.sh/applications/meilisearch\",\n\"title\": \"Docs | Plural\",\n\"text\": \"## Description\\n\\nPlural will install  in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support  for the following providers:\",\n\"source_links\": []\n\"id\": 131,\n\"page_link\": \"https://docs.plural.sh/applications/metabase\",\n\"title\": \" Installing Metabase\",\n\"text\": \"# Installing Metabase\\n\\nAn easy, open-source way for everyone to ask questions and learn from data.\\n\\n## Description\\n\\nPlural will install Metabase in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Metabase for the following providers:\\n\\n```\\nplural bundle install metabase metabase-aws\\n```\\n\\n```\\nplural bundle install metabase metabase-azure\\n```\\n\\n```\\nplural bundle install metabase metabase-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: fqdn for your metabase instance\",\n\"source_links\": []\n\"id\": 132,\n\"page_link\": \"https://docs.plural.sh/applications/mimir\",\n\"title\": \" Installing Mimir\",\n\"text\": \"# Installing Mimir\\n\\nmimir deployed on plural\\n\\n## Description\\n\\nPlural will install Mimir in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Mimir for the following providers:\\n\\n```\\nplural bundle install mimir mimir-aws\\n```\\n\\n```\\nplural bundle install mimir mimir-azure\\n```\\n\\n## Setup Configuration\\n\\nmimirBlocksBucket: bucket to store the mimir blocks inmimirAlertBucket: bucket for mimir alertmanagermimirRulerBucket: bucket for mimir ruler storagehostname: the hostname you'll deploy mimir with (only used if trace-shield is deployed)\",\n\"source_links\": []\n\"id\": 133,\n\"page_link\": \"https://docs.plural.sh/applications/minecraft\",\n\"title\": \" Installing Minecraft\",\n\"text\": \"# Installing Minecraft\\n\\nDeploy your very own Minecraft server on Kubernetes.\\n\\n## Description\\n\\nPlural will install Minecraft in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Minecraft for the following providers:\\n\\n```\\nplural bundle install minecraft minecraft-aws\\n```\\n\\n```\\nplural bundle install minecraft minecraft-azure\\n```\\n\\n```\\nplural bundle install minecraft minecraft-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: fqdn for your metabase instance\",\n\"source_links\": []\n\"id\":", "start_char_idx": 314697, "end_char_idx": 317798, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bfc076cb-15b4-4b9b-879a-c796d184de57": {"__data__": {"id_": "bfc076cb-15b4-4b9b-879a-c796d184de57", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "fb605d04-fa58-4265-b257-f963c60a8d1c", "node_type": null, "metadata": {}, "hash": "b516966689a235ea67ac85a9c80c9a9e4b7c30fab9b01bb317a3ba534660e924"}, "3": {"node_id": "4c6d9c71-3667-4a17-929d-651f27dbcea2", "node_type": null, "metadata": {}, "hash": "4eba084f2e29ab156dab414f965b82d7ade080f653f5093dcebb38cae18e8796"}}, "hash": "b1653c524bb6cef660592046fe9ffdbb13ebe9ebc448e19342923a21bc28e223", "text": "fqdn for your metabase instance\",\n\"source_links\": []\n\"id\": 134,\n\"page_link\": \"https://docs.plural.sh/applications/minio\",\n\"title\": \" Installing Minio\",\n\"text\": \"# Installing Minio\\n\\nHigh-performance Kubernetes-native object storage compatible with the S3 API.\\n\\n## Description\\n\\nPlural will install Minio in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Minio for the following providers:\\n\\n```\\nplural bundle install minio minio-aws\\n```\\n\\n```\\nplural bundle install minio minio-azure\\n```\\n\\n```\\nplural bundle install minio minio-equinix\\n```\\n\\n```\\nplural bundle install minio minio-gcp\\n```\\n\\n```\\nplural bundle install minio minio-kind\\n```\\n\\n## Setup Configuration\\n\\nminio_bucket: bucket to store minio datahostname: Fully Qualified Domain Name to use for your minio gateway installation, eg minio.topleveldomain.com if topleveldomain.com is the domain you inputed for dns_domain above.consoleHostname: Fully Qualified Domain Name to use for your minio console installation, eg minio.topleveldomain.com if topleveldomain.com is the domain you inputed for dns_domain above.\",\n\"source_links\": []\n\"id\": 135,\n\"page_link\": \"https://docs.plural.sh/applications/mlflow\",\n\"title\": \" Installing MLflow\",\n\"text\": \"# Installing MLflow\\n\\nAn open-source platform that streamlines machine learning development.\\n\\n## Description\\n\\nPlural will install MLflow in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support MLflow for the following providers:\\n\\n```\\nplural bundle install mlflow mlflow-aws\\n```\\n\\n```\\nplural bundle install mlflow mlflow-azure\\n```\\n\\n## Setup Configuration\\n\\nmlflow_bucket: bucket to store the mlflow artifacts inhostname: FQDN to use for your MLFlow installation\",\n\"source_links\": []\n\"id\": 136,\n\"page_link\": \"https://docs.plural.sh/applications/mongodb\",\n\"title\": \" Installing MongoDB\",\n\"text\": \"# Installing MongoDB\\n\\nA scalable NoSQL document-oriented database.\\n\\n## Description\\n\\nPlural will install MongoDB in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support MongoDB for the following providers:\\n\\n```\\nplural bundle install mongodb mongodb-aws\\n```\\n\\n```\\nplural bundle install mongodb mongodb-azure\\n```\\n\\n```\\nplural bundle install mongodb mongodb-gcp\\n```\",\n\"source_links\": []\n\"id\": 137,\n\"page_link\": \"https://docs.plural.sh/applications/monitoring\",\n\"title\": \" Installing Monitoring\",\n\"text\": \"# Installing Monitoring\\n\\nAn OpenMetrics suite for Plural.\\n\\n## Description\\n\\nPlural will install Monitoring in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Monitoring for the following providers:\\n\\n```\\nplural bundle install monitoring monitoring-aws\\n```\\n\\n```\\nplural bundle install monitoring", "start_char_idx": 317763, "end_char_idx": 320741, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "4c6d9c71-3667-4a17-929d-651f27dbcea2": {"__data__": {"id_": "4c6d9c71-3667-4a17-929d-651f27dbcea2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "bfc076cb-15b4-4b9b-879a-c796d184de57", "node_type": null, "metadata": {}, "hash": "b1653c524bb6cef660592046fe9ffdbb13ebe9ebc448e19342923a21bc28e223"}, "3": {"node_id": "d6232ab8-e940-4d0b-9e7f-fdfbd5220143", "node_type": null, "metadata": {}, "hash": "bd68b2293d3cb41bf6bafc975632c233ff6d228f7dc5a29fded42281e426453f"}}, "hash": "4eba084f2e29ab156dab414f965b82d7ade080f653f5093dcebb38cae18e8796", "text": "bundle install monitoring monitoring-azure\\n```\\n\\n```\\nplural bundle install monitoring monitoring-equinix\\n```\\n\\n```\\nplural bundle install monitoring monitoring-gcp\\n```\\n\\n```\\nplural bundle install monitoring monitoring-generic\\n```\\n\\n```\\nplural bundle install monitoring monitoring-kind\\n```\",\n\"source_links\": []\n\"id\": 138,\n\"page_link\": \"https://docs.plural.sh/applications/mysql\",\n\"title\": \" Installing MySQL\",\n\"text\": \"# Installing MySQL\\n\\nAn open-source relational database management system.\\n\\n## Description\\n\\nPlural will install MySQL in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support MySQL for the following providers:\\n\\n```\\nplural bundle install mysql aws-mysql\\n```\\n\\n```\\nplural bundle install mysql aws-mysql-percona\\n```\\n\\n```\\nplural bundle install mysql gcp-mysql\\n```\\n\\n## Setup Configuration\\n\\nbackup_bucket: bucket to store mysql backups inhostname: FQDN to use for your accessing the mysql orchestrator\",\n\"source_links\": []\n\"id\": 139,\n\"page_link\": \"https://docs.plural.sh/applications/n8n\",\n\"title\": \" Installing n8n\",\n\"text\": \"# Installing n8n\\n\\nAn extendable workflow automation tool.\\n\\n## Description\\n\\nPlural will install n8n in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support n8n for the following providers:\\n\\n```\\nplural bundle install n8n n8n-aws\\n```\\n\\n```\\nplural bundle install n8n n8n-azure\\n```\\n\\n```\\nplural bundle install n8n n8n-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: domain on which you'd like to host n8n's page\",\n\"source_links\": []\n\"id\": 140,\n\"page_link\": \"https://docs.plural.sh/applications/nextcloud\",\n\"title\": \" Installing Nextcloud\",\n\"text\": \"# Installing Nextcloud\\n\\nA completely integrated on-premises content collaboration platform.\\n\\n## Description\\n\\nPlural will install Nextcloud in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Nextcloud for the following providers:\\n\\n```\\nplural bundle install nextcloud nextcloud-aws\\n```\\n\\n```\\nplural bundle install nextcloud nextcloud-azure\\n```\\n\\n## Setup Configuration\\n\\nnextcloud_bucket: bucket to store nextcloud datahostname: FQDN to use for your nextcloud installation\",\n\"source_links\": []\n\"id\": 141,\n\"page_link\": \"https://docs.plural.sh/applications/nocodb\",\n\"title\": \" Installing NocoDB\",\n\"text\": \"# Installing NocoDB\\n\\nOpen-source alternative to Airtable that turns any database into a smart spreadsheet.\\n\\n## Description\\n\\nPlural will install NocoDB in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support NocoDB for the following providers:\\n\\n```\\nplural bundle install nocodb nocodb-aws\\n```\\n\\n```\\nplural bundle install", "start_char_idx": 320772, "end_char_idx": 323670, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d6232ab8-e940-4d0b-9e7f-fdfbd5220143": {"__data__": {"id_": "d6232ab8-e940-4d0b-9e7f-fdfbd5220143", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "4c6d9c71-3667-4a17-929d-651f27dbcea2", "node_type": null, "metadata": {}, "hash": "4eba084f2e29ab156dab414f965b82d7ade080f653f5093dcebb38cae18e8796"}, "3": {"node_id": "7d00d865-956d-4262-8f2e-5e1126c9c2c5", "node_type": null, "metadata": {}, "hash": "59dc44ea2a2218dd69eee0683cddd845f4c3c021561d5f2aaa87222401524ad6"}}, "hash": "bd68b2293d3cb41bf6bafc975632c233ff6d228f7dc5a29fded42281e426453f", "text": "bundle install nocodb nocodb-azure\\n```\\n\\n```\\nplural bundle install nocodb nocodb-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: Fully Qualified Domain Name to use for your nocodb installation\",\n\"source_links\": []\n\"id\": 142,\n\"page_link\": \"https://docs.plural.sh/applications/nvidia-operator\",\n\"title\": \" Installing NVIDIA Operator\",\n\"text\": \"# Installing NVIDIA Operator\\n\\nAllows administrators of Kubernetes clusters to manage GPU nodes just like CPU nodes in the cluster.\\n\\n## Description\\n\\nPlural will install NVIDIA Operator in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support NVIDIA Operator for the following providers:\\n\\n```\\nplural bundle install nvidia-operator nvidia-operator-aws\\n```\\n\\n```\\nplural bundle install nvidia-operator nvidia-operator-azure\\n```\\n\\n```\\nplural bundle install nvidia-operator nvidia-operator-gcp\\n```\",\n\"source_links\": []\n\"id\": 143,\n\"page_link\": \"https://docs.plural.sh/applications/oauth2-proxy\",\n\"title\": \" Installing OAuth2 Proxy\",\n\"text\": \"# Installing OAuth2 Proxy\\n\\nA reverse proxy & static file server that issues auth to validate accounts by email or domain.\\n\\n## Description\\n\\nPlural will install OAuth2 Proxy in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support OAuth2 Proxy for the following providers:\\n\\n```\\nplural bundle install oauth2-proxy oauth2-proxy-aws\\n```\\n\\n## Setup Configuration\\n\\nauth_cookie_domain: domain to use for the auth cookieauth_whitelist_domain: whitelist domain for authoidc_issuer_url: uri of your oidc issueruser_id_claim: claim used for the user id\",\n\"source_links\": []\n\"id\": 144,\n\"page_link\": \"https://docs.plural.sh/applications/plural\",\n\"title\": \" Installing Plural\",\n\"text\": \"# Installing Plural\\n\\nEmpowers devs to build & maintain cloud-native & production-ready OSS infrastructure on Kubernetes.\\n\\n## Description\\n\\nPlural will install Plural in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Plural for the following providers:\\n\\n```\\nplural bundle install plural plural-aws\\n```\\n\\n```\\nplural bundle install plural plural-gcp\\n```\\n\\n## Setup Configuration\\n\\nchartmuseum_bucket: Bucket for helm chartsassets_bucket: bucket for misc assets (docker imgs/terraform modules)images_bucket: bucket for images and iconsplural_dns: FQDN to use for your plural clusterplural_dkr_dns: FQDN for your plural docker registryadmin_name: name for initial admin useradmin_email: email for initial admin userpublisher: name for initial publisherpublisher_description: description for initial publisherhydra_host: the fqdn to use for hydra, for managing plural oauth\",\n\"source_links\": []\n\"id\": 145,\n\"page_link\": \"https://docs.plural.sh/applications/postgres\",\n\"title\": \" Installing PostgreSQL\",\n\"text\": \"# Installing PostgreSQL\\n\\nGeneral-use OLTP database for stateful use cases.\\n\\n## Description\\n\\nPlural will install PostgreSQL in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one", "start_char_idx": 323681, "end_char_idx": 326828, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7d00d865-956d-4262-8f2e-5e1126c9c2c5": {"__data__": {"id_": "7d00d865-956d-4262-8f2e-5e1126c9c2c5", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "d6232ab8-e940-4d0b-9e7f-fdfbd5220143", "node_type": null, "metadata": {}, "hash": "bd68b2293d3cb41bf6bafc975632c233ff6d228f7dc5a29fded42281e426453f"}, "3": {"node_id": "eaf7c1c2-d799-40fb-b1ab-a0cad345c879", "node_type": null, "metadata": {}, "hash": "5e18c6dfc327ac846be86b4fe1db79acdeaf5f3be61c85fc4cc9a3d09577bd45"}}, "hash": "59dc44ea2a2218dd69eee0683cddd845f4c3c021561d5f2aaa87222401524ad6", "text": "dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support PostgreSQL for the following providers:\\n\\n```\\nplural bundle install postgres aws-postgres\\n```\\n\\n```\\nplural bundle install postgres azure-postgres\\n```\\n\\n```\\nplural bundle install postgres equinix-postgres\\n```\\n\\n```\\nplural bundle install postgres gcp-postgres\\n```\\n\\n```\\nplural bundle install postgres generic-postgres\\n```\\n\\n```\\nplural bundle install postgres kind-postgres\\n```\\n\\n## Setup Configuration\\n\\nwal_bucket: Arbitary name for s3 bucket to store wal archives in, eg plural-wal-archives\\n\\n## Introduction\\n\\n[](/applications/postgres#introduction)\\n\\nYou may have noticed that Plural sometimes deploys with the Postgres application pre-installed. This is because it is a dependency for the Plural Console, which requires a Postgres database to store state about your Plural installation.\\n\\nSome applications may also have a Postgres database as a dependency, in which case a separate database would be deployed for that application. These databases can be accessed directly using the plural proxy CLI command which you can learn about here.\\n\\n[here](/operations/managing-applications/connect-application-db)\\n\\nTo fulfill these requests for a database, Plural uses the Zalando Postgres Operator. This allows us to create Postgres databases on-demand when required by an application.\\n\\n[Zalando Postgres Operator](https://github.com/zalando/postgres-operator)\\n\\n## Using the Postgres Operator\\n\\n[](/applications/postgres#using-the-postgres-operator)\\n\\nWhile we use the operator automatically to create databases for applications, you can invoke the operator yourself to manually spin up a database for your own use cases.\\n\\nTo do this, place the following YAML into any application directory (we recommend /postgres/helm/postgres/templates):\\n\\n```\\napiVersion: acid.zalan.do/v1\\nkind: postgresql\\nmetadata:\\n  annotations:\\n    meta.helm.sh/release-name: plural\\n    meta.helm.sh/release-namespace: plural\\n  labels:\\n    app: postgres\\n    app.kubernetes.io/instance: plural\\n    app.kubernetes.io/managed-by: Helm\\n    app.kubernetes.io/name: plural\\n    app.kubernetes.io/version: 0.9.16-rc5\\n    db: plural\\n    helm.sh/chart: plural-0.9.37\\n  name: plural-plural\\n  namespace: plural\\nspec:\\n  clone:\\n    cluster: plural-clone\\n  databases:\\n    plural: plural\\n  numberOfInstances: 2\\n  postgresql:\\n    parameters:\\n      max_connections: \\\"101\\\"\\n    version: \\\"13\\\"\\n  resources:\\n    limits:\\n      cpu: \\\"2\\\"\\n      memory: 1Gi\\n    requests:\\n      cpu: 400m\\n      memory: 1Gi\\n  sidecars:\\n  - env:\\n    - name: DATA_SOURCE_URI\\n      value: 127.0.0.1:5432/plural?sslmode=disable\\n    - name: DATA_SOURCE_USER\\n      valueFrom:\\n        secretKeyRef:\\n          key: username\\n     ", "start_char_idx": 326777, "end_char_idx": 329636, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "eaf7c1c2-d799-40fb-b1ab-a0cad345c879": {"__data__": {"id_": "eaf7c1c2-d799-40fb-b1ab-a0cad345c879", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "7d00d865-956d-4262-8f2e-5e1126c9c2c5", "node_type": null, "metadata": {}, "hash": "59dc44ea2a2218dd69eee0683cddd845f4c3c021561d5f2aaa87222401524ad6"}, "3": {"node_id": "611feeb1-9be4-46f0-a5f9-62d3585f5eac", "node_type": null, "metadata": {}, "hash": "cfab33bc77f6a3c7cbca75245ce9ddafaf70f9c1a0b20c5bd515a78c8eecc3e6"}}, "hash": "5e18c6dfc327ac846be86b4fe1db79acdeaf5f3be61c85fc4cc9a3d09577bd45", "text": "         key: username\\n          name: postgres.plural-plural.credentials.postgresql.acid.zalan.do\\n    - name: DATA_SOURCE_PASS\\n      valueFrom:\\n        secretKeyRef:\\n          key: password\\n          name: postgres.plural-plural.credentials.postgresql.acid.zalan.do\\n    image: gcr.io/pluralsh/postgres-exporter:0.8.0\\n    livenessProbe:\\n      failureThreshold: 6\\n      httpGet:\\n        path: /\\n        port: http-metrics\\n        scheme: HTTP\\n      initialDelaySeconds: 5\\n      periodSeconds: 10\\n      successThreshold: 1\\n      timeoutSeconds: 5\\n    name: exporter\\n    ports:\\n    - containerPort: 9187\\n      name: http-metrics\\n      protocol: TCP\\n    readinessProbe:\\n      failureThreshold: 6\\n      httpGet:\\n        path: /\\n        port: http-metrics\\n        scheme: HTTP\\n      initialDelaySeconds: 5\\n      periodSeconds: 10\\n      successThreshold: 1\\n      timeoutSeconds: 5\\n  teamId: plural\\n  tolerations:\\n  - effect: NoSchedule\\n    key: plural.sh/pluralReserved\\n    operator: Exists\\n  users:\\n    plural:\\n    - superuser\\n    - createdb\\n  volume:\\n    size: 75Gi\\n```\\n\\nNow run plural deploy --commit \\\"deploy postgres\\\" and the Postgres Operator will pick up your request and create the database for you.\\n\\n## Accessing the Database manually\\n\\n[](/applications/postgres#accessing-the-database-manually)\\n\\nIn order to access your database directly, you'll need to get the generated password. This is located in a Kubernetes secret within the Postgres namespace.\\n\\nTo find the password secret, make sure that you have kubectl configured to point at the relevant cluster and run the following command:\\n\\n```\\nkubectl get secrets -n postgres\\n```\\n\\nThe relevant secret should follow the naming convention dbuser.dbname.acid.zalando. To decrypt the secret, run the following command:\\n\\n```\\nkubectl get secrets/{SECRET_NAME} --template={{.data.password}} | base64 -d\\n```\\n\\nNow with the username in the name of this secret and the decrypted password, you can now access your database.\\n\\n## Using the Database with other Plural Applications\\n\\n[](/applications/postgres#using-the-database-with-other-plural-applications)\\n\\nA common use case for spinning up a new Postgres database is using it with another Plural application, for example, Superset. To connect any application to the Postgres database on the same Kubernetes cluster, use the following address:\\n\\n{POSTGRES_POD_NAME}.postgres:5432\\n\\nTo get the Pod name for your Postgres database, run kubectl get pods -n postgres in the relevant Kubernetes cluster.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/applications/postgres.mdpart)\",\n\"source_links\": []\n\"id\":", "start_char_idx": 329688, "end_char_idx": 332386, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "611feeb1-9be4-46f0-a5f9-62d3585f5eac": {"__data__": {"id_": "611feeb1-9be4-46f0-a5f9-62d3585f5eac", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "eaf7c1c2-d799-40fb-b1ab-a0cad345c879", "node_type": null, "metadata": {}, "hash": "5e18c6dfc327ac846be86b4fe1db79acdeaf5f3be61c85fc4cc9a3d09577bd45"}, "3": {"node_id": "64e16ed0-f4f8-437f-8d3a-01b37dc0c9e4", "node_type": null, "metadata": {}, "hash": "8a880c87fc55fb269bfae26dc763a7766ecc70473f3e665c1320e181cec9c1f0"}}, "hash": "cfab33bc77f6a3c7cbca75245ce9ddafaf70f9c1a0b20c5bd515a78c8eecc3e6", "text": "[]\n\"id\": 146,\n\"page_link\": \"https://docs.plural.sh/applications/posthog\",\n\"title\": \" Installing Posthog\",\n\"text\": \"# Installing Posthog\\n\\nThe all-in-one platform for building better products.\\n\\n## Description\\n\\nPlural will install Posthog in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Posthog for the following providers:\\n\\n```\\nplural bundle install posthog posthog-aws\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your posthog installationposthogBucket: S3 bucket to use for posthognotificationEmail: email for notifications to be sent to from the PostHog stack\",\n\"source_links\": []\n\"id\": 147,\n\"page_link\": \"https://docs.plural.sh/applications/prefect\",\n\"title\": \" Installing Prefect\",\n\"text\": \"# Installing Prefect\\n\\nModern orchestration tool and Airflow alternative.\\n\\n## Description\\n\\nPlural will install Prefect in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Prefect for the following providers:\\n\\n```\\nplural bundle install prefect prefect-aws\\n```\\n\\n```\\nplural bundle install prefect prefect-azure\\n```\\n\\n```\\nplural bundle install prefect prefect-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your prefect installation\\n\\n## Setting up Prefect with Plural\\n\\n[](/applications/prefect#setting-up-prefect-with-plural)\\n\\nThis guide goes over the basics to getting started with running Prefect flows on Plural.\\n\\n### Step 1: Configure Access to Plural\\n\\n[](/applications/prefect#step-1-configure-access-to-plural)\\n\\nThe Prefect CLI needs API access to Prefect on the Plural cluster. A simple solution is to create a basic auth user in Plural.\\n\\nprefect: users: { <username>: <password> }\\n\\nPlural has a utility to create a password. `plural crypto random will create a random string that can be used as a password.\\n\\n### Step 2: Install Prefect CLI\\n\\n[](/applications/prefect#step-2-install-prefect-cli)\\n\\nTo install the Prefect CLI locally, you will need to have Python and pip installed on your machine.\\n\\nOpen a terminal window and run the following command to install the Prefect CLI:\\n\\n```\\npip install prefect\\n```\\n\\nOnce the installation is complete, you can verify that the CLI is installed by running the following command:\\n\\n```\\nprefect --version\\n``\\n\\n### Step 3: Create a profile to connect to Plural\\n\\nPrefect allows you to have multiple profiles to connect to different Orion instances. I.e local, cloud or self-hosted. Plural is a self-hosted solution.\\n\\n1) Create a new profile prefect profile create <profile-name> set the profile name to plural\\n2) On the new profile, set the PREFECT_API_URL with prefect config set PREFECT_API_URL=\\\"https://<user>:<password>@<yourprefecturl>.onplural.sh/api\\\"\\n3) <user> and <password> are from the Plural config above. <yourprefecturl> is the URL you use to connect to Prefect Orion ending with .onplural.sh/api\\n\\n### Step 4: Test running a local file on the Plural Prefect instances\\n\\n1) Create a file called test_flow.py\\n2) Add the following:\\n\\n```python\\nfrom prefect import", "start_char_idx": 332393, "end_char_idx": 335572, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "64e16ed0-f4f8-437f-8d3a-01b37dc0c9e4": {"__data__": {"id_": "64e16ed0-f4f8-437f-8d3a-01b37dc0c9e4", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "611feeb1-9be4-46f0-a5f9-62d3585f5eac", "node_type": null, "metadata": {}, "hash": "cfab33bc77f6a3c7cbca75245ce9ddafaf70f9c1a0b20c5bd515a78c8eecc3e6"}, "3": {"node_id": "d27692c3-6ca1-43dd-8a99-9736a73521bc", "node_type": null, "metadata": {}, "hash": "0796123d1981f666d43f0241b8f5ac2d7adc8460bd95f6a30ca4c3ea7e37f6db"}}, "hash": "8a880c87fc55fb269bfae26dc763a7766ecc70473f3e665c1320e181cec9c1f0", "text": "Add the following:\\n\\n```python\\nfrom prefect import flow\\n\\n@flow\\ndef test_flow():\\n    print(\\\"What is your favorite number?\\\")\\n    print(42)\\n\\nif name == \\\"__main__\\\":\\n    test_flow()\\n\\n\\n3) Run the file locally python test_flow.py\\n```\\n\\nIf everything is functioning, you should see a flow run on the Plural hosted Prefect Orion UI.\\n\\nGuide contributed by @reeves from the Plural Discord.\\n\\n[Edit on Github](https://github.com/pluralsh/documentation/blob/main/pages/applications/prefect.mdpart)\",\n\"source_links\": []\n\"id\": 148,\n\"page_link\": \"https://docs.plural.sh/applications/prefect-agent\",\n\"title\": \" Installing Prefect Agent\",\n\"text\": \"# Installing Prefect Agent\\n\\nprefect agent preconfigured to securely connect to prefect cloud\\n\\n## Description\\n\\nPlural will install Prefect Agent in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Prefect Agent for the following providers:\\n\\n```\\nplural bundle install prefect-agent prefect-agent-aws\\n```\\n\\n```\\nplural bundle install prefect-agent prefect-agent-azure\\n```\\n\\n```\\nplural bundle install prefect-agent prefect-agent-gcp\\n```\\n\\n## Setup Configuration\\n\\napiKey: the prefect cloud api key this agent connects withaccountId: the account id of your Prefect environmentworkspaceId: the workspace id of your Prefect workspace\",\n\"source_links\": []\n\"id\": 149,\n\"page_link\": \"https://docs.plural.sh/applications/prefect-worker\",\n\"title\": \" Installing Prefect Worker\",\n\"text\": \"# Installing Prefect Worker\\n\\nprefect-worker preconfigured to securely connect to prefect cloud\\n\\n## Description\\n\\nPlural will install Prefect Worker in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Prefect Worker for the following providers:\\n\\n```\\nplural bundle install prefect-worker prefect-worker-aws\\n```\\n\\n```\\nplural bundle install prefect-worker prefect-worker-azure\\n```\\n\\n```\\nplural bundle install prefect-worker prefect-worker-gcp\\n```\\n\\n## Setup Configuration\\n\\napiKey: the prefect cloud api key this worker connects withaccountId: the account id of your Prefect environmentworkspaceId: the workspace id of your Prefect workspaceworkPool: the work pool associated with the prefect worker\",\n\"source_links\": []\n\"id\": 150,\n\"page_link\": \"https://docs.plural.sh/applications/rabbitmq\",\n\"title\": \" Installing RabbitMQ\",\n\"text\": \"# Installing RabbitMQ\\n\\nAn open-source message broker.\\n\\n## Description\\n\\nPlural will install RabbitMQ in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support RabbitMQ for the following providers:\\n\\n```\\nplural bundle install rabbitmq rabbitmq-aws\\n```\\n\\n```\\nplural bundle install rabbitmq rabbitmq-azure\\n```\\n\\n```\\nplural bundle install rabbitmq rabbitmq-gcp\\n```\",\n\"source_links\": []\n\"id\": 151,\n\"page_link\": \"https://docs.plural.sh/applications/ray\",\n\"title\": \" Installing", "start_char_idx": 335533, "end_char_idx": 338551, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d27692c3-6ca1-43dd-8a99-9736a73521bc": {"__data__": {"id_": "d27692c3-6ca1-43dd-8a99-9736a73521bc", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "64e16ed0-f4f8-437f-8d3a-01b37dc0c9e4", "node_type": null, "metadata": {}, "hash": "8a880c87fc55fb269bfae26dc763a7766ecc70473f3e665c1320e181cec9c1f0"}, "3": {"node_id": "bbdc7825-52b7-48a4-a73d-73ea71760fef", "node_type": null, "metadata": {}, "hash": "c88696ea4cad3e8f2430e988b4c173188008addb3f7efb1128ba2ea1db3046fd"}}, "hash": "0796123d1981f666d43f0241b8f5ac2d7adc8460bd95f6a30ca4c3ea7e37f6db", "text": "\" Installing Ray\",\n\"text\": \"# Installing Ray\\n\\nray deployed on plural\\n\\n## Description\\n\\nPlural will install Ray in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Ray for the following providers:\\n\\n```\\nplural bundle install ray ray-aws\\n```\\n\\n```\\nplural bundle install ray ray-azure\\n```\\n\\n```\\nplural bundle install ray ray-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: domain on which you'd like to host RAY's page\",\n\"source_links\": []\n\"id\": 152,\n\"page_link\": \"https://docs.plural.sh/applications/redis\",\n\"title\": \" Installing Redis\",\n\"text\": \"# Installing Redis\\n\\nAn open-source, in-memory data structure store, used as a database, cache, and message broker\\n\\n## Description\\n\\nPlural will install Redis in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Redis for the following providers:\\n\\n```\\nplural bundle install redis aws-redis\\n```\\n\\n```\\nplural bundle install redis aws-redis-cluster\\n```\\n\\n```\\nplural bundle install redis azure-redis\\n```\\n\\n```\\nplural bundle install redis azure-redis-cluster\\n```\\n\\n```\\nplural bundle install redis gcp-redis\\n```\\n\\n```\\nplural bundle install redis gcp-redis-cluster\\n```\",\n\"source_links\": []\n\"id\": 153,\n\"page_link\": \"https://docs.plural.sh/applications/redpanda\",\n\"title\": \" Installing Redpanda\",\n\"text\": \"# Installing Redpanda\\n\\nA single tool to configure, orchestrate and manage your entire billing stack\\n\\n## Description\\n\\nPlural will install Redpanda in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Redpanda for the following providers:\\n\\n```\\nplural bundle install redpanda redpanda-aws\\n```\\n\\n```\\nplural bundle install redpanda redpanda-azure\\n```\\n\\n```\\nplural bundle install redpanda redpanda-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your redpanda installation\",\n\"source_links\": []\n\"id\": 154,\n\"page_link\": \"https://docs.plural.sh/applications/reloader\",\n\"title\": \" Installing Reloader\",\n\"text\": \"# Installing Reloader\\n\\nA Kubernetes controller to watch changes in ConfigMap and Secrets and do rolling upgrades on Pods with their associated Deployment, StatefulSet, DaemonSet and DeploymentConfig.\\n\\n## Description\\n\\nPlural will install Reloader in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Reloader for the following providers:\\n\\n```\\nplural bundle install reloader reloader-aws\\n```\\n\\n```\\nplural bundle install reloader reloader-azure\\n```\\n\\n```\\nplural bundle install reloader reloader-equinix\\n```\\n\\n```\\nplural bundle install reloader reloader-gcp\\n```\\n\\n```\\nplural bundle install reloader reloader-kind\\n```\",\n\"source_links\":", "start_char_idx": 338589, "end_char_idx": 341481, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "bbdc7825-52b7-48a4-a73d-73ea71760fef": {"__data__": {"id_": "bbdc7825-52b7-48a4-a73d-73ea71760fef", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "d27692c3-6ca1-43dd-8a99-9736a73521bc", "node_type": null, "metadata": {}, "hash": "0796123d1981f666d43f0241b8f5ac2d7adc8460bd95f6a30ca4c3ea7e37f6db"}, "3": {"node_id": "5e7c763e-5575-4a0c-812f-5f9a2cbcada8", "node_type": null, "metadata": {}, "hash": "a615c1424ac86f033559959be293bb73e35444d73ebd67e10d4c52cf6defdbcc"}}, "hash": "c88696ea4cad3e8f2430e988b4c173188008addb3f7efb1128ba2ea1db3046fd", "text": "bundle install reloader reloader-kind\\n```\",\n\"source_links\": []\n\"id\": 155,\n\"page_link\": \"https://docs.plural.sh/applications/renovate-on-prem\",\n\"title\": \" Installing Renovate on Prem\",\n\"text\": \"# Installing Renovate on Prem\\n\\nUniversal dependency update tool that fits into your workflows.\\n\\n## Description\\n\\nPlural will install Renovate on Prem in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Renovate on Prem for the following providers:\\n\\n```\\nplural bundle install renovate-on-prem renovate-on-prem-aws\\n```\\n\\n```\\nplural bundle install renovate-on-prem renovate-on-prem-azure\\n```\\n\\n```\\nplural bundle install renovate-on-prem renovate-on-prem-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: public domain to host oncall onacceptTos: do you accept the WhiteSource Terms of Service. Please read https://www.whitesourcesoftware.com/terms-of-service/licenseKey: renovate on-prem license keyplatform: can be either github or gitlabgithubAppId: The GitHub App ID provided by GitHub Enterprise when you provisioned the Renovate app.githubAppKey: A string representation of the private key provided by GitHub when you provisioned the Renovate app.webhookSecret: The webhook secret configured for the Renovate app.renovateToken: A Personal Access Token for the GitLab bot account.githubComToken: A Personal Access Token for a valid user account on github.com. This is only used for retrieving changelogs and release notes from repositories hosted on github.com.\",\n\"source_links\": []\n\"id\": 156,\n\"page_link\": \"https://docs.plural.sh/applications/retool\",\n\"title\": \" Installing Retool\",\n\"text\": \"# Installing Retool\\n\\nretool deployed on plural\\n\\n## Description\\n\\nPlural will install Retool in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Retool for the following providers:\\n\\n```\\nplural bundle install retool retool-aws\\n```\\n\\n```\\nplural bundle install retool retool-azure\\n```\\n\\n```\\nplural bundle install retool retool-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: the domain name you want retool to be accessible fromlicenseKey: your retool license key, accessible in the retool dashboard under self-hosted\",\n\"source_links\": []\n\"id\": 157,\n\"page_link\": \"https://docs.plural.sh/applications/rook\",\n\"title\": \" Installing Rook\",\n\"text\": \"# Installing Rook\\n\\nAn open-source cloud-native storage orchestrator for Kubernetes.\\n\\n## Description\\n\\nPlural will install Rook in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Rook for the following providers:\\n\\n```\\nplural bundle install rook rook-aws\\n```\\n\\n```\\nplural bundle install rook rook-azure\\n```\\n\\n```\\nplural bundle install rook rook-equinix\\n```\\n\\n```\\nplural bundle install rook rook-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your the Ceph Dashboards3Hostname: FQDN to use for your the S3 API endpoint\",\n\"source_links\": []\n\"id\":", "start_char_idx": 341436, "end_char_idx": 344517, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5e7c763e-5575-4a0c-812f-5f9a2cbcada8": {"__data__": {"id_": "5e7c763e-5575-4a0c-812f-5f9a2cbcada8", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "bbdc7825-52b7-48a4-a73d-73ea71760fef", "node_type": null, "metadata": {}, "hash": "c88696ea4cad3e8f2430e988b4c173188008addb3f7efb1128ba2ea1db3046fd"}, "3": {"node_id": "7ea37740-e5b1-4974-8537-3a014da89220", "node_type": null, "metadata": {}, "hash": "02c194ed2297b14e2e66f85e9e5f5c42a65cce2f9dd0e73b4cba4298f3315ea1"}}, "hash": "a615c1424ac86f033559959be293bb73e35444d73ebd67e10d4c52cf6defdbcc", "text": "for your the S3 API endpoint\",\n\"source_links\": []\n\"id\": 158,\n\"page_link\": \"https://docs.plural.sh/applications/sentry\",\n\"title\": \" Installing Sentry\",\n\"text\": \"# Installing Sentry\\n\\nA developer-first error tracking and performance monitoring platform.\\n\\n## Description\\n\\nPlural will install Sentry in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Sentry for the following providers:\\n\\n```\\nplural bundle install sentry aws-sentry\\n```\\n\\n```\\nplural bundle install sentry azure-sentry\\n```\\n\\n```\\nplural bundle install sentry gcp-sentry\\n```\\n\\n## Setup Configuration\\n\\nhostname: hostname for your sentry instancefilestoreBucket: s3 bucket to store miscellaneous files toadminEmail: admin user email\",\n\"source_links\": []\n\"id\": 159,\n\"page_link\": \"https://docs.plural.sh/applications/sftpgo\",\n\"title\": \" Installing Sftpgo\",\n\"text\": \"# Installing Sftpgo\\n\\nFully featured and highly configurable SFTP server with optional HTTP/S, FTP/S and WebDAV support - S3, Google Cloud Storage, Azure Blob\\n\\n## Description\\n\\nPlural will install Sftpgo in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Sftpgo for the following providers:\\n\\n```\\nplural bundle install sftpgo sftpgo-aws\\n```\\n\\n```\\nplural bundle install sftpgo sftpgo-azure\\n```\\n\\n```\\nplural bundle install sftpgo sftpgo-gcp\\n```\\n\\n```\\nplural bundle install sftpgo sftpgo-kind\\n```\\n\\n## Setup Configuration\\n\\nhostname: the fully qualified domain name your SFTPGo instance will be available atloadBalancerHostname: a dns name to access the enabled services (sftp on port 22, etc.)\",\n\"source_links\": []\n\"id\": 160,\n\"page_link\": \"https://docs.plural.sh/applications/sonarqube\",\n\"title\": \"Docs | Plural\",\n\"text\": \"## Description\\n\\nPlural will install  in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support  for the following providers:\",\n\"source_links\": []\n\"id\": 161,\n\"page_link\": \"https://docs.plural.sh/applications/spark\",\n\"title\": \" Installing Spark\",\n\"text\": \"# Installing Spark\\n\\nA unified analytics engine for large-scale data processing.\\n\\n## Description\\n\\nPlural will install Spark in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Spark for the following providers:\\n\\n```\\nplural bundle install spark spark-aws\\n```\\n\\n```\\nplural bundle install spark spark-azure\\n```\\n\\n```\\nplural bundle install spark spark-gcp\\n```\",\n\"source_links\": []\n\"id\": 162,\n\"page_link\": \"https://docs.plural.sh/applications/superset\",\n\"title\": \" Installing Superset\",\n\"text\": \"# Installing Superset\\n\\nAn open-source modern data exploration and visualization platform.\\n\\n## Description\\n\\nPlural will install Superset in a dependency-aware manner onto a", "start_char_idx": 344526, "end_char_idx": 347471, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7ea37740-e5b1-4974-8537-3a014da89220": {"__data__": {"id_": "7ea37740-e5b1-4974-8537-3a014da89220", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "5e7c763e-5575-4a0c-812f-5f9a2cbcada8", "node_type": null, "metadata": {}, "hash": "a615c1424ac86f033559959be293bb73e35444d73ebd67e10d4c52cf6defdbcc"}, "3": {"node_id": "8e29f86b-31b0-4ddb-8603-3e32c3b88d5f", "node_type": null, "metadata": {}, "hash": "25ebd3946cad85a47815a0475bc6583ce9538db8fcd792904c80f74c7743811d"}}, "hash": "02c194ed2297b14e2e66f85e9e5f5c42a65cce2f9dd0e73b4cba4298f3315ea1", "text": "will install Superset in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Superset for the following providers:\\n\\n```\\nplural bundle install superset superset-aws\\n```\\n\\n```\\nplural bundle install superset superset-azure\\n```\\n\\n```\\nplural bundle install superset superset-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: Fully Qualified Domain Name to use for your superset installation, eg airflow.topleveldomain.com if topleveldomain.com is the domain you inputed for dns_domain above.username: short name/handle for the initial admin username: full name for the initial admin useradminEmail: email for the initial admin user\",\n\"source_links\": []\n\"id\": 163,\n\"page_link\": \"https://docs.plural.sh/applications/terraria\",\n\"title\": \" Installing Terraria\",\n\"text\": \"# Installing Terraria\\n\\nAn action-adventure sandbox 2D crafting game.\\n\\n## Description\\n\\nPlural will install Terraria in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Terraria for the following providers:\\n\\n```\\nplural bundle install terraria terraria-aws\\n```\\n\\n```\\nplural bundle install terraria terraria-azure\\n```\\n\\n```\\nplural bundle install terraria terraria-equinix\\n```\\n\\n```\\nplural bundle install terraria terraria-gcp\\n```\\n\\n```\\nplural bundle install terraria terraria-kind\\n```\\n\\n## Setup Configuration\\n\\nhostname: domain on which you'd like to host your terraria serverworldsize: size of the world you would like to be generated (small|medium|large)password: password that will be required when joining the server (leave empty to disable)restAPIEnabled: if additional rest API should be enabled and exposed on port 7878 (Y/n)\",\n\"source_links\": []\n\"id\": 164,\n\"page_link\": \"https://docs.plural.sh/applications/tier\",\n\"title\": \" Installing Tier\",\n\"text\": \"# Installing Tier\\n\\nA single tool to configure, orchestrate and manage your entire billing stack\\n\\n## Description\\n\\nPlural will install Tier in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Tier for the following providers:\\n\\n```\\nplural bundle install tier tier-aws\\n```\\n\\n```\\nplural bundle install tier tier-azure\\n```\\n\\n```\\nplural bundle install tier tier-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your tier installationstripeApiKey: Secret API KEY to use for Stripe. From https://dashboard.stripe.com/apikeysstripeLive: Was the key in the previous step a live one (non-test)?\",\n\"source_links\": []\n\"id\": 165,\n\"page_link\": \"https://docs.plural.sh/applications/touca\",\n\"title\": \" Installing Touca\",\n\"text\": \"# Installing Touca\\n\\nContinuous regression testing for critical software workflows\\n\\n## Description\\n\\nPlural will install Touca in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Touca for the following providers:\\n\\n```\\nplural bundle install touca", "start_char_idx": 347472, "end_char_idx": 350546, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8e29f86b-31b0-4ddb-8603-3e32c3b88d5f": {"__data__": {"id_": "8e29f86b-31b0-4ddb-8603-3e32c3b88d5f", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "7ea37740-e5b1-4974-8537-3a014da89220", "node_type": null, "metadata": {}, "hash": "02c194ed2297b14e2e66f85e9e5f5c42a65cce2f9dd0e73b4cba4298f3315ea1"}, "3": {"node_id": "8d438fb9-79b6-4581-a3a8-bb5801be8c34", "node_type": null, "metadata": {}, "hash": "efad02d0f21e03d9784fcda7904787ad8f70ecc7ce964a39880b92a1d87100b5"}}, "hash": "25ebd3946cad85a47815a0475bc6583ce9538db8fcd792904c80f74c7743811d", "text": "following providers:\\n\\n```\\nplural bundle install touca touca-aws\\n```\\n\\n```\\nplural bundle install touca touca-azure\\n```\\n\\n```\\nplural bundle install touca touca-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: the fully qualified domain name your touca instance will be available at\",\n\"source_links\": []\n\"id\": 166,\n\"page_link\": \"https://docs.plural.sh/applications/trace-shield\",\n\"title\": \" Installing Trace Shield\",\n\"text\": \"# Installing Trace Shield\\n\\ntrace-shield deployed on plural\\n\\n## Description\\n\\nPlural will install Trace Shield in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Trace Shield for the following providers:\\n\\n```\\nplural bundle install trace-shield trace-shield-aws\\n```\\n\\n```\\nplural bundle install trace-shield trace-shield-azure\\n```\\n\\n```\\nplural bundle install trace-shield trace-shield-gcp\\n```\\n\\n## Setup Configuration\\n\\nfrontendHostname: FQDN to use for your TraceShield installationhydraHostname: FQDN to use for the Hydra component of TraceShield\",\n\"source_links\": []\n\"id\": 167,\n\"page_link\": \"https://docs.plural.sh/applications/trino\",\n\"title\": \" Installing Trino\",\n\"text\": \"# Installing Trino\\n\\nA distributed SQL query engine for big data and analytics.\\n\\n## Description\\n\\nPlural will install Trino in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Trino for the following providers:\\n\\n```\\nplural bundle install trino trino-aws\\n```\\n\\n```\\nplural bundle install trino trino-azure\\n```\\n\\n```\\nplural bundle install trino trino-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: domain on which you'd like to host trino's web interface\",\n\"source_links\": []\n\"id\": 168,\n\"page_link\": \"https://docs.plural.sh/applications/trivy\",\n\"title\": \" Installing Trivy\",\n\"text\": \"# Installing Trivy\\n\\nFind vulnerabilities, misconfigurations, secrets, SBOM in containers, Kubernetes, code repositories, clouds and more\\n\\n## Description\\n\\nPlural will install Trivy in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Trivy for the following providers:\\n\\n```\\nplural bundle install trivy trivy-aws\\n```\\n\\n```\\nplural bundle install trivy trivy-azure\\n```\\n\\n```\\nplural bundle install trivy trivy-gcp\\n```\",\n\"source_links\": []\n\"id\": 169,\n\"page_link\": \"https://docs.plural.sh/applications/typesense\",\n\"title\": \" Installing Typesense\",\n\"text\": \"# Installing Typesense\\n\\nOpen Source alternative to Algolia and an Easier-to-Use alternative to ElasticSearch\\n\\n## Description\\n\\nPlural will install Typesense in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Typesense for the following providers:\\n\\n```\\nplural bundle install typesense typesense-aws\\n```\\n\\n```\\nplural bundle install typesense", "start_char_idx": 350544, "end_char_idx": 353511, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8d438fb9-79b6-4581-a3a8-bb5801be8c34": {"__data__": {"id_": "8d438fb9-79b6-4581-a3a8-bb5801be8c34", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "8e29f86b-31b0-4ddb-8603-3e32c3b88d5f", "node_type": null, "metadata": {}, "hash": "25ebd3946cad85a47815a0475bc6583ce9538db8fcd792904c80f74c7743811d"}, "3": {"node_id": "42cf6597-8ccd-44a4-b2ca-d17b7f4138c2", "node_type": null, "metadata": {}, "hash": "6c4aace1c761208d9689474f66e3f35b625d26e5c46bd010221506eb4598af8d"}}, "hash": "efad02d0f21e03d9784fcda7904787ad8f70ecc7ce964a39880b92a1d87100b5", "text": "bundle install typesense typesense-azure\\n```\\n\\n```\\nplural bundle install typesense typesense-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your typesense installation\",\n\"source_links\": []\n\"id\": 170,\n\"page_link\": \"https://docs.plural.sh/applications/unleash\",\n\"title\": \"Docs | Plural\",\n\"text\": \"## Description\\n\\nPlural will install  in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support  for the following providers:\",\n\"source_links\": []\n\"id\": 171,\n\"page_link\": \"https://docs.plural.sh/applications/valheim\",\n\"title\": \" Installing Valheim\",\n\"text\": \"# Installing Valheim\\n\\nValheim server deployed on Kubernetes.\\n\\n## Description\\n\\nPlural will install Valheim in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Valheim for the following providers:\\n\\n```\\nplural bundle install valheim valheim-aws\\n```\\n\\n```\\nplural bundle install valheim valheim-azure\\n```\\n\\n```\\nplural bundle install valheim valheim-equinix\\n```\\n\\n```\\nplural bundle install valheim valheim-gcp\\n```\\n\\n```\\nplural bundle install valheim valheim-kind\\n```\\n\\n## Setup Configuration\\n\\nserverName: name that will be shown in the server browserworldName: name of the world (without file extension)hostname: domain on which you would like to host your valheim serverpassword: password that will be required when joining the server. Minimum 5 characters (leave empty to disable).mod: if BepInEx or Valheim Plus mod should be enabled (leave empty to disable)\",\n\"source_links\": []\n\"id\": 172,\n\"page_link\": \"https://docs.plural.sh/applications/vault\",\n\"title\": \" Installing Vault\",\n\"text\": \"# Installing Vault\\n\\nOpen-source identity-based secrets and encryption management system.\\n\\n## Description\\n\\nPlural will install Vault in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Vault for the following providers:\\n\\n```\\nplural bundle install vault vault-aws\\n```\\n\\n```\\nplural bundle install vault vault-azure\\n```\\n\\n```\\nplural bundle install vault vault-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your Vault installation\",\n\"source_links\": []\n\"id\": 173,\n\"page_link\": \"https://docs.plural.sh/applications/vaultwarden\",\n\"title\": \" Installing Vaultwarden\",\n\"text\": \"# Installing Vaultwarden\\n\\nOpen-source password management solution for individuals, teams, and business organizations.\\n\\n## Description\\n\\nPlural will install Vaultwarden in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Vaultwarden for the following providers:\\n\\n```\\nplural bundle install vaultwarden vaultwarden-aws\\n```\\n\\n```\\nplural bundle install vaultwarden vaultwarden-azure\\n```\\n\\n```\\nplural bundle install vaultwarden vaultwarden-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: FQDN to use for your Vaultwarden", "start_char_idx": 353542, "end_char_idx": 356582, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "42cf6597-8ccd-44a4-b2ca-d17b7f4138c2": {"__data__": {"id_": "42cf6597-8ccd-44a4-b2ca-d17b7f4138c2", "embedding": null, "metadata": {}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "43aee896-1c81-435b-9db9-4fba08d7d6ac", "node_type": null, "metadata": {}, "hash": "f4cf37690a366f9e477df98d992e775f28c3edb50b70b8e6030a76155a54a4ab"}, "2": {"node_id": "8d438fb9-79b6-4581-a3a8-bb5801be8c34", "node_type": null, "metadata": {}, "hash": "efad02d0f21e03d9784fcda7904787ad8f70ecc7ce964a39880b92a1d87100b5"}}, "hash": "6c4aace1c761208d9689474f66e3f35b625d26e5c46bd010221506eb4598af8d", "text": "Setup Configuration\\n\\nhostname: FQDN to use for your Vaultwarden installationsignupDomains: comma separated list of domains to allow for user signup\",\n\"source_links\": []\n\"id\": 174,\n\"page_link\": \"https://docs.plural.sh/applications/wireguard\",\n\"title\": \" Installing Wireguard\",\n\"text\": \"# Installing Wireguard\\n\\nAn extremely simple yet fast and modern VPN that utilizes state-of-the-art cryptography.\\n\\n## Description\\n\\nPlural will install Wireguard in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Wireguard for the following providers:\\n\\n```\\nplural bundle install wireguard wireguard-aws\\n```\",\n\"source_links\": []\n\"id\": 175,\n\"page_link\": \"https://docs.plural.sh/applications/yatai\",\n\"title\": \" Installing Yatai\",\n\"text\": \"# Installing Yatai\\n\\nyatai deployed on plural\\n\\n## Description\\n\\nPlural will install Yatai in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Yatai for the following providers:\\n\\n```\\nplural bundle install yatai yatai-aws\\n```\\n\\n## Setup Configuration\\n\\nbucket: S3 Bucket to store BentoML modelshostname: FQDN to use for your yatai installationimage_repository_name: Image repo nameuse_ecr: Whether to use ECR or notecr_repository_type: Type of the ECR repository to create, can be one of `public` or `private`image_registry: Image registry URL to use for your Bento container imagesimage_registry_username: Image registry usernameimage_registry_password: Image registry passwordinitial_username: username of the initial admin account that is setup for you on first installinitial_email: email of the initial admin account that is setup for you on first install\",\n\"source_links\": []\n\"id\": 176,\n\"page_link\": \"https://docs.plural.sh/applications/yugabyte\",\n\"title\": \" Installing Yugabyte\",\n\"text\": \"# Installing Yugabyte\\n\\nHigh-performance NewSQL database for cloud-native applications.\\n\\n## Description\\n\\nPlural will install Yugabyte in a dependency-aware manner onto a Plural-managed Kubernetes cluster with one CLI command.\\n\\n## Installation\\n\\nWe currently support Yugabyte for the following providers:\\n\\n```\\nplural bundle install yugabyte yugabyte-aws\\n```\\n\\n```\\nplural bundle install yugabyte yugabyte-azure\\n```\\n\\n```\\nplural bundle install yugabyte yugabyte-gcp\\n```\\n\\n## Setup Configuration\\n\\nhostname: the fully qualified domain name your yugabyte instance will be available at\",\n\"source_links\": []", "start_char_idx": 356539, "end_char_idx": 359061, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"43aee896-1c81-435b-9db9-4fba08d7d6ac": {"node_ids": ["44357fd8-118a-4732-b882-3c13d7546c08", "236a6d6d-20a6-4757-badc-f866a9135339", "d64da92a-17a3-4023-853b-7c74dd976d87", "71d46738-467b-4e87-b021-066c8046e7ae", "f6568271-5f19-4d66-9bd0-c7e777945ef0", "124e091c-ccde-4ef2-aaf7-34c04982184c", "70484b64-d9ca-461f-95f3-f304afa1cde0", "13f11265-e1e5-4771-8ca8-86c56c2f8b0f", "9d1519ce-14a4-4c25-a93b-6352bc5ececc", "18aec66b-134d-4d9f-a7c4-15ddf9a1d404", "4acd66d9-a336-4a21-9b54-4184b6295540", "f138628c-7670-43e4-9d40-2dd90be91f03", "feaea0b8-0b7a-414e-b1b7-d73df1f05838", "707c9630-30bc-4b34-bd5e-9b87ab542ca8", "686c5487-6b95-476d-85b0-ea47d55e4bb2", "ea661513-7849-43d8-bcf3-6ee40fc9e1bf", "f483fd20-d3eb-486a-ac53-2e9c4ce1e41e", "05f678d1-f5d4-44e1-b916-b69dda87b27b", "96f385b3-756b-4c34-aaf7-50c7a6bdd422", "e3980efa-d55a-4c77-8f4d-2322ddae7ebf", "9358ff6b-c39a-4bff-8ecb-0f0e126e05b3", "47c87c01-28be-4559-9618-c0eaaef59904", "4b84d9fc-ca10-47f9-a376-36854ebb9a15", "92ef7552-a012-49d8-898d-0a3c9413b0ed", "ba1b65a3-cc3a-463c-936a-65820f0c1674", "6a2cc766-bf41-4c27-8d68-bcd990772f52", "67f0e295-4799-4cb7-a0cc-44be13c385b9", "e016a22b-53ba-4043-8344-2e09f106a57c", "1c0731df-61c6-4a9e-835a-c206da06d1ce", "2bf3f888-cdb4-4c3d-a948-a7089331bec8", "0c94da61-44ad-42f2-b360-3d73700eed51", "913eba35-24c9-45d3-97cb-33c51306b748", "aaaff49f-31ff-42d6-bfc0-e8b72b4ff4ca", "0b38387d-fa50-48fd-bbaf-8c6019c00cb5", "93071aa0-0b5c-49bc-b580-cc5e9b843910", "1c5d9820-84c9-48fa-8b4a-83fcd2eff577", "16db21fb-da0a-4373-9307-a2773625a4f3", "e2e8ffe0-df68-41d4-aaee-af6ae07f27d5", "2de59512-9a90-4971-ba97-93f773f7cb10", "bc0c2469-4e5b-41e5-927b-90587c1c209a", "ab41f012-46ce-432c-87df-c81767fb3839", "66120e66-43af-41f4-ae5c-b08de3244ec3", "a91edf2d-4dc3-43e9-a7e4-04509ea2d417", "3ba692bc-3813-4b18-a302-7a00e6afe95c", "fea4d7ff-511f-4641-9d33-461b5730e900", "3e83b2f7-7daa-40a8-9223-45fa41c10839", "f4399db6-a47c-4cea-a440-922f033f1af7", "3ad83a4d-9302-46a9-bb05-2eb8de9cc1f9", "b978f671-5bfc-4a6a-9282-a2ddc6182ddc", "3f90e5b7-9787-466d-b0bb-9554681042d7", "59f5ffca-3d64-4a44-a815-06518885e511", "ba839fba-4a0a-4066-b8cc-3ec3a2978c4c", "759ba640-52bb-42c9-9cbd-dbf861429fa2", "b98eb483-8ea9-4b8a-bf9e-0bb749c82c71", "e2e58768-c348-4204-aff4-ef32742dabd6", "068a78b9-0687-4fc0-9bce-2bd9475fe924", "ecf1bb95-6f1d-409a-895e-135e4289378b", "a57cabea-c208-4f58-942d-5248b2a299d3", "1494c681-7f4f-477a-ad81-67b098c8d9ed", "96616c9b-01d5-4ff9-9ff4-1ae610026c96", "e432d2b6-b21f-4aa9-abaf-d2288d7abc36", "5277bff5-cd91-4332-8010-bac270ecd528", "ecd35d39-adab-4256-b6f0-cb5e3b94ecc9", "7bca798f-b60e-40d0-9d65-9e0b8942584e", "f6251cc8-4e04-469a-8d23-45775b22a0b5", "d21b42da-f289-403a-84a7-3d8e2858991f", "0fbc1517-7e8a-4363-b0e5-be12b94a2f3f", "39726474-c9c5-4236-aaac-2b7f9b99ffd4", "3da81aa2-396d-49e3-a76f-023e8732b3aa", "ba96411f-011b-4f02-b308-a2943a74b682", "aad4e1a9-8e51-4349-8a25-d042af138f70", "c3e005fe-a067-4905-a364-c840ef64cb21", "6bdabac3-e735-49e4-950a-6adacc70ae05", "d338f7d0-d3dd-4df4-9f00-817a35c1d016", "50021089-d5d5-40e1-ba9b-09cde730be6e", "48073fb7-a64e-495f-9a59-81c0922ca5cd", "21f97cf2-dc9e-4a78-89d4-b1a4fbc2b9a7", "97e006e4-ad29-4a81-81c1-0022e3b1d0b6", "d3d89345-0272-4cfa-a730-6ae213e8bba0", "f3edff15-3144-4848-a9a8-a212535b00b2", "7913244a-59bb-445b-9b4e-49bb2a510bb0", "9500dedb-c509-4ef6-a6c2-ecdb87b90418", "5b4af56d-fcfa-48a3-a913-9a74ea0f02d4", "91a41264-127f-4137-8838-c835cc214e8a", "7d12991b-63ff-43ef-bf87-d576ee5e7338", "e16ae4c9-d2fd-4386-8e04-76a212ecc03b", "07db8619-b00d-4145-ae79-4fc681f6c7e6", "c66bcd6f-fef0-443b-9cb0-4bfc65e06cfe", "9c6fabe2-6e91-4689-a8f9-3491fd558f57", "b04779c2-057f-464f-9fee-a6dd8622a463", "13c76117-d693-4dd0-9861-4fa052101dbd", "7efe7388-0367-48f3-9dde-80d85c790759", "5187a7d7-5808-4bb0-892e-23dd1c5b8cfb", "c4e824e1-6f71-4cc1-87a0-3e036e77578f", "27c93f14-917f-4377-8b8c-51677e83365e", "a23ed0a8-b42b-48dd-ac76-3c39458bd03c", "7d5b932d-0ca2-46c6-8364-31fe5582761f", "e12c223b-4cdd-4a9f-aaa8-a9008b828a26", "001975da-2718-42c1-9b0b-8ae17b889054", "a3205dfe-7210-4ea0-838d-133328dbe514", "10cf48ea-2457-4d77-8cce-9e3b53f11f3c", "044cff0a-7edf-4d92-8a53-8758a0d3a916", "bb75b3a8-52ec-45d4-bc62-60dcac50675c", "bca3d0e9-d831-4587-afd3-c3f19ef5b45a", "1dfe92fb-7616-4c64-af12-dec59063b65d", "3b179406-fe67-46a7-9f9c-4f3f18645459", "e3e4d275-1ee5-4eb9-8abd-677c38434ff6", "ad85ba7a-1a95-4e04-8f20-e8a1e89dc3b5", "fb605d04-fa58-4265-b257-f963c60a8d1c", "bfc076cb-15b4-4b9b-879a-c796d184de57", "4c6d9c71-3667-4a17-929d-651f27dbcea2", "d6232ab8-e940-4d0b-9e7f-fdfbd5220143", "7d00d865-956d-4262-8f2e-5e1126c9c2c5", "eaf7c1c2-d799-40fb-b1ab-a0cad345c879", "611feeb1-9be4-46f0-a5f9-62d3585f5eac", "64e16ed0-f4f8-437f-8d3a-01b37dc0c9e4", "d27692c3-6ca1-43dd-8a99-9736a73521bc", "bbdc7825-52b7-48a4-a73d-73ea71760fef", "5e7c763e-5575-4a0c-812f-5f9a2cbcada8", "7ea37740-e5b1-4974-8537-3a014da89220", "8e29f86b-31b0-4ddb-8603-3e32c3b88d5f", "8d438fb9-79b6-4581-a3a8-bb5801be8c34", "42cf6597-8ccd-44a4-b2ca-d17b7f4138c2"], "metadata": {}}}}